CCS PCH C Compiler, Version 4.108, 19920               13-mar-17 16:21

               Filename: F:\project\Src\v1.0\main.lst

               ROM used: 14194 bytes (43%)
                         Largest free fragment is 18574
               RAM used: 9 (0%) at main() level
                         150 (7%) worst case
               Stack:    7 locations

*
0000:  GOTO   11EE
.................... #include <main.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO              	//Internal RC Osc, no CLKOUT 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                	//PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES MCLR                  	//Master Clear pin enabled 
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL12                 	//Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV4               	//System Clock by 4 
.................... #FUSES USBDIV                	//USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                	//USB voltage regulator enabled 
.................... #FUSES ICPRT                 	//ICPRT enabled 
....................  
.................... #use delay(int=4000000) 
*
02C4:  CLRF   FEA
02C6:  MOVLW  8E
02C8:  MOVWF  FE9
02CA:  MOVF   FEF,W
02CC:  BZ    02EA
02CE:  MOVLW  01
02D0:  MOVWF  01
02D2:  CLRF   00
02D4:  DECFSZ 00,F
02D6:  BRA    02D4
02D8:  DECFSZ 01,F
02DA:  BRA    02D2
02DC:  MOVLW  4A
02DE:  MOVWF  00
02E0:  DECFSZ 00,F
02E2:  BRA    02E0
02E4:  BRA    02E6
02E6:  DECFSZ FEF,F
02E8:  BRA    02CE
02EA:  RETLW  00
.................... #define RTC_RST   PIN_A0 
.................... #define RTC_SCLK   PIN_A1 
.................... #define RTC_IO   PIN_A2 
....................  
....................  
.................... #include "DS1302.C" 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef RTC_SCLK 
....................  
.................... #define RTC_SCLK PIN_B1 
.................... #define RTC_IO   PIN_B3 
.................... #define RTC_RST  PIN_B2 
....................  
.................... #endif 
....................  
.................... void write_ds1302_byte(BYTE cmd) { 
....................    BYTE i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
0214:  CLRF   x74
0216:  MOVF   x74,W
0218:  SUBLW  07
021A:  BNC   0236
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
021C:  BCF    FD8.0
021E:  RRCF   x73,F
0220:  BC    0226
0222:  BCF    F89.2
0224:  BRA    0228
0226:  BSF    F89.2
0228:  BCF    F92.2
....................       output_high(RTC_SCLK); 
022A:  BCF    F92.1
022C:  BSF    F89.1
....................       output_low(RTC_SCLK); 
022E:  BCF    F92.1
0230:  BCF    F89.1
....................    } 
0232:  INCF   x74,F
0234:  BRA    0216
.................... } 
0236:  RETLW  00
....................  
.................... void write_ds1302(BYTE cmd, BYTE data) { 
....................  
....................    output_high(RTC_RST); 
0238:  BCF    F92.0
023A:  BSF    F89.0
....................    write_ds1302_byte(cmd); 
023C:  MOVFF  71,73
0240:  RCALL  0214
....................    write_ds1302_byte(data); 
0242:  MOVFF  72,73
0246:  RCALL  0214
....................    output_low(RTC_RST); 
0248:  BCF    F92.0
024A:  BCF    F89.0
.................... } 
024C:  RETLW  00
....................  
.................... BYTE read_ds1302(BYTE cmd) { 
....................    BYTE i,data; 
....................  
....................    output_high(RTC_RST); 
024E:  BCF    F92.0
0250:  BSF    F89.0
....................    write_ds1302_byte(cmd); 
0252:  MOVFF  2F,73
0256:  RCALL  0214
....................     
....................    input(RTC_IO); 
0258:  BSF    F92.2
....................    delay_us(1); 
025A:  NOP   
....................           
....................    for(i=0;i<=7;++i) { 
025C:  CLRF   30
025E:  MOVF   30,W
0260:  SUBLW  07
0262:  BNC   0282
....................       shift_right(&data,1,input(RTC_IO)); 
0264:  BSF    F92.2
0266:  BTFSC  F80.2
0268:  BRA    026E
026A:  BCF    FD8.0
026C:  BRA    0270
026E:  BSF    FD8.0
0270:  RRCF   31,F
....................       output_high(RTC_SCLK); 
0272:  BCF    F92.1
0274:  BSF    F89.1
....................       delay_us(2); 
0276:  BRA    0278
....................       output_low(RTC_SCLK); 
0278:  BCF    F92.1
027A:  BCF    F89.1
....................       delay_us(2); 
027C:  BRA    027E
....................    } 
027E:  INCF   30,F
0280:  BRA    025E
....................    output_low(RTC_RST); 
0282:  BCF    F92.0
0284:  BCF    F89.0
....................  
....................    return(data); 
0286:  MOVFF  31,01
.................... } 
028A:  RETLW  00
....................  
.................... void rtc_init() { 
....................    BYTE x; 
....................    output_low(RTC_RST); 
028C:  BCF    F92.0
028E:  BCF    F89.0
....................    delay_us(2); 
0290:  BRA    0292
....................    output_low(RTC_SCLK); 
0292:  BCF    F92.1
0294:  BCF    F89.1
....................    write_ds1302(0x8e,0); 
0296:  MOVLW  8E
0298:  MOVWF  x71
029A:  CLRF   x72
029C:  RCALL  0238
....................    write_ds1302(0x90,0xa4); 
029E:  MOVLW  90
02A0:  MOVWF  x71
02A2:  MOVLW  A4
02A4:  MOVWF  x72
02A6:  RCALL  0238
....................    x=read_ds1302(0x81); 
02A8:  MOVLW  81
02AA:  MOVWF  2F
02AC:  RCALL  024E
02AE:  MOVFF  01,2B
....................    if((x & 0x80)!=0) 
02B2:  MOVF   2B,W
02B4:  ANDLW  80
02B6:  BZ    02C0
....................      write_ds1302(0x80,0); 
02B8:  MOVLW  80
02BA:  MOVWF  x71
02BC:  CLRF   x72
02BE:  RCALL  0238
.................... } 
02C0:  GOTO   1268 (RETURN)
....................  
.................... byte get_bcd(BYTE data) 
.................... { 
....................    byte nibh; 
....................    byte nibl; 
....................  
....................    nibh=data/10; 
*
0922:  MOVFF  70,8D
0926:  MOVLW  0A
0928:  MOVWF  x8E
092A:  RCALL  044E
092C:  MOVFF  01,71
....................    nibl=data-(nibh*10); 
0930:  MOVF   x71,W
0932:  MULLW  0A
0934:  MOVF   FF3,W
0936:  SUBWF  x70,W
0938:  MOVWF  x72
....................  
....................    return((nibh<<4)|nibl); 
093A:  SWAPF  x71,W
093C:  MOVWF  00
093E:  MOVLW  F0
0940:  ANDWF  00,F
0942:  MOVF   00,W
0944:  IORWF  x72,W
0946:  MOVWF  01
.................... } 
0948:  RETLW  00
....................  
.................... byte rm_bcd(BYTE data) 
.................... { 
....................    byte i; 
....................  
....................    i=data; 
*
03FE:  MOVFF  30,31
....................    data=(i>>4)*10; 
0402:  SWAPF  31,W
0404:  MOVWF  00
0406:  MOVLW  0F
0408:  ANDWF  00,F
040A:  MOVF   00,W
040C:  MULLW  0A
040E:  MOVFF  FF3,30
....................    data=data+(i<<4>>4); 
0412:  SWAPF  31,W
0414:  MOVWF  00
0416:  MOVLW  F0
0418:  ANDWF  00,F
041A:  MOVF   00,W
041C:  SWAPF  00,F
041E:  MOVLW  0F
0420:  ANDWF  00,F
0422:  MOVF   00,W
0424:  ADDWF  30,F
....................  
....................    return data; 
0426:  MOVFF  30,01
.................... } 
042A:  RETLW  00
....................  
.................... void rtc_set_datetime(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
....................    write_ds1302(0x88,get_bcd(mth)); 
....................    write_ds1302(0x8c,get_bcd(year)); 
....................    write_ds1302(0x8a,get_bcd(dow)); 
....................    write_ds1302(0x84,get_bcd(hr)); 
....................    write_ds1302(0x82,get_bcd(min)); 
....................    write_ds1302(0x80,get_bcd(0)); 
.................... } 
....................  
.................... void rtc_set_date(BYTE day, BYTE mth, BYTE year, BYTE dow) { 
....................    write_ds1302(0x86,get_bcd(day)); 
*
0988:  MOVFF  6C,70
098C:  RCALL  0922
098E:  MOVFF  01,70
0992:  MOVLW  86
0994:  MOVWF  x71
0996:  MOVFF  01,72
099A:  RCALL  0238
....................    write_ds1302(0x88,get_bcd(mth)); 
099C:  MOVFF  6D,70
09A0:  RCALL  0922
09A2:  MOVFF  01,70
09A6:  MOVLW  88
09A8:  MOVWF  x71
09AA:  MOVFF  01,72
09AE:  RCALL  0238
....................    write_ds1302(0x8c,get_bcd(year)); 
09B0:  MOVFF  6E,70
09B4:  RCALL  0922
09B6:  MOVFF  01,70
09BA:  MOVLW  8C
09BC:  MOVWF  x71
09BE:  MOVFF  01,72
09C2:  RCALL  0238
....................    write_ds1302(0x8a,get_bcd(dow)); 
09C4:  MOVFF  6F,70
09C8:  RCALL  0922
09CA:  MOVFF  01,70
09CE:  MOVLW  8A
09D0:  MOVWF  x71
09D2:  MOVFF  01,72
09D6:  RCALL  0238
.................... } 
09D8:  GOTO   1146 (RETURN)
....................  
.................... void rtc_set_time(BYTE hr, BYTE min) { 
....................    write_ds1302(0x84,get_bcd(hr)); 
*
094A:  MOVFF  6C,70
094E:  RCALL  0922
0950:  MOVFF  01,6E
0954:  MOVLW  84
0956:  MOVWF  x71
0958:  MOVFF  01,72
095C:  RCALL  0238
....................    write_ds1302(0x82,get_bcd(min)); 
095E:  MOVFF  6D,70
0962:  RCALL  0922
0964:  MOVFF  01,6E
0968:  MOVLW  82
096A:  MOVWF  x71
096C:  MOVFF  01,72
0970:  RCALL  0238
....................    write_ds1302(0x80,get_bcd(0)); 
0972:  CLRF   x70
0974:  RCALL  0922
0976:  MOVFF  01,6E
097A:  MOVLW  80
097C:  MOVWF  x71
097E:  MOVFF  01,72
0982:  RCALL  0238
.................... } 
0984:  GOTO   0C8C (RETURN)
....................  
.................... void rtc_get_date(BYTE& day, BYTE& mth, BYTE& year, BYTE& dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
12C2:  MOVLW  87
12C4:  MOVWF  2F
12C6:  CALL   024E
12CA:  MOVFF  01,2B
12CE:  MOVFF  01,30
12D2:  CALL   03FE
12D6:  MOVFF  01,27
....................    mth = rm_bcd(read_ds1302(0x89)); 
12DA:  MOVLW  89
12DC:  MOVWF  2F
12DE:  CALL   024E
12E2:  MOVFF  01,2B
12E6:  MOVFF  01,30
12EA:  CALL   03FE
12EE:  MOVFF  01,28
....................    year = rm_bcd(read_ds1302(0x8d)); 
12F2:  MOVLW  8D
12F4:  MOVWF  2F
12F6:  CALL   024E
12FA:  MOVFF  01,2B
12FE:  MOVFF  01,30
1302:  CALL   03FE
1306:  MOVFF  01,29
....................    dow = rm_bcd(read_ds1302(0x8b)); 
130A:  MOVLW  8B
130C:  MOVWF  2F
130E:  CALL   024E
1312:  MOVFF  01,2B
1316:  MOVFF  01,30
131A:  CALL   03FE
131E:  MOVFF  01,2A
.................... } 
....................  
.................... void rtc_get_time(BYTE& hr, BYTE& min, BYTE& sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
*
127A:  MOVLW  85
127C:  MOVWF  2F
127E:  CALL   024E
1282:  MOVFF  01,2B
1286:  MOVFF  01,30
128A:  CALL   03FE
128E:  MOVFF  01,24
....................    min = rm_bcd(read_ds1302(0x83)); 
1292:  MOVLW  83
1294:  MOVWF  2F
1296:  CALL   024E
129A:  MOVFF  01,2B
129E:  MOVFF  01,30
12A2:  CALL   03FE
12A6:  MOVFF  01,25
....................    sec = rm_bcd(read_ds1302(0x81)); 
12AA:  MOVLW  81
12AC:  MOVWF  2F
12AE:  CALL   024E
12B2:  MOVFF  01,2B
12B6:  MOVFF  01,30
12BA:  CALL   03FE
12BE:  MOVFF  01,26
.................... } 
....................  
.................... void rtc_write_nvr(BYTE address, BYTE data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... BYTE rtc_read_nvr(BYTE address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
.................... #include <Flex_KBD.c> 
.................... ///////////////////////////////////////////////////////////////////////////  
.................... ////                             Flex_KBD.C                            ////  
.................... ////                  Generic keypad scan driver                       ////  
.................... ////                                                                   ////  
.................... ////  kbd_init()   Must be called before any other function.           ////  
.................... ////                                                                   ////  
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not ////  
.................... ////                   This function should be called frequently so as ////  
.................... ////                   not to miss a key press.                        ////  
.................... ////                                                                   ////  
.................... ///////////////////////////////////////////////////////////////////////////  
....................  
....................  
....................  
.................... //Keypad connection:   
....................  
.................... #define col0 PIN_D4  
.................... #define col1 PIN_D5  
.................... #define col2 PIN_D6  
.................... #define row0 PIN_D0  
.................... #define row1 PIN_D1  
.................... #define row2 PIN_D2  
.................... #define row3 PIN_D3  
....................  
.................... // Keypad layout:  
.................... char const KEYS[4][3] = {{'1','2','3'},  
....................                          {'4','5','6'},  
....................                          {'7','8','9'},  
....................                          {'*','0','#'}};  
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where  
....................                                   // n is the number of times you expect  
....................                                   // to call kbd_getc each second  
....................  
....................  
....................  
.................... void kbd_init() {  
.................... }  
*
0210:  GOTO   1264 (RETURN)
....................  
....................  
.................... short int ALL_ROWS (void)  
.................... {  
....................    if (input (row0) & input (row1) & input (row2) & input (row3))  
*
07AE:  BSF    F95.0
07B0:  MOVLW  00
07B2:  BTFSC  F83.0
07B4:  MOVLW  01
07B6:  MOVWF  x89
07B8:  BSF    F95.1
07BA:  MOVLW  00
07BC:  BTFSC  F83.1
07BE:  MOVLW  01
07C0:  ANDWF  x89,F
07C2:  BSF    F95.2
07C4:  MOVLW  00
07C6:  BTFSC  F83.2
07C8:  MOVLW  01
07CA:  ANDWF  x89,F
07CC:  BSF    F95.3
07CE:  MOVLW  00
07D0:  BTFSC  F83.3
07D2:  MOVLW  01
07D4:  ANDWF  x89,W
07D6:  BZ    07E0
....................       return (0);  
07D8:  MOVLW  00
07DA:  MOVWF  01
07DC:  BRA    07E6
....................    else  
07DE:  BRA    07E6
....................       return (1);  
07E0:  MOVLW  01
07E2:  MOVWF  01
07E4:  BRA    07E6
.................... }  
07E6:  RETLW  00
....................  
....................  
....................  
.................... char kbd_getc( ) {  
....................    static byte kbd_call_count;  
....................    static short int kbd_down;  
....................    static char last_key;  
....................    static byte col;  
....................  
....................    byte kchar;  
....................    byte row;  
....................  
....................    kchar='\0';  
07E8:  CLRF   x87
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) {  
07EA:  INCF   04,F
07EC:  MOVF   04,W
07EE:  SUBLW  21
07F0:  BC    089E
....................        switch (col) {  
07F2:  MOVF   07,W
07F4:  BZ    0800
07F6:  XORLW  01
07F8:  BZ    080E
07FA:  XORLW  03
07FC:  BZ    081C
07FE:  BRA    082A
....................          case 0   : output_low(col0);  
0800:  BCF    F95.4
0802:  BCF    F8C.4
....................                output_high(col1);  
0804:  BCF    F95.5
0806:  BSF    F8C.5
....................                output_high(col2);  
0808:  BCF    F95.6
080A:  BSF    F8C.6
....................                     break;  
080C:  BRA    082A
....................          case 1   : output_high(col0);  
080E:  BCF    F95.4
0810:  BSF    F8C.4
....................                output_low(col1);  
0812:  BCF    F95.5
0814:  BCF    F8C.5
....................                output_high(col2);  
0816:  BCF    F95.6
0818:  BSF    F8C.6
....................                     break;  
081A:  BRA    082A
....................          case 2   : output_high(col0);  
081C:  BCF    F95.4
081E:  BSF    F8C.4
....................                output_high(col1);  
0820:  BCF    F95.5
0822:  BSF    F8C.5
....................                output_low(col2);  
0824:  BCF    F95.6
0826:  BCF    F8C.6
....................                     break;  
0828:  BRA    082A
....................        }  
....................  
....................        if(kbd_down) {  
082A:  BTFSS  05.0
082C:  BRA    083E
....................          if(!ALL_ROWS()) {  
082E:  RCALL  07AE
0830:  MOVF   01,F
0832:  BNZ   083C
....................            kbd_down=false;  
0834:  BCF    05.0
....................            kchar=last_key;  
0836:  MOVFF  06,87
....................            last_key='\0';  
083A:  CLRF   06
....................          }  
....................        } else {  
083C:  BRA    089C
....................           if(ALL_ROWS()) {  
083E:  RCALL  07AE
0840:  MOVF   01,F
0842:  BZ    0892
....................              if(!input (row0))  
0844:  BSF    F95.0
0846:  BTFSC  F83.0
0848:  BRA    084E
....................                row=0;  
084A:  CLRF   x88
....................              else if(!input (row1))  
084C:  BRA    0870
084E:  BSF    F95.1
0850:  BTFSC  F83.1
0852:  BRA    085A
....................                row=1;  
0854:  MOVLW  01
0856:  MOVWF  x88
....................              else if(!input (row2))  
0858:  BRA    0870
085A:  BSF    F95.2
085C:  BTFSC  F83.2
085E:  BRA    0866
....................                row=2;  
0860:  MOVLW  02
0862:  MOVWF  x88
....................              else if(!input (row3))  
0864:  BRA    0870
0866:  BSF    F95.3
0868:  BTFSC  F83.3
086A:  BRA    0870
....................                row=3;  
086C:  MOVLW  03
086E:  MOVWF  x88
....................              last_key =KEYS[row][col];  
0870:  MOVF   x88,W
0872:  MULLW  03
0874:  MOVF   FF3,W
0876:  CLRF   x8A
0878:  MOVWF  x89
087A:  CLRF   03
087C:  MOVF   07,W
087E:  ADDWF  x89,W
0880:  MOVWF  01
0882:  MOVF   x8A,W
0884:  ADDWFC 03,F
0886:  MOVF   01,W
0888:  CALL   0004
088C:  MOVWF  06
....................              kbd_down = true;  
088E:  BSF    05.0
....................           } else {  
0890:  BRA    089C
....................              ++col;  
0892:  INCF   07,F
....................              if(col==3)  
0894:  MOVF   07,W
0896:  SUBLW  03
0898:  BNZ   089C
....................                col=0;  
089A:  CLRF   07
....................           }  
....................        }  
....................       kbd_call_count=0;  
089C:  CLRF   04
....................    }  
....................   return(kchar);  
089E:  MOVFF  87,01
.................... } 
08A2:  RETLW  00
....................  
.................... #include "flexlcd.c" 
.................... // flex_lcd.c  
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_B0  
.................... #define LCD_DB5   PIN_B1  
.................... #define LCD_DB6   PIN_B2  
.................... #define LCD_DB7   PIN_B3  
....................  
.................... #define LCD_E     PIN_B5  
.................... #define LCD_RS    PIN_B4  
.................... #define LCD_RW    PIN_A2  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... //#define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
*
02EC:  BTFSC  x95.0
02EE:  BRA    02F4
02F0:  BCF    F8A.0
02F2:  BRA    02F6
02F4:  BSF    F8A.0
02F6:  BCF    F93.0
....................  output_bit(LCD_DB5, !!(nibble & 2));   
02F8:  BTFSC  x95.1
02FA:  BRA    0300
02FC:  BCF    F8A.1
02FE:  BRA    0302
0300:  BSF    F8A.1
0302:  BCF    F93.1
....................  output_bit(LCD_DB6, !!(nibble & 4));     
0304:  BTFSC  x95.2
0306:  BRA    030C
0308:  BCF    F8A.2
030A:  BRA    030E
030C:  BSF    F8A.2
030E:  BCF    F93.2
....................  output_bit(LCD_DB7, !!(nibble & 8));     
0310:  BTFSC  x95.3
0312:  BRA    0318
0314:  BCF    F8A.3
0316:  BRA    031A
0318:  BSF    F8A.3
031A:  BCF    F93.3
....................  
....................  delay_cycles(1);  
031C:  NOP   
....................  output_high(LCD_E);  
031E:  BCF    F93.5
0320:  BSF    F8A.5
....................  delay_us(2);  
0322:  BRA    0324
....................  output_low(LCD_E);  
0324:  BCF    F93.5
0326:  BCF    F8A.5
.................... }  
0328:  RETLW  00
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
....................      
.................... output_high(LCD_E);  
.................... delay_cycles(1);  
....................  
.................... retval_0 = input(LCD_DB4);  
.................... retval_1 = input(LCD_DB5);  
.................... retval_2 = input(LCD_DB6);  
.................... retval_3 = input(LCD_DB7);  
....................    
.................... output_low(LCD_E);  
....................      
.................... return(retval);     
.................... }     
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
.................... delay_cycles(1);  
....................  
.................... high = lcd_read_nibble();  
....................  
.................... low = lcd_read_nibble();  
....................  
.................... return( (high<<4) | low);  
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
032A:  BCF    F93.4
032C:  BCF    F8A.4
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
.................... #else  
.................... delay_us(60);   
032E:  MOVLW  13
0330:  MOVWF  00
0332:  DECFSZ 00,F
0334:  BRA    0332
0336:  BRA    0338
.................... #endif  
....................  
.................... if(address)  
0338:  MOVF   x92,F
033A:  BZ    0342
....................    output_high(LCD_RS);  
033C:  BCF    F93.4
033E:  BSF    F8A.4
.................... else  
0340:  BRA    0346
....................    output_low(LCD_RS);  
0342:  BCF    F93.4
0344:  BCF    F8A.4
....................        
....................  delay_cycles(1);  
0346:  NOP   
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
.................... delay_cycles(1);  
.................... #endif  
....................  
.................... output_low(LCD_E);  
0348:  BCF    F93.5
034A:  BCF    F8A.5
....................  
.................... lcd_send_nibble(n >> 4);  
034C:  SWAPF  x93,W
034E:  MOVWF  x94
0350:  MOVLW  0F
0352:  ANDWF  x94,F
0354:  MOVFF  94,95
0358:  RCALL  02EC
.................... lcd_send_nibble(n & 0xf);  
035A:  MOVF   x93,W
035C:  ANDLW  0F
035E:  MOVWF  x94
0360:  MOVWF  x95
0362:  RCALL  02EC
.................... }  
0364:  RETLW  00
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
0366:  BCF    F93.4
0368:  BCF    F8A.4
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
.................... #endif  
....................  
.................... output_low(LCD_E);  
036A:  BCF    F93.5
036C:  BCF    F8A.5
....................  
.................... delay_ms(15);  
036E:  MOVLW  0F
0370:  MOVWF  x8E
0372:  RCALL  02C4
....................  
.................... for(i=0 ;i < 3; i++)  
0374:  CLRF   2B
0376:  MOVF   2B,W
0378:  SUBLW  02
037A:  BNC   038C
....................    {  
....................     lcd_send_nibble(0x03);  
037C:  MOVLW  03
037E:  MOVWF  x95
0380:  RCALL  02EC
....................     delay_ms(5);  
0382:  MOVLW  05
0384:  MOVWF  x8E
0386:  RCALL  02C4
....................    }  
0388:  INCF   2B,F
038A:  BRA    0376
....................  
.................... lcd_send_nibble(0x02);  
038C:  MOVLW  02
038E:  MOVWF  x95
0390:  RCALL  02EC
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
0392:  CLRF   2B
0394:  MOVF   2B,W
0396:  SUBLW  03
0398:  BNC   03B2
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
039A:  CLRF   03
039C:  MOVF   2B,W
039E:  RCALL  0020
03A0:  MOVWF  2C
03A2:  CLRF   x92
03A4:  MOVWF  x93
03A6:  RCALL  032A
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
03A8:  MOVLW  05
03AA:  MOVWF  x8E
03AC:  RCALL  02C4
....................     #endif  
....................    }  
03AE:  INCF   2B,F
03B0:  BRA    0394
....................  
.................... }  
03B2:  GOTO   126C (RETURN)
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
042C:  DECFSZ x8F,W
042E:  BRA    0432
0430:  BRA    0438
....................    address = lcd_line_two;  
0432:  MOVLW  40
0434:  MOVWF  x90
.................... else  
0436:  BRA    043A
....................    address=0;  
0438:  CLRF   x90
....................  
.................... address += x-1;  
043A:  MOVLW  01
043C:  SUBWF  x8E,W
043E:  ADDWF  x90,F
.................... lcd_send_byte(0, 0x80 | address);  
0440:  MOVF   x90,W
0442:  IORLW  80
0444:  MOVWF  x91
0446:  CLRF   x92
0448:  MOVWF  x93
044A:  RCALL  032A
.................... }  
044C:  RETLW  00
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
*
0476:  MOVF   x8D,W
0478:  XORLW  0C
047A:  BZ    048A
047C:  XORLW  0B
047E:  BZ    049A
0480:  XORLW  0D
0482:  BZ    04A4
0484:  XORLW  02
0486:  BZ    04B0
0488:  BRA    04BA
....................     case '\f':  
....................       lcd_send_byte(0,1);  
048A:  CLRF   x92
048C:  MOVLW  01
048E:  MOVWF  x93
0490:  RCALL  032A
....................       delay_ms(2);  
0492:  MOVLW  02
0494:  MOVWF  x8E
0496:  RCALL  02C4
....................       break;  
0498:  BRA    04C6
....................      
....................     case '\a':  
....................        lcd_gotoxy(1,1);  
049A:  MOVLW  01
049C:  MOVWF  x8E
049E:  MOVWF  x8F
04A0:  RCALL  042C
....................        break; 
04A2:  BRA    04C6
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
04A4:  MOVLW  01
04A6:  MOVWF  x8E
04A8:  MOVLW  02
04AA:  MOVWF  x8F
04AC:  RCALL  042C
....................        break;  
04AE:  BRA    04C6
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
04B0:  CLRF   x92
04B2:  MOVLW  10
04B4:  MOVWF  x93
04B6:  RCALL  032A
....................        break;  
04B8:  BRA    04C6
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
04BA:  MOVLW  01
04BC:  MOVWF  x92
04BE:  MOVFF  8D,93
04C2:  RCALL  032A
....................        break;  
04C4:  BRA    04C6
....................    }  
.................... }  
04C6:  RETLW  00
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
.................... #include <menu.c> 
.................... typedef struct 
.................... { 
....................    BYTE hour,min; 
.................... }Hour; 
....................  
.................... typedef struct 
.................... { 
....................    Hour on; 
....................    Hour off; 
.................... }Day; 
....................  
.................... typedef struct 
.................... { 
....................    Day monday, tuesday, wednesday; 
....................    Day thursday, friday, saturday, sunday; 
.................... }Week; 
....................  
.................... void clean(int a) 
.................... { 
....................    if(a == 1 || a ==2) 
*
08C4:  DECFSZ x87,W
08C6:  BRA    08CA
08C8:  BRA    08D0
08CA:  MOVF   x87,W
08CC:  SUBLW  02
08CE:  BNZ   08E2
....................    { 
....................       lcd_gotoxy(1,1); 
08D0:  MOVLW  01
08D2:  MOVWF  x8E
08D4:  MOVWF  x8F
08D6:  RCALL  042C
....................       printf(lcd_putc,"                ");  
08D8:  MOVLW  34
08DA:  MOVWF  FF6
08DC:  MOVLW  00
08DE:  MOVWF  FF7
08E0:  RCALL  08A4
....................    } 
....................    if(a ==2) 
08E2:  MOVF   x87,W
08E4:  SUBLW  02
08E6:  BNZ   08FC
....................    { 
....................       lcd_gotoxy(1,2); 
08E8:  MOVLW  01
08EA:  MOVWF  x8E
08EC:  MOVLW  02
08EE:  MOVWF  x8F
08F0:  RCALL  042C
....................       printf(lcd_putc,"                "); 
08F2:  MOVLW  46
08F4:  MOVWF  FF6
08F6:  MOVLW  00
08F8:  MOVWF  FF7
08FA:  RCALL  08A4
....................    } 
.................... } 
08FC:  RETLW  00
....................  
.................... void eepromLoad(BYTE addr,Week* schedule) 
.................... { 
*
118E:  MOVFF  7E,80
1192:  MOVFF  7D,7F
....................    BYTE *ptr = (BYTE*) schedule; 
....................    BYTE i; 
....................    for (i = 0; i < sizeof(schedule); i++) 
1196:  CLRF   x81
1198:  MOVF   x81,W
119A:  SUBLW  01
119C:  BNC   11EA
....................       write_eeprom (addr++, *(ptr++)); 
119E:  MOVF   x7C,W
11A0:  INCF   x7C,F
11A2:  MOVWF  x82
11A4:  MOVF   x80,W
11A6:  MOVWF  03
11A8:  MOVF   x7F,W
11AA:  INCF   x7F,F
11AC:  BTFSC  FD8.2
11AE:  INCF   x80,F
11B0:  MOVWF  FE9
11B2:  MOVFF  03,FEA
11B6:  MOVFF  FEF,83
11BA:  MOVFF  82,FA9
11BE:  MOVFF  83,FA8
11C2:  BCF    FA6.6
11C4:  BCF    FA6.7
11C6:  BSF    FA6.2
11C8:  MOVF   FF2,W
11CA:  MOVWF  00
11CC:  BCF    FF2.7
11CE:  MOVLB  F
11D0:  MOVLW  55
11D2:  MOVWF  FA7
11D4:  MOVLW  AA
11D6:  MOVWF  FA7
11D8:  BSF    FA6.1
11DA:  BTFSC  FA6.1
11DC:  BRA    11DA
11DE:  BCF    FA6.2
11E0:  MOVF   00,W
11E2:  IORWF  FF2,F
11E4:  MOVLB  0
11E6:  INCF   x81,F
11E8:  BRA    1198
.................... } 
11EA:  GOTO   371E (RETURN)
....................  
.................... void dataLoad (Byte addr,Week* schedule) 
.................... { 
*
03B6:  MOVFF  2D,2F
03BA:  MOVFF  2C,2E
....................    BYTE *ptr = (BYTE*) schedule; 
....................    BYTE i; 
....................    for (i = 0; i < sizeof(schedule); i++) 
03BE:  CLRF   30
03C0:  MOVF   30,W
03C2:  SUBLW  01
03C4:  BNC   03FA
....................       *(ptr++) = read_eeprom(addr++); 
03C6:  MOVF   2F,W
03C8:  MOVWF  03
03CA:  MOVF   2E,W
03CC:  INCF   2E,F
03CE:  BTFSC  FD8.2
03D0:  INCF   2F,F
03D2:  MOVWF  FE9
03D4:  MOVFF  03,FEA
03D8:  MOVF   2B,W
03DA:  INCF   2B,F
03DC:  MOVWF  33
03DE:  MOVFF  FF2,34
03E2:  BCF    FF2.7
03E4:  MOVFF  33,FA9
03E8:  BCF    FA6.6
03EA:  BCF    FA6.7
03EC:  BSF    FA6.0
03EE:  MOVF   FA8,W
03F0:  BTFSC  34.7
03F2:  BSF    FF2.7
03F4:  MOVWF  FEF
03F6:  INCF   30,F
03F8:  BRA    03C0
.................... } 
03FA:  GOTO   127A (RETURN)
....................  
....................  
.................... int concatenateAtoi(char& a, char& b) 
.................... { 
*
0C1E:  MOVLW  0A
0C20:  MOVWF  x8A
*
0C50:  MOVLW  0A
0C52:  MOVWF  x8A
*
0E02:  MOVLW  0A
0E04:  MOVWF  x8A
*
0EDA:  MOVLW  0A
0EDC:  MOVWF  x8A
*
1032:  MOVLW  0A
1034:  MOVWF  x8A
*
16EE:  MOVLW  0A
16F0:  MOVWF  x8A
*
1720:  MOVLW  0A
1722:  MOVWF  x8A
*
1940:  MOVLW  0A
1942:  MOVWF  x8A
*
1972:  MOVLW  0A
1974:  MOVWF  x8A
*
1BCA:  MOVLW  0A
1BCC:  MOVWF  x8A
*
1BFC:  MOVLW  0A
1BFE:  MOVWF  x8A
*
1E1C:  MOVLW  0A
1E1E:  MOVWF  x8A
*
1E4E:  MOVLW  0A
1E50:  MOVWF  x8A
*
20A6:  MOVLW  0A
20A8:  MOVWF  x8A
*
20D8:  MOVLW  0A
20DA:  MOVWF  x8A
*
22F8:  MOVLW  0A
22FA:  MOVWF  x8A
*
232A:  MOVLW  0A
232C:  MOVWF  x8A
*
2582:  MOVLW  0A
2584:  MOVWF  x8A
*
25B4:  MOVLW  0A
25B6:  MOVWF  x8A
*
27D4:  MOVLW  0A
27D6:  MOVWF  x8A
*
2806:  MOVLW  0A
2808:  MOVWF  x8A
*
2A5E:  MOVLW  0A
2A60:  MOVWF  x8A
*
2A90:  MOVLW  0A
2A92:  MOVWF  x8A
*
2CB0:  MOVLW  0A
2CB2:  MOVWF  x8A
*
2CE2:  MOVLW  0A
2CE4:  MOVWF  x8A
*
2F3A:  MOVLW  0A
2F3C:  MOVWF  x8A
*
2F6C:  MOVLW  0A
2F6E:  MOVWF  x8A
*
318C:  MOVLW  0A
318E:  MOVWF  x8A
*
31BE:  MOVLW  0A
31C0:  MOVWF  x8A
*
3414:  MOVLW  0A
3416:  MOVWF  x8A
*
3446:  MOVLW  0A
3448:  MOVWF  x8A
*
3666:  MOVLW  0A
3668:  MOVWF  x8A
*
3698:  MOVLW  0A
369A:  MOVWF  x8A
....................    int aI, bI, r, pow=10; 
....................    aI = a-'0'; 
*
0C22:  MOVLW  30
0C24:  SUBWF  x80,W
0C26:  MOVWF  x87
*
0C54:  MOVLW  30
0C56:  SUBWF  x82,W
0C58:  MOVWF  x87
*
0E06:  MOVLW  30
0E08:  SUBWF  x70,W
0E0A:  MOVWF  x87
*
0EDE:  MOVLW  30
0EE0:  SUBWF  x70,W
0EE2:  MOVWF  x87
*
1036:  MOVLW  30
1038:  SUBWF  x70,W
103A:  MOVWF  x87
*
16F2:  MOVLW  30
16F4:  SUBWF  x80,W
16F6:  MOVWF  x87
*
1724:  MOVLW  30
1726:  SUBWF  x82,W
1728:  MOVWF  x87
*
1944:  MOVLW  30
1946:  SUBWF  x80,W
1948:  MOVWF  x87
*
1976:  MOVLW  30
1978:  SUBWF  x82,W
197A:  MOVWF  x87
*
1BCE:  MOVLW  30
1BD0:  SUBWF  x80,W
1BD2:  MOVWF  x87
*
1C00:  MOVLW  30
1C02:  SUBWF  x82,W
1C04:  MOVWF  x87
*
1E20:  MOVLW  30
1E22:  SUBWF  x80,W
1E24:  MOVWF  x87
*
1E52:  MOVLW  30
1E54:  SUBWF  x82,W
1E56:  MOVWF  x87
*
20AA:  MOVLW  30
20AC:  SUBWF  x80,W
20AE:  MOVWF  x87
*
20DC:  MOVLW  30
20DE:  SUBWF  x82,W
20E0:  MOVWF  x87
*
22FC:  MOVLW  30
22FE:  SUBWF  x80,W
2300:  MOVWF  x87
*
232E:  MOVLW  30
2330:  SUBWF  x82,W
2332:  MOVWF  x87
*
2586:  MOVLW  30
2588:  SUBWF  x80,W
258A:  MOVWF  x87
*
25B8:  MOVLW  30
25BA:  SUBWF  x82,W
25BC:  MOVWF  x87
*
27D8:  MOVLW  30
27DA:  SUBWF  x80,W
27DC:  MOVWF  x87
*
280A:  MOVLW  30
280C:  SUBWF  x82,W
280E:  MOVWF  x87
*
2A62:  MOVLW  30
2A64:  SUBWF  x80,W
2A66:  MOVWF  x87
*
2A94:  MOVLW  30
2A96:  SUBWF  x82,W
2A98:  MOVWF  x87
*
2CB4:  MOVLW  30
2CB6:  SUBWF  x80,W
2CB8:  MOVWF  x87
*
2CE6:  MOVLW  30
2CE8:  SUBWF  x82,W
2CEA:  MOVWF  x87
*
2F3E:  MOVLW  30
2F40:  SUBWF  x80,W
2F42:  MOVWF  x87
*
2F70:  MOVLW  30
2F72:  SUBWF  x82,W
2F74:  MOVWF  x87
*
3190:  MOVLW  30
3192:  SUBWF  x80,W
3194:  MOVWF  x87
*
31C2:  MOVLW  30
31C4:  SUBWF  x82,W
31C6:  MOVWF  x87
*
3418:  MOVLW  30
341A:  SUBWF  x80,W
341C:  MOVWF  x87
*
344A:  MOVLW  30
344C:  SUBWF  x82,W
344E:  MOVWF  x87
*
366A:  MOVLW  30
366C:  SUBWF  x80,W
366E:  MOVWF  x87
*
369C:  MOVLW  30
369E:  SUBWF  x82,W
36A0:  MOVWF  x87
....................    bI = b-'0'; 
*
0C28:  MOVLW  30
0C2A:  SUBWF  x81,W
0C2C:  MOVWF  x88
*
0C5A:  MOVLW  30
0C5C:  SUBWF  x83,W
0C5E:  MOVWF  x88
*
0E0C:  MOVLW  30
0E0E:  SUBWF  x71,W
0E10:  MOVWF  x88
*
0EE4:  MOVLW  30
0EE6:  SUBWF  x71,W
0EE8:  MOVWF  x88
*
103C:  MOVLW  30
103E:  SUBWF  x71,W
1040:  MOVWF  x88
*
16F8:  MOVLW  30
16FA:  SUBWF  x81,W
16FC:  MOVWF  x88
*
172A:  MOVLW  30
172C:  SUBWF  x83,W
172E:  MOVWF  x88
*
194A:  MOVLW  30
194C:  SUBWF  x81,W
194E:  MOVWF  x88
*
197C:  MOVLW  30
197E:  SUBWF  x83,W
1980:  MOVWF  x88
*
1BD4:  MOVLW  30
1BD6:  SUBWF  x81,W
1BD8:  MOVWF  x88
*
1C06:  MOVLW  30
1C08:  SUBWF  x83,W
1C0A:  MOVWF  x88
*
1E26:  MOVLW  30
1E28:  SUBWF  x81,W
1E2A:  MOVWF  x88
*
1E58:  MOVLW  30
1E5A:  SUBWF  x83,W
1E5C:  MOVWF  x88
*
20B0:  MOVLW  30
20B2:  SUBWF  x81,W
20B4:  MOVWF  x88
*
20E2:  MOVLW  30
20E4:  SUBWF  x83,W
20E6:  MOVWF  x88
*
2302:  MOVLW  30
2304:  SUBWF  x81,W
2306:  MOVWF  x88
*
2334:  MOVLW  30
2336:  SUBWF  x83,W
2338:  MOVWF  x88
*
258C:  MOVLW  30
258E:  SUBWF  x81,W
2590:  MOVWF  x88
*
25BE:  MOVLW  30
25C0:  SUBWF  x83,W
25C2:  MOVWF  x88
*
27DE:  MOVLW  30
27E0:  SUBWF  x81,W
27E2:  MOVWF  x88
*
2810:  MOVLW  30
2812:  SUBWF  x83,W
2814:  MOVWF  x88
*
2A68:  MOVLW  30
2A6A:  SUBWF  x81,W
2A6C:  MOVWF  x88
*
2A9A:  MOVLW  30
2A9C:  SUBWF  x83,W
2A9E:  MOVWF  x88
*
2CBA:  MOVLW  30
2CBC:  SUBWF  x81,W
2CBE:  MOVWF  x88
*
2CEC:  MOVLW  30
2CEE:  SUBWF  x83,W
2CF0:  MOVWF  x88
*
2F44:  MOVLW  30
2F46:  SUBWF  x81,W
2F48:  MOVWF  x88
*
2F76:  MOVLW  30
2F78:  SUBWF  x83,W
2F7A:  MOVWF  x88
*
3196:  MOVLW  30
3198:  SUBWF  x81,W
319A:  MOVWF  x88
*
31C8:  MOVLW  30
31CA:  SUBWF  x83,W
31CC:  MOVWF  x88
*
341E:  MOVLW  30
3420:  SUBWF  x81,W
3422:  MOVWF  x88
*
3450:  MOVLW  30
3452:  SUBWF  x83,W
3454:  MOVWF  x88
*
3670:  MOVLW  30
3672:  SUBWF  x81,W
3674:  MOVWF  x88
*
36A2:  MOVLW  30
36A4:  SUBWF  x83,W
36A6:  MOVWF  x88
....................    while(bI >= pow) 
....................       pow *= 10; 
*
0C2E:  MOVF   x8A,W
0C30:  SUBWF  x88,W
0C32:  BNC   0C3E
0C34:  MOVF   x8A,W
0C36:  MULLW  0A
0C38:  MOVFF  FF3,8A
0C3C:  BRA    0C2E
*
0C60:  MOVF   x8A,W
0C62:  SUBWF  x88,W
0C64:  BNC   0C70
0C66:  MOVF   x8A,W
0C68:  MULLW  0A
0C6A:  MOVFF  FF3,8A
0C6E:  BRA    0C60
*
0E12:  MOVF   x8A,W
0E14:  SUBWF  x88,W
0E16:  BNC   0E22
0E18:  MOVF   x8A,W
0E1A:  MULLW  0A
0E1C:  MOVFF  FF3,8A
0E20:  BRA    0E12
*
0EEA:  MOVF   x8A,W
0EEC:  SUBWF  x88,W
0EEE:  BNC   0EFA
0EF0:  MOVF   x8A,W
0EF2:  MULLW  0A
0EF4:  MOVFF  FF3,8A
0EF8:  BRA    0EEA
*
1042:  MOVF   x8A,W
1044:  SUBWF  x88,W
1046:  BNC   1052
1048:  MOVF   x8A,W
104A:  MULLW  0A
104C:  MOVFF  FF3,8A
1050:  BRA    1042
*
16FE:  MOVF   x8A,W
1700:  SUBWF  x88,W
1702:  BNC   170E
1704:  MOVF   x8A,W
1706:  MULLW  0A
1708:  MOVFF  FF3,8A
170C:  BRA    16FE
*
1730:  MOVF   x8A,W
1732:  SUBWF  x88,W
1734:  BNC   1740
1736:  MOVF   x8A,W
1738:  MULLW  0A
173A:  MOVFF  FF3,8A
173E:  BRA    1730
*
1950:  MOVF   x8A,W
1952:  SUBWF  x88,W
1954:  BNC   1960
1956:  MOVF   x8A,W
1958:  MULLW  0A
195A:  MOVFF  FF3,8A
195E:  BRA    1950
*
1982:  MOVF   x8A,W
1984:  SUBWF  x88,W
1986:  BNC   1992
1988:  MOVF   x8A,W
198A:  MULLW  0A
198C:  MOVFF  FF3,8A
1990:  BRA    1982
*
1BDA:  MOVF   x8A,W
1BDC:  SUBWF  x88,W
1BDE:  BNC   1BEA
1BE0:  MOVF   x8A,W
1BE2:  MULLW  0A
1BE4:  MOVFF  FF3,8A
1BE8:  BRA    1BDA
*
1C0C:  MOVF   x8A,W
1C0E:  SUBWF  x88,W
1C10:  BNC   1C1C
1C12:  MOVF   x8A,W
1C14:  MULLW  0A
1C16:  MOVFF  FF3,8A
1C1A:  BRA    1C0C
*
1E2C:  MOVF   x8A,W
1E2E:  SUBWF  x88,W
1E30:  BNC   1E3C
1E32:  MOVF   x8A,W
1E34:  MULLW  0A
1E36:  MOVFF  FF3,8A
1E3A:  BRA    1E2C
*
1E5E:  MOVF   x8A,W
1E60:  SUBWF  x88,W
1E62:  BNC   1E6E
1E64:  MOVF   x8A,W
1E66:  MULLW  0A
1E68:  MOVFF  FF3,8A
1E6C:  BRA    1E5E
*
20B6:  MOVF   x8A,W
20B8:  SUBWF  x88,W
20BA:  BNC   20C6
20BC:  MOVF   x8A,W
20BE:  MULLW  0A
20C0:  MOVFF  FF3,8A
20C4:  BRA    20B6
*
20E8:  MOVF   x8A,W
20EA:  SUBWF  x88,W
20EC:  BNC   20F8
20EE:  MOVF   x8A,W
20F0:  MULLW  0A
20F2:  MOVFF  FF3,8A
20F6:  BRA    20E8
*
2308:  MOVF   x8A,W
230A:  SUBWF  x88,W
230C:  BNC   2318
230E:  MOVF   x8A,W
2310:  MULLW  0A
2312:  MOVFF  FF3,8A
2316:  BRA    2308
*
233A:  MOVF   x8A,W
233C:  SUBWF  x88,W
233E:  BNC   234A
2340:  MOVF   x8A,W
2342:  MULLW  0A
2344:  MOVFF  FF3,8A
2348:  BRA    233A
*
2592:  MOVF   x8A,W
2594:  SUBWF  x88,W
2596:  BNC   25A2
2598:  MOVF   x8A,W
259A:  MULLW  0A
259C:  MOVFF  FF3,8A
25A0:  BRA    2592
*
25C4:  MOVF   x8A,W
25C6:  SUBWF  x88,W
25C8:  BNC   25D4
25CA:  MOVF   x8A,W
25CC:  MULLW  0A
25CE:  MOVFF  FF3,8A
25D2:  BRA    25C4
*
27E4:  MOVF   x8A,W
27E6:  SUBWF  x88,W
27E8:  BNC   27F4
27EA:  MOVF   x8A,W
27EC:  MULLW  0A
27EE:  MOVFF  FF3,8A
27F2:  BRA    27E4
*
2816:  MOVF   x8A,W
2818:  SUBWF  x88,W
281A:  BNC   2826
281C:  MOVF   x8A,W
281E:  MULLW  0A
2820:  MOVFF  FF3,8A
2824:  BRA    2816
*
2A6E:  MOVF   x8A,W
2A70:  SUBWF  x88,W
2A72:  BNC   2A7E
2A74:  MOVF   x8A,W
2A76:  MULLW  0A
2A78:  MOVFF  FF3,8A
2A7C:  BRA    2A6E
*
2AA0:  MOVF   x8A,W
2AA2:  SUBWF  x88,W
2AA4:  BNC   2AB0
2AA6:  MOVF   x8A,W
2AA8:  MULLW  0A
2AAA:  MOVFF  FF3,8A
2AAE:  BRA    2AA0
*
2CC0:  MOVF   x8A,W
2CC2:  SUBWF  x88,W
2CC4:  BNC   2CD0
2CC6:  MOVF   x8A,W
2CC8:  MULLW  0A
2CCA:  MOVFF  FF3,8A
2CCE:  BRA    2CC0
*
2CF2:  MOVF   x8A,W
2CF4:  SUBWF  x88,W
2CF6:  BNC   2D02
2CF8:  MOVF   x8A,W
2CFA:  MULLW  0A
2CFC:  MOVFF  FF3,8A
2D00:  BRA    2CF2
*
2F4A:  MOVF   x8A,W
2F4C:  SUBWF  x88,W
2F4E:  BNC   2F5A
2F50:  MOVF   x8A,W
2F52:  MULLW  0A
2F54:  MOVFF  FF3,8A
2F58:  BRA    2F4A
*
2F7C:  MOVF   x8A,W
2F7E:  SUBWF  x88,W
2F80:  BNC   2F8C
2F82:  MOVF   x8A,W
2F84:  MULLW  0A
2F86:  MOVFF  FF3,8A
2F8A:  BRA    2F7C
*
319C:  MOVF   x8A,W
319E:  SUBWF  x88,W
31A0:  BNC   31AC
31A2:  MOVF   x8A,W
31A4:  MULLW  0A
31A6:  MOVFF  FF3,8A
31AA:  BRA    319C
*
31CE:  MOVF   x8A,W
31D0:  SUBWF  x88,W
31D2:  BNC   31DE
31D4:  MOVF   x8A,W
31D6:  MULLW  0A
31D8:  MOVFF  FF3,8A
31DC:  BRA    31CE
*
3424:  MOVF   x8A,W
3426:  SUBWF  x88,W
3428:  BNC   3434
342A:  MOVF   x8A,W
342C:  MULLW  0A
342E:  MOVFF  FF3,8A
3432:  BRA    3424
*
3456:  MOVF   x8A,W
3458:  SUBWF  x88,W
345A:  BNC   3466
345C:  MOVF   x8A,W
345E:  MULLW  0A
3460:  MOVFF  FF3,8A
3464:  BRA    3456
*
3676:  MOVF   x8A,W
3678:  SUBWF  x88,W
367A:  BNC   3686
367C:  MOVF   x8A,W
367E:  MULLW  0A
3680:  MOVFF  FF3,8A
3684:  BRA    3676
*
36A8:  MOVF   x8A,W
36AA:  SUBWF  x88,W
36AC:  BNC   36B8
36AE:  MOVF   x8A,W
36B0:  MULLW  0A
36B2:  MOVFF  FF3,8A
36B6:  BRA    36A8
....................    r = aI*pow+bI; 
*
0C3E:  MOVF   x87,W
0C40:  MULWF  x8A
0C42:  MOVF   FF3,W
0C44:  ADDWF  x88,W
0C46:  MOVWF  x89
*
0C70:  MOVF   x87,W
0C72:  MULWF  x8A
0C74:  MOVF   FF3,W
0C76:  ADDWF  x88,W
0C78:  MOVWF  x89
*
0E22:  MOVF   x87,W
0E24:  MULWF  x8A
0E26:  MOVF   FF3,W
0E28:  ADDWF  x88,W
0E2A:  MOVWF  x89
*
0EFA:  MOVF   x87,W
0EFC:  MULWF  x8A
0EFE:  MOVF   FF3,W
0F00:  ADDWF  x88,W
0F02:  MOVWF  x89
*
1052:  MOVF   x87,W
1054:  MULWF  x8A
1056:  MOVF   FF3,W
1058:  ADDWF  x88,W
105A:  MOVWF  x89
*
170E:  MOVF   x87,W
1710:  MULWF  x8A
1712:  MOVF   FF3,W
1714:  ADDWF  x88,W
1716:  MOVWF  x89
*
1740:  MOVF   x87,W
1742:  MULWF  x8A
1744:  MOVF   FF3,W
1746:  ADDWF  x88,W
1748:  MOVWF  x89
*
1960:  MOVF   x87,W
1962:  MULWF  x8A
1964:  MOVF   FF3,W
1966:  ADDWF  x88,W
1968:  MOVWF  x89
*
1992:  MOVF   x87,W
1994:  MULWF  x8A
1996:  MOVF   FF3,W
1998:  ADDWF  x88,W
199A:  MOVWF  x89
*
1BEA:  MOVF   x87,W
1BEC:  MULWF  x8A
1BEE:  MOVF   FF3,W
1BF0:  ADDWF  x88,W
1BF2:  MOVWF  x89
*
1C1C:  MOVF   x87,W
1C1E:  MULWF  x8A
1C20:  MOVF   FF3,W
1C22:  ADDWF  x88,W
1C24:  MOVWF  x89
*
1E3C:  MOVF   x87,W
1E3E:  MULWF  x8A
1E40:  MOVF   FF3,W
1E42:  ADDWF  x88,W
1E44:  MOVWF  x89
*
1E6E:  MOVF   x87,W
1E70:  MULWF  x8A
1E72:  MOVF   FF3,W
1E74:  ADDWF  x88,W
1E76:  MOVWF  x89
*
20C6:  MOVF   x87,W
20C8:  MULWF  x8A
20CA:  MOVF   FF3,W
20CC:  ADDWF  x88,W
20CE:  MOVWF  x89
*
20F8:  MOVF   x87,W
20FA:  MULWF  x8A
20FC:  MOVF   FF3,W
20FE:  ADDWF  x88,W
2100:  MOVWF  x89
*
2318:  MOVF   x87,W
231A:  MULWF  x8A
231C:  MOVF   FF3,W
231E:  ADDWF  x88,W
2320:  MOVWF  x89
*
234A:  MOVF   x87,W
234C:  MULWF  x8A
234E:  MOVF   FF3,W
2350:  ADDWF  x88,W
2352:  MOVWF  x89
*
25A2:  MOVF   x87,W
25A4:  MULWF  x8A
25A6:  MOVF   FF3,W
25A8:  ADDWF  x88,W
25AA:  MOVWF  x89
*
25D4:  MOVF   x87,W
25D6:  MULWF  x8A
25D8:  MOVF   FF3,W
25DA:  ADDWF  x88,W
25DC:  MOVWF  x89
*
27F4:  MOVF   x87,W
27F6:  MULWF  x8A
27F8:  MOVF   FF3,W
27FA:  ADDWF  x88,W
27FC:  MOVWF  x89
*
2826:  MOVF   x87,W
2828:  MULWF  x8A
282A:  MOVF   FF3,W
282C:  ADDWF  x88,W
282E:  MOVWF  x89
*
2A7E:  MOVF   x87,W
2A80:  MULWF  x8A
2A82:  MOVF   FF3,W
2A84:  ADDWF  x88,W
2A86:  MOVWF  x89
*
2AB0:  MOVF   x87,W
2AB2:  MULWF  x8A
2AB4:  MOVF   FF3,W
2AB6:  ADDWF  x88,W
2AB8:  MOVWF  x89
*
2CD0:  MOVF   x87,W
2CD2:  MULWF  x8A
2CD4:  MOVF   FF3,W
2CD6:  ADDWF  x88,W
2CD8:  MOVWF  x89
*
2D02:  MOVF   x87,W
2D04:  MULWF  x8A
2D06:  MOVF   FF3,W
2D08:  ADDWF  x88,W
2D0A:  MOVWF  x89
*
2F5A:  MOVF   x87,W
2F5C:  MULWF  x8A
2F5E:  MOVF   FF3,W
2F60:  ADDWF  x88,W
2F62:  MOVWF  x89
*
2F8C:  MOVF   x87,W
2F8E:  MULWF  x8A
2F90:  MOVF   FF3,W
2F92:  ADDWF  x88,W
2F94:  MOVWF  x89
*
31AC:  MOVF   x87,W
31AE:  MULWF  x8A
31B0:  MOVF   FF3,W
31B2:  ADDWF  x88,W
31B4:  MOVWF  x89
*
31DE:  MOVF   x87,W
31E0:  MULWF  x8A
31E2:  MOVF   FF3,W
31E4:  ADDWF  x88,W
31E6:  MOVWF  x89
*
3434:  MOVF   x87,W
3436:  MULWF  x8A
3438:  MOVF   FF3,W
343A:  ADDWF  x88,W
343C:  MOVWF  x89
*
3466:  MOVF   x87,W
3468:  MULWF  x8A
346A:  MOVF   FF3,W
346C:  ADDWF  x88,W
346E:  MOVWF  x89
*
3686:  MOVF   x87,W
3688:  MULWF  x8A
368A:  MOVF   FF3,W
368C:  ADDWF  x88,W
368E:  MOVWF  x89
*
36B8:  MOVF   x87,W
36BA:  MULWF  x8A
36BC:  MOVF   FF3,W
36BE:  ADDWF  x88,W
36C0:  MOVWF  x89
....................    return (r); 
*
0C48:  MOVFF  89,01
*
0C7A:  MOVFF  89,01
*
0E2C:  MOVFF  89,01
*
0F04:  MOVFF  89,01
*
105C:  MOVFF  89,01
*
1718:  MOVFF  89,01
*
174A:  MOVFF  89,01
*
196A:  MOVFF  89,01
*
199C:  MOVFF  89,01
*
1BF4:  MOVFF  89,01
*
1C26:  MOVFF  89,01
*
1E46:  MOVFF  89,01
*
1E78:  MOVFF  89,01
*
20D0:  MOVFF  89,01
*
2102:  MOVFF  89,01
*
2322:  MOVFF  89,01
*
2354:  MOVFF  89,01
*
25AC:  MOVFF  89,01
*
25DE:  MOVFF  89,01
*
27FE:  MOVFF  89,01
*
2830:  MOVFF  89,01
*
2A88:  MOVFF  89,01
*
2ABA:  MOVFF  89,01
*
2CDA:  MOVFF  89,01
*
2D0C:  MOVFF  89,01
*
2F64:  MOVFF  89,01
*
2F96:  MOVFF  89,01
*
31B6:  MOVFF  89,01
*
31E8:  MOVFF  89,01
*
343E:  MOVFF  89,01
*
3470:  MOVFF  89,01
*
3690:  MOVFF  89,01
*
36C2:  MOVFF  89,01
.................... } 
....................  
.................... void showHour(BYTE hr, BYTE min, BYTE sec) 
.................... { 
....................    printf(lcd_putc, "%02d:%02d:%02d",hr,min,sec); 
*
0590:  MOVFF  2B,87
0594:  MOVLW  01
0596:  MOVWF  x88
0598:  RCALL  04C8
059A:  MOVLW  3A
059C:  MOVWF  x8D
059E:  RCALL  0476
05A0:  MOVFF  2C,87
05A4:  MOVLW  01
05A6:  MOVWF  x88
05A8:  RCALL  04C8
05AA:  MOVLW  3A
05AC:  MOVWF  x8D
05AE:  RCALL  0476
05B0:  MOVFF  2D,87
05B4:  MOVLW  01
05B6:  MOVWF  x88
05B8:  RCALL  04C8
.................... } 
05BA:  GOTO   133E (RETURN)
....................  
.................... void showDate (BYTE day, BYTE month, BYTE year, BYTE dow) 
.................... { 
....................    switch (dow) 
....................    { 
*
05DC:  MOVLW  01
05DE:  SUBWF  2E,W
05E0:  ADDLW  F9
05E2:  BTFSC  FD8.0
05E4:  BRA    0782
05E6:  ADDLW  07
05E8:  GOTO   0786
....................       case 1: 
....................          printf(lcd_putc, "%02d/%02d/%02d DOM",day,month,year); 
05EC:  MOVFF  2B,87
05F0:  MOVLW  01
05F2:  MOVWF  x88
05F4:  RCALL  04C8
05F6:  MOVLW  2F
05F8:  MOVWF  x8D
05FA:  RCALL  0476
05FC:  MOVFF  2C,87
0600:  MOVLW  01
0602:  MOVWF  x88
0604:  RCALL  04C8
0606:  MOVLW  2F
0608:  MOVWF  x8D
060A:  RCALL  0476
060C:  MOVFF  2D,87
0610:  MOVLW  01
0612:  MOVWF  x88
0614:  RCALL  04C8
0616:  MOVLW  66
0618:  MOVWF  FF6
061A:  MOVLW  00
061C:  MOVWF  FF7
061E:  MOVLW  04
0620:  MOVWF  x87
0622:  RCALL  05BE
....................          break; 
0624:  BRA    0782
....................       case 2: 
....................          printf(lcd_putc, "%02d/%02d/%02d LUN",day,month,year); 
0626:  MOVFF  2B,87
062A:  MOVLW  01
062C:  MOVWF  x88
062E:  RCALL  04C8
0630:  MOVLW  2F
0632:  MOVWF  x8D
0634:  RCALL  0476
0636:  MOVFF  2C,87
063A:  MOVLW  01
063C:  MOVWF  x88
063E:  RCALL  04C8
0640:  MOVLW  2F
0642:  MOVWF  x8D
0644:  RCALL  0476
0646:  MOVFF  2D,87
064A:  MOVLW  01
064C:  MOVWF  x88
064E:  RCALL  04C8
0650:  MOVLW  7A
0652:  MOVWF  FF6
0654:  MOVLW  00
0656:  MOVWF  FF7
0658:  MOVLW  04
065A:  MOVWF  x87
065C:  RCALL  05BE
....................          break; 
065E:  BRA    0782
....................       case 3: 
....................          printf(lcd_putc, "%02d/%02d/%02d MAR",day,month,year); 
0660:  MOVFF  2B,87
0664:  MOVLW  01
0666:  MOVWF  x88
0668:  RCALL  04C8
066A:  MOVLW  2F
066C:  MOVWF  x8D
066E:  RCALL  0476
0670:  MOVFF  2C,87
0674:  MOVLW  01
0676:  MOVWF  x88
0678:  RCALL  04C8
067A:  MOVLW  2F
067C:  MOVWF  x8D
067E:  RCALL  0476
0680:  MOVFF  2D,87
0684:  MOVLW  01
0686:  MOVWF  x88
0688:  RCALL  04C8
068A:  MOVLW  8E
068C:  MOVWF  FF6
068E:  MOVLW  00
0690:  MOVWF  FF7
0692:  MOVLW  04
0694:  MOVWF  x87
0696:  RCALL  05BE
....................          break; 
0698:  BRA    0782
....................       case 4: 
....................          printf(lcd_putc, "%02d/%02d/%02d MIE",day,month,year); 
069A:  MOVFF  2B,87
069E:  MOVLW  01
06A0:  MOVWF  x88
06A2:  RCALL  04C8
06A4:  MOVLW  2F
06A6:  MOVWF  x8D
06A8:  RCALL  0476
06AA:  MOVFF  2C,87
06AE:  MOVLW  01
06B0:  MOVWF  x88
06B2:  RCALL  04C8
06B4:  MOVLW  2F
06B6:  MOVWF  x8D
06B8:  RCALL  0476
06BA:  MOVFF  2D,87
06BE:  MOVLW  01
06C0:  MOVWF  x88
06C2:  RCALL  04C8
06C4:  MOVLW  A2
06C6:  MOVWF  FF6
06C8:  MOVLW  00
06CA:  MOVWF  FF7
06CC:  MOVLW  04
06CE:  MOVWF  x87
06D0:  RCALL  05BE
....................          break; 
06D2:  BRA    0782
....................       case 5: 
....................          printf(lcd_putc, "%02d/%02d/%02d JUE",day,month,year); 
06D4:  MOVFF  2B,87
06D8:  MOVLW  01
06DA:  MOVWF  x88
06DC:  RCALL  04C8
06DE:  MOVLW  2F
06E0:  MOVWF  x8D
06E2:  RCALL  0476
06E4:  MOVFF  2C,87
06E8:  MOVLW  01
06EA:  MOVWF  x88
06EC:  RCALL  04C8
06EE:  MOVLW  2F
06F0:  MOVWF  x8D
06F2:  RCALL  0476
06F4:  MOVFF  2D,87
06F8:  MOVLW  01
06FA:  MOVWF  x88
06FC:  RCALL  04C8
06FE:  MOVLW  B6
0700:  MOVWF  FF6
0702:  MOVLW  00
0704:  MOVWF  FF7
0706:  MOVLW  04
0708:  MOVWF  x87
070A:  RCALL  05BE
....................          break; 
070C:  BRA    0782
....................       case 6: 
....................          printf(lcd_putc, "%02d/%02d/%02d VIE",day,month,year); 
070E:  MOVFF  2B,87
0712:  MOVLW  01
0714:  MOVWF  x88
0716:  RCALL  04C8
0718:  MOVLW  2F
071A:  MOVWF  x8D
071C:  RCALL  0476
071E:  MOVFF  2C,87
0722:  MOVLW  01
0724:  MOVWF  x88
0726:  RCALL  04C8
0728:  MOVLW  2F
072A:  MOVWF  x8D
072C:  RCALL  0476
072E:  MOVFF  2D,87
0732:  MOVLW  01
0734:  MOVWF  x88
0736:  RCALL  04C8
0738:  MOVLW  CA
073A:  MOVWF  FF6
073C:  MOVLW  00
073E:  MOVWF  FF7
0740:  MOVLW  04
0742:  MOVWF  x87
0744:  RCALL  05BE
....................          break; 
0746:  BRA    0782
....................       case 7: 
....................          printf(lcd_putc, "%02d/%02d/%02d SAB",day,month,year); 
0748:  MOVFF  2B,87
074C:  MOVLW  01
074E:  MOVWF  x88
0750:  RCALL  04C8
0752:  MOVLW  2F
0754:  MOVWF  x8D
0756:  RCALL  0476
0758:  MOVFF  2C,87
075C:  MOVLW  01
075E:  MOVWF  x88
0760:  RCALL  04C8
0762:  MOVLW  2F
0764:  MOVWF  x8D
0766:  RCALL  0476
0768:  MOVFF  2D,87
076C:  MOVLW  01
076E:  MOVWF  x88
0770:  RCALL  04C8
0772:  MOVLW  DE
0774:  MOVWF  FF6
0776:  MOVLW  00
0778:  MOVWF  FF7
077A:  MOVLW  04
077C:  MOVWF  x87
077E:  RCALL  05BE
....................          break; 
0780:  BRA    0782
....................    } 
.................... } 
0782:  GOTO   135E (RETURN)
....................  
.................... void getHour(char message[],BYTE& hr, BYTE& min) 
.................... { 
*
0A80:  CLRF   x84
*
150E:  CLRF   x84
*
1760:  CLRF   x84
*
19EA:  CLRF   x84
*
1C3C:  CLRF   x84
*
1EC6:  CLRF   x84
*
2118:  CLRF   x84
*
23A2:  CLRF   x84
*
25F4:  CLRF   x84
*
287E:  CLRF   x84
*
2AD0:  CLRF   x84
*
2D5A:  CLRF   x84
*
2FAC:  CLRF   x84
*
3234:  CLRF   x84
*
3486:  CLRF   x84
....................    char h[2]; 
....................    char m[2];  
....................    char con = '\0'; 
....................    clean(2); 
*
0A82:  MOVLW  02
0A84:  MOVWF  x87
0A86:  RCALL  08C4
*
1510:  MOVLW  02
1512:  MOVWF  x87
1514:  CALL   08C4
*
1762:  MOVLW  02
1764:  MOVWF  x87
1766:  CALL   08C4
*
19EC:  MOVLW  02
19EE:  MOVWF  x87
19F0:  CALL   08C4
*
1C3E:  MOVLW  02
1C40:  MOVWF  x87
1C42:  CALL   08C4
*
1EC8:  MOVLW  02
1ECA:  MOVWF  x87
1ECC:  CALL   08C4
*
211A:  MOVLW  02
211C:  MOVWF  x87
211E:  CALL   08C4
*
23A4:  MOVLW  02
23A6:  MOVWF  x87
23A8:  CALL   08C4
*
25F6:  MOVLW  02
25F8:  MOVWF  x87
25FA:  CALL   08C4
*
2880:  MOVLW  02
2882:  MOVWF  x87
2884:  CALL   08C4
*
2AD2:  MOVLW  02
2AD4:  MOVWF  x87
2AD6:  CALL   08C4
*
2D5C:  MOVLW  02
2D5E:  MOVWF  x87
2D60:  CALL   08C4
*
2FAE:  MOVLW  02
2FB0:  MOVWF  x87
2FB2:  CALL   08C4
*
3236:  MOVLW  02
3238:  MOVWF  x87
323A:  CALL   08C4
*
3488:  MOVLW  02
348A:  MOVWF  x87
348C:  CALL   08C4
....................    printf (lcd_putc,"\a%s",message); 
*
0A88:  MOVLW  07
0A8A:  MOVWF  x8D
0A8C:  RCALL  0476
0A8E:  MOVFF  7F,FEA
0A92:  MOVFF  7E,FE9
0A96:  RCALL  08FE
*
1518:  MOVLW  07
151A:  MOVWF  x8D
151C:  CALL   0476
1520:  MOVFF  7F,FEA
1524:  MOVFF  7E,FE9
1528:  CALL   08FE
*
176A:  MOVLW  07
176C:  MOVWF  x8D
176E:  CALL   0476
1772:  MOVFF  7F,FEA
1776:  MOVFF  7E,FE9
177A:  CALL   08FE
*
19F4:  MOVLW  07
19F6:  MOVWF  x8D
19F8:  CALL   0476
19FC:  MOVFF  7F,FEA
1A00:  MOVFF  7E,FE9
1A04:  CALL   08FE
*
1C46:  MOVLW  07
1C48:  MOVWF  x8D
1C4A:  CALL   0476
1C4E:  MOVFF  7F,FEA
1C52:  MOVFF  7E,FE9
1C56:  CALL   08FE
*
1ED0:  MOVLW  07
1ED2:  MOVWF  x8D
1ED4:  CALL   0476
1ED8:  MOVFF  7F,FEA
1EDC:  MOVFF  7E,FE9
1EE0:  CALL   08FE
*
2122:  MOVLW  07
2124:  MOVWF  x8D
2126:  CALL   0476
212A:  MOVFF  7F,FEA
212E:  MOVFF  7E,FE9
2132:  CALL   08FE
*
23AC:  MOVLW  07
23AE:  MOVWF  x8D
23B0:  CALL   0476
23B4:  MOVFF  7F,FEA
23B8:  MOVFF  7E,FE9
23BC:  CALL   08FE
*
25FE:  MOVLW  07
2600:  MOVWF  x8D
2602:  CALL   0476
2606:  MOVFF  7F,FEA
260A:  MOVFF  7E,FE9
260E:  CALL   08FE
*
2888:  MOVLW  07
288A:  MOVWF  x8D
288C:  CALL   0476
2890:  MOVFF  7F,FEA
2894:  MOVFF  7E,FE9
2898:  CALL   08FE
*
2ADA:  MOVLW  07
2ADC:  MOVWF  x8D
2ADE:  CALL   0476
2AE2:  MOVFF  7F,FEA
2AE6:  MOVFF  7E,FE9
2AEA:  CALL   08FE
*
2D64:  MOVLW  07
2D66:  MOVWF  x8D
2D68:  CALL   0476
2D6C:  MOVFF  7F,FEA
2D70:  MOVFF  7E,FE9
2D74:  CALL   08FE
*
2FB6:  MOVLW  07
2FB8:  MOVWF  x8D
2FBA:  CALL   0476
2FBE:  MOVFF  7F,FEA
2FC2:  MOVFF  7E,FE9
2FC6:  CALL   08FE
*
323E:  MOVLW  07
3240:  MOVWF  x8D
3242:  CALL   0476
3246:  MOVFF  7F,FEA
324A:  MOVFF  7E,FE9
324E:  CALL   08FE
*
3490:  MOVLW  07
3492:  MOVWF  x8D
3494:  CALL   0476
3498:  MOVFF  7F,FEA
349C:  MOVFF  7E,FE9
34A0:  CALL   08FE
....................    lcd_gotoxy (5,2); 
*
0A98:  MOVLW  05
0A9A:  MOVWF  x8E
0A9C:  MOVLW  02
0A9E:  MOVWF  x8F
0AA0:  RCALL  042C
*
152C:  MOVLW  05
152E:  MOVWF  x8E
1530:  MOVLW  02
1532:  MOVWF  x8F
1534:  CALL   042C
*
177E:  MOVLW  05
1780:  MOVWF  x8E
1782:  MOVLW  02
1784:  MOVWF  x8F
1786:  CALL   042C
*
1A08:  MOVLW  05
1A0A:  MOVWF  x8E
1A0C:  MOVLW  02
1A0E:  MOVWF  x8F
1A10:  CALL   042C
*
1C5A:  MOVLW  05
1C5C:  MOVWF  x8E
1C5E:  MOVLW  02
1C60:  MOVWF  x8F
1C62:  CALL   042C
*
1EE4:  MOVLW  05
1EE6:  MOVWF  x8E
1EE8:  MOVLW  02
1EEA:  MOVWF  x8F
1EEC:  CALL   042C
*
2136:  MOVLW  05
2138:  MOVWF  x8E
213A:  MOVLW  02
213C:  MOVWF  x8F
213E:  CALL   042C
*
23C0:  MOVLW  05
23C2:  MOVWF  x8E
23C4:  MOVLW  02
23C6:  MOVWF  x8F
23C8:  CALL   042C
*
2612:  MOVLW  05
2614:  MOVWF  x8E
2616:  MOVLW  02
2618:  MOVWF  x8F
261A:  CALL   042C
*
289C:  MOVLW  05
289E:  MOVWF  x8E
28A0:  MOVLW  02
28A2:  MOVWF  x8F
28A4:  CALL   042C
*
2AEE:  MOVLW  05
2AF0:  MOVWF  x8E
2AF2:  MOVLW  02
2AF4:  MOVWF  x8F
2AF6:  CALL   042C
*
2D78:  MOVLW  05
2D7A:  MOVWF  x8E
2D7C:  MOVLW  02
2D7E:  MOVWF  x8F
2D80:  CALL   042C
*
2FCA:  MOVLW  05
2FCC:  MOVWF  x8E
2FCE:  MOVLW  02
2FD0:  MOVWF  x8F
2FD2:  CALL   042C
*
3252:  MOVLW  05
3254:  MOVWF  x8E
3256:  MOVLW  02
3258:  MOVWF  x8F
325A:  CALL   042C
*
34A4:  MOVLW  05
34A6:  MOVWF  x8E
34A8:  MOVLW  02
34AA:  MOVWF  x8F
34AC:  CALL   042C
....................    if(hr==0 && min == 0)printf (lcd_putc,"HH:MM"); 
*
0AA2:  MOVF   49,F
0AA4:  BNZ   0AB6
0AA6:  MOVF   4A,F
0AA8:  BNZ   0AB6
0AAA:  MOVLW  E4
0AAC:  MOVWF  FF6
0AAE:  MOVLW  00
0AB0:  MOVWF  FF7
0AB2:  RCALL  08A4
*
1538:  MOVF   08,F
153A:  BNZ   154E
153C:  MOVF   09,F
153E:  BNZ   154E
1540:  MOVLW  E4
1542:  MOVWF  FF6
1544:  MOVLW  00
1546:  MOVWF  FF7
1548:  CALL   08A4
*
178A:  MOVF   0A,F
178C:  BNZ   17A0
178E:  MOVF   0B,F
1790:  BNZ   17A0
1792:  MOVLW  E4
1794:  MOVWF  FF6
1796:  MOVLW  00
1798:  MOVWF  FF7
179A:  CALL   08A4
*
1A14:  MOVF   0C,F
1A16:  BNZ   1A2A
1A18:  MOVF   0D,F
1A1A:  BNZ   1A2A
1A1C:  MOVLW  E4
1A1E:  MOVWF  FF6
1A20:  MOVLW  00
1A22:  MOVWF  FF7
1A24:  CALL   08A4
*
1C66:  MOVF   0E,F
1C68:  BNZ   1C7C
1C6A:  MOVF   0F,F
1C6C:  BNZ   1C7C
1C6E:  MOVLW  E4
1C70:  MOVWF  FF6
1C72:  MOVLW  00
1C74:  MOVWF  FF7
1C76:  CALL   08A4
*
1EF0:  MOVF   10,F
1EF2:  BNZ   1F06
1EF4:  MOVF   11,F
1EF6:  BNZ   1F06
1EF8:  MOVLW  E4
1EFA:  MOVWF  FF6
1EFC:  MOVLW  00
1EFE:  MOVWF  FF7
1F00:  CALL   08A4
*
2142:  MOVF   12,F
2144:  BNZ   2158
2146:  MOVF   13,F
2148:  BNZ   2158
214A:  MOVLW  E4
214C:  MOVWF  FF6
214E:  MOVLW  00
2150:  MOVWF  FF7
2152:  CALL   08A4
*
23CC:  MOVF   14,F
23CE:  BNZ   23E2
23D0:  MOVF   15,F
23D2:  BNZ   23E2
23D4:  MOVLW  E4
23D6:  MOVWF  FF6
23D8:  MOVLW  00
23DA:  MOVWF  FF7
23DC:  CALL   08A4
*
261E:  MOVF   16,F
2620:  BNZ   2634
2622:  MOVF   17,F
2624:  BNZ   2634
2626:  MOVLW  E4
2628:  MOVWF  FF6
262A:  MOVLW  00
262C:  MOVWF  FF7
262E:  CALL   08A4
*
28A8:  MOVF   18,F
28AA:  BNZ   28BE
28AC:  MOVF   19,F
28AE:  BNZ   28BE
28B0:  MOVLW  E4
28B2:  MOVWF  FF6
28B4:  MOVLW  00
28B6:  MOVWF  FF7
28B8:  CALL   08A4
*
2AFA:  MOVF   1A,F
2AFC:  BNZ   2B10
2AFE:  MOVF   1B,F
2B00:  BNZ   2B10
2B02:  MOVLW  E4
2B04:  MOVWF  FF6
2B06:  MOVLW  00
2B08:  MOVWF  FF7
2B0A:  CALL   08A4
*
2D84:  MOVF   1C,F
2D86:  BNZ   2D9A
2D88:  MOVF   1D,F
2D8A:  BNZ   2D9A
2D8C:  MOVLW  E4
2D8E:  MOVWF  FF6
2D90:  MOVLW  00
2D92:  MOVWF  FF7
2D94:  CALL   08A4
*
2FD6:  MOVF   1E,F
2FD8:  BNZ   2FEC
2FDA:  MOVF   1F,F
2FDC:  BNZ   2FEC
2FDE:  MOVLW  E4
2FE0:  MOVWF  FF6
2FE2:  MOVLW  00
2FE4:  MOVWF  FF7
2FE6:  CALL   08A4
*
325E:  MOVF   20,F
3260:  BNZ   3274
3262:  MOVF   21,F
3264:  BNZ   3274
3266:  MOVLW  E4
3268:  MOVWF  FF6
326A:  MOVLW  00
326C:  MOVWF  FF7
326E:  CALL   08A4
*
34B0:  MOVF   22,F
34B2:  BNZ   34C6
34B4:  MOVF   23,F
34B6:  BNZ   34C6
34B8:  MOVLW  E4
34BA:  MOVWF  FF6
34BC:  MOVLW  00
34BE:  MOVWF  FF7
34C0:  CALL   08A4
....................    else printf (lcd_putc,"%02d:%02d",hr,min); 
*
0AB4:  BRA    0AD0
0AB6:  MOVFF  49,87
0ABA:  MOVLW  01
0ABC:  MOVWF  x88
0ABE:  RCALL  04C8
0AC0:  MOVLW  3A
0AC2:  MOVWF  x8D
0AC4:  RCALL  0476
0AC6:  MOVFF  4A,87
0ACA:  MOVLW  01
0ACC:  MOVWF  x88
0ACE:  RCALL  04C8
*
154C:  BRA    156E
154E:  MOVFF  08,87
1552:  MOVLW  01
1554:  MOVWF  x88
1556:  CALL   04C8
155A:  MOVLW  3A
155C:  MOVWF  x8D
155E:  CALL   0476
1562:  MOVFF  09,87
1566:  MOVLW  01
1568:  MOVWF  x88
156A:  CALL   04C8
*
179E:  BRA    17C0
17A0:  MOVFF  0A,87
17A4:  MOVLW  01
17A6:  MOVWF  x88
17A8:  CALL   04C8
17AC:  MOVLW  3A
17AE:  MOVWF  x8D
17B0:  CALL   0476
17B4:  MOVFF  0B,87
17B8:  MOVLW  01
17BA:  MOVWF  x88
17BC:  CALL   04C8
*
1A28:  BRA    1A4A
1A2A:  MOVFF  0C,87
1A2E:  MOVLW  01
1A30:  MOVWF  x88
1A32:  CALL   04C8
1A36:  MOVLW  3A
1A38:  MOVWF  x8D
1A3A:  CALL   0476
1A3E:  MOVFF  0D,87
1A42:  MOVLW  01
1A44:  MOVWF  x88
1A46:  CALL   04C8
*
1C7A:  BRA    1C9C
1C7C:  MOVFF  0E,87
1C80:  MOVLW  01
1C82:  MOVWF  x88
1C84:  CALL   04C8
1C88:  MOVLW  3A
1C8A:  MOVWF  x8D
1C8C:  CALL   0476
1C90:  MOVFF  0F,87
1C94:  MOVLW  01
1C96:  MOVWF  x88
1C98:  CALL   04C8
*
1F04:  BRA    1F26
1F06:  MOVFF  10,87
1F0A:  MOVLW  01
1F0C:  MOVWF  x88
1F0E:  CALL   04C8
1F12:  MOVLW  3A
1F14:  MOVWF  x8D
1F16:  CALL   0476
1F1A:  MOVFF  11,87
1F1E:  MOVLW  01
1F20:  MOVWF  x88
1F22:  CALL   04C8
*
2156:  BRA    2178
2158:  MOVFF  12,87
215C:  MOVLW  01
215E:  MOVWF  x88
2160:  CALL   04C8
2164:  MOVLW  3A
2166:  MOVWF  x8D
2168:  CALL   0476
216C:  MOVFF  13,87
2170:  MOVLW  01
2172:  MOVWF  x88
2174:  CALL   04C8
*
23E0:  BRA    2402
23E2:  MOVFF  14,87
23E6:  MOVLW  01
23E8:  MOVWF  x88
23EA:  CALL   04C8
23EE:  MOVLW  3A
23F0:  MOVWF  x8D
23F2:  CALL   0476
23F6:  MOVFF  15,87
23FA:  MOVLW  01
23FC:  MOVWF  x88
23FE:  CALL   04C8
*
2632:  BRA    2654
2634:  MOVFF  16,87
2638:  MOVLW  01
263A:  MOVWF  x88
263C:  CALL   04C8
2640:  MOVLW  3A
2642:  MOVWF  x8D
2644:  CALL   0476
2648:  MOVFF  17,87
264C:  MOVLW  01
264E:  MOVWF  x88
2650:  CALL   04C8
*
28BC:  BRA    28DE
28BE:  MOVFF  18,87
28C2:  MOVLW  01
28C4:  MOVWF  x88
28C6:  CALL   04C8
28CA:  MOVLW  3A
28CC:  MOVWF  x8D
28CE:  CALL   0476
28D2:  MOVFF  19,87
28D6:  MOVLW  01
28D8:  MOVWF  x88
28DA:  CALL   04C8
*
2B0E:  BRA    2B30
2B10:  MOVFF  1A,87
2B14:  MOVLW  01
2B16:  MOVWF  x88
2B18:  CALL   04C8
2B1C:  MOVLW  3A
2B1E:  MOVWF  x8D
2B20:  CALL   0476
2B24:  MOVFF  1B,87
2B28:  MOVLW  01
2B2A:  MOVWF  x88
2B2C:  CALL   04C8
*
2D98:  BRA    2DBA
2D9A:  MOVFF  1C,87
2D9E:  MOVLW  01
2DA0:  MOVWF  x88
2DA2:  CALL   04C8
2DA6:  MOVLW  3A
2DA8:  MOVWF  x8D
2DAA:  CALL   0476
2DAE:  MOVFF  1D,87
2DB2:  MOVLW  01
2DB4:  MOVWF  x88
2DB6:  CALL   04C8
*
2FEA:  BRA    300C
2FEC:  MOVFF  1E,87
2FF0:  MOVLW  01
2FF2:  MOVWF  x88
2FF4:  CALL   04C8
2FF8:  MOVLW  3A
2FFA:  MOVWF  x8D
2FFC:  CALL   0476
3000:  MOVFF  1F,87
3004:  MOVLW  01
3006:  MOVWF  x88
3008:  CALL   04C8
*
3272:  BRA    3294
3274:  MOVFF  20,87
3278:  MOVLW  01
327A:  MOVWF  x88
327C:  CALL   04C8
3280:  MOVLW  3A
3282:  MOVWF  x8D
3284:  CALL   0476
3288:  MOVFF  21,87
328C:  MOVLW  01
328E:  MOVWF  x88
3290:  CALL   04C8
*
34C4:  BRA    34E6
34C6:  MOVFF  22,87
34CA:  MOVLW  01
34CC:  MOVWF  x88
34CE:  CALL   04C8
34D2:  MOVLW  3A
34D4:  MOVWF  x8D
34D6:  CALL   0476
34DA:  MOVFF  23,87
34DE:  MOVLW  01
34E0:  MOVWF  x88
34E2:  CALL   04C8
....................    do 
....................    { 
....................       con = kbd_getc(); 
*
0AD0:  RCALL  07E8
0AD2:  MOVFF  01,84
*
156E:  CALL   07E8
1572:  MOVFF  01,84
*
17C0:  CALL   07E8
17C4:  MOVFF  01,84
*
1A4A:  CALL   07E8
1A4E:  MOVFF  01,84
*
1C9C:  CALL   07E8
1CA0:  MOVFF  01,84
*
1F26:  CALL   07E8
1F2A:  MOVFF  01,84
*
2178:  CALL   07E8
217C:  MOVFF  01,84
*
2402:  CALL   07E8
2406:  MOVFF  01,84
*
2654:  CALL   07E8
2658:  MOVFF  01,84
*
28DE:  CALL   07E8
28E2:  MOVFF  01,84
*
2B30:  CALL   07E8
2B34:  MOVFF  01,84
*
2DBA:  CALL   07E8
2DBE:  MOVFF  01,84
*
300C:  CALL   07E8
3010:  MOVFF  01,84
*
3294:  CALL   07E8
3298:  MOVFF  01,84
*
34E6:  CALL   07E8
34EA:  MOVFF  01,84
....................       ((con >= '0') && (con <= '2'))? (h[0]=con) :(con='\0');  
*
0AD6:  MOVF   x84,W
0AD8:  SUBLW  2F
0ADA:  BC    0AEA
0ADC:  MOVF   x84,W
0ADE:  SUBLW  32
0AE0:  BNC   0AEA
0AE2:  MOVFF  84,80
0AE6:  MOVF   x80,W
0AE8:  BRA    0AEC
0AEA:  CLRF   x84
*
1576:  MOVF   x84,W
1578:  SUBLW  2F
157A:  BC    158A
157C:  MOVF   x84,W
157E:  SUBLW  32
1580:  BNC   158A
1582:  MOVFF  84,80
1586:  MOVF   x80,W
1588:  BRA    158C
158A:  CLRF   x84
*
17C8:  MOVF   x84,W
17CA:  SUBLW  2F
17CC:  BC    17DC
17CE:  MOVF   x84,W
17D0:  SUBLW  32
17D2:  BNC   17DC
17D4:  MOVFF  84,80
17D8:  MOVF   x80,W
17DA:  BRA    17DE
17DC:  CLRF   x84
*
1A52:  MOVF   x84,W
1A54:  SUBLW  2F
1A56:  BC    1A66
1A58:  MOVF   x84,W
1A5A:  SUBLW  32
1A5C:  BNC   1A66
1A5E:  MOVFF  84,80
1A62:  MOVF   x80,W
1A64:  BRA    1A68
1A66:  CLRF   x84
*
1CA4:  MOVF   x84,W
1CA6:  SUBLW  2F
1CA8:  BC    1CB8
1CAA:  MOVF   x84,W
1CAC:  SUBLW  32
1CAE:  BNC   1CB8
1CB0:  MOVFF  84,80
1CB4:  MOVF   x80,W
1CB6:  BRA    1CBA
1CB8:  CLRF   x84
*
1F2E:  MOVF   x84,W
1F30:  SUBLW  2F
1F32:  BC    1F42
1F34:  MOVF   x84,W
1F36:  SUBLW  32
1F38:  BNC   1F42
1F3A:  MOVFF  84,80
1F3E:  MOVF   x80,W
1F40:  BRA    1F44
1F42:  CLRF   x84
*
2180:  MOVF   x84,W
2182:  SUBLW  2F
2184:  BC    2194
2186:  MOVF   x84,W
2188:  SUBLW  32
218A:  BNC   2194
218C:  MOVFF  84,80
2190:  MOVF   x80,W
2192:  BRA    2196
2194:  CLRF   x84
*
240A:  MOVF   x84,W
240C:  SUBLW  2F
240E:  BC    241E
2410:  MOVF   x84,W
2412:  SUBLW  32
2414:  BNC   241E
2416:  MOVFF  84,80
241A:  MOVF   x80,W
241C:  BRA    2420
241E:  CLRF   x84
*
265C:  MOVF   x84,W
265E:  SUBLW  2F
2660:  BC    2670
2662:  MOVF   x84,W
2664:  SUBLW  32
2666:  BNC   2670
2668:  MOVFF  84,80
266C:  MOVF   x80,W
266E:  BRA    2672
2670:  CLRF   x84
*
28E6:  MOVF   x84,W
28E8:  SUBLW  2F
28EA:  BC    28FA
28EC:  MOVF   x84,W
28EE:  SUBLW  32
28F0:  BNC   28FA
28F2:  MOVFF  84,80
28F6:  MOVF   x80,W
28F8:  BRA    28FC
28FA:  CLRF   x84
*
2B38:  MOVF   x84,W
2B3A:  SUBLW  2F
2B3C:  BC    2B4C
2B3E:  MOVF   x84,W
2B40:  SUBLW  32
2B42:  BNC   2B4C
2B44:  MOVFF  84,80
2B48:  MOVF   x80,W
2B4A:  BRA    2B4E
2B4C:  CLRF   x84
*
2DC2:  MOVF   x84,W
2DC4:  SUBLW  2F
2DC6:  BC    2DD6
2DC8:  MOVF   x84,W
2DCA:  SUBLW  32
2DCC:  BNC   2DD6
2DCE:  MOVFF  84,80
2DD2:  MOVF   x80,W
2DD4:  BRA    2DD8
2DD6:  CLRF   x84
*
3014:  MOVF   x84,W
3016:  SUBLW  2F
3018:  BC    3028
301A:  MOVF   x84,W
301C:  SUBLW  32
301E:  BNC   3028
3020:  MOVFF  84,80
3024:  MOVF   x80,W
3026:  BRA    302A
3028:  CLRF   x84
*
329C:  MOVF   x84,W
329E:  SUBLW  2F
32A0:  BC    32B0
32A2:  MOVF   x84,W
32A4:  SUBLW  32
32A6:  BNC   32B0
32A8:  MOVFF  84,80
32AC:  MOVF   x80,W
32AE:  BRA    32B2
32B0:  CLRF   x84
*
34EE:  MOVF   x84,W
34F0:  SUBLW  2F
34F2:  BC    3502
34F4:  MOVF   x84,W
34F6:  SUBLW  32
34F8:  BNC   3502
34FA:  MOVFF  84,80
34FE:  MOVF   x80,W
3500:  BRA    3504
3502:  CLRF   x84
....................    }while(con == '\0'); 
*
0AEC:  MOVF   x84,F
0AEE:  BZ    0AD0
*
158C:  MOVF   x84,F
158E:  BZ    156E
*
17DE:  MOVF   x84,F
17E0:  BZ    17C0
*
1A68:  MOVF   x84,F
1A6A:  BZ    1A4A
*
1CBA:  MOVF   x84,F
1CBC:  BZ    1C9C
*
1F44:  MOVF   x84,F
1F46:  BZ    1F26
*
2196:  MOVF   x84,F
2198:  BZ    2178
*
2420:  MOVF   x84,F
2422:  BZ    2402
*
2672:  MOVF   x84,F
2674:  BZ    2654
*
28FC:  MOVF   x84,F
28FE:  BZ    28DE
*
2B4E:  MOVF   x84,F
2B50:  BZ    2B30
*
2DD8:  MOVF   x84,F
2DDA:  BZ    2DBA
*
302A:  MOVF   x84,F
302C:  BZ    300C
*
32B2:  MOVF   x84,F
32B4:  BZ    3294
*
3504:  MOVF   x84,F
3506:  BZ    34E6
....................    lcd_gotoxy (5,2); 
*
0AF0:  MOVLW  05
0AF2:  MOVWF  x8E
0AF4:  MOVLW  02
0AF6:  MOVWF  x8F
0AF8:  RCALL  042C
*
1590:  MOVLW  05
1592:  MOVWF  x8E
1594:  MOVLW  02
1596:  MOVWF  x8F
1598:  CALL   042C
*
17E2:  MOVLW  05
17E4:  MOVWF  x8E
17E6:  MOVLW  02
17E8:  MOVWF  x8F
17EA:  CALL   042C
*
1A6C:  MOVLW  05
1A6E:  MOVWF  x8E
1A70:  MOVLW  02
1A72:  MOVWF  x8F
1A74:  CALL   042C
*
1CBE:  MOVLW  05
1CC0:  MOVWF  x8E
1CC2:  MOVLW  02
1CC4:  MOVWF  x8F
1CC6:  CALL   042C
*
1F48:  MOVLW  05
1F4A:  MOVWF  x8E
1F4C:  MOVLW  02
1F4E:  MOVWF  x8F
1F50:  CALL   042C
*
219A:  MOVLW  05
219C:  MOVWF  x8E
219E:  MOVLW  02
21A0:  MOVWF  x8F
21A2:  CALL   042C
*
2424:  MOVLW  05
2426:  MOVWF  x8E
2428:  MOVLW  02
242A:  MOVWF  x8F
242C:  CALL   042C
*
2676:  MOVLW  05
2678:  MOVWF  x8E
267A:  MOVLW  02
267C:  MOVWF  x8F
267E:  CALL   042C
*
2900:  MOVLW  05
2902:  MOVWF  x8E
2904:  MOVLW  02
2906:  MOVWF  x8F
2908:  CALL   042C
*
2B52:  MOVLW  05
2B54:  MOVWF  x8E
2B56:  MOVLW  02
2B58:  MOVWF  x8F
2B5A:  CALL   042C
*
2DDC:  MOVLW  05
2DDE:  MOVWF  x8E
2DE0:  MOVLW  02
2DE2:  MOVWF  x8F
2DE4:  CALL   042C
*
302E:  MOVLW  05
3030:  MOVWF  x8E
3032:  MOVLW  02
3034:  MOVWF  x8F
3036:  CALL   042C
*
32B6:  MOVLW  05
32B8:  MOVWF  x8E
32BA:  MOVLW  02
32BC:  MOVWF  x8F
32BE:  CALL   042C
*
3508:  MOVLW  05
350A:  MOVWF  x8E
350C:  MOVLW  02
350E:  MOVWF  x8F
3510:  CALL   042C
....................    printf (lcd_putc,"%cH:MM",h[0]); 
*
0AFA:  MOVFF  80,8D
0AFE:  RCALL  0476
0B00:  MOVLW  EC
0B02:  MOVWF  FF6
0B04:  MOVLW  00
0B06:  MOVWF  FF7
0B08:  MOVLW  04
0B0A:  MOVWF  x87
0B0C:  RCALL  05BE
*
159C:  MOVFF  80,8D
15A0:  CALL   0476
15A4:  MOVLW  EC
15A6:  MOVWF  FF6
15A8:  MOVLW  00
15AA:  MOVWF  FF7
15AC:  MOVLW  04
15AE:  MOVWF  x87
15B0:  CALL   05BE
*
17EE:  MOVFF  80,8D
17F2:  CALL   0476
17F6:  MOVLW  EC
17F8:  MOVWF  FF6
17FA:  MOVLW  00
17FC:  MOVWF  FF7
17FE:  MOVLW  04
1800:  MOVWF  x87
1802:  CALL   05BE
*
1A78:  MOVFF  80,8D
1A7C:  CALL   0476
1A80:  MOVLW  EC
1A82:  MOVWF  FF6
1A84:  MOVLW  00
1A86:  MOVWF  FF7
1A88:  MOVLW  04
1A8A:  MOVWF  x87
1A8C:  CALL   05BE
*
1CCA:  MOVFF  80,8D
1CCE:  CALL   0476
1CD2:  MOVLW  EC
1CD4:  MOVWF  FF6
1CD6:  MOVLW  00
1CD8:  MOVWF  FF7
1CDA:  MOVLW  04
1CDC:  MOVWF  x87
1CDE:  CALL   05BE
*
1F54:  MOVFF  80,8D
1F58:  CALL   0476
1F5C:  MOVLW  EC
1F5E:  MOVWF  FF6
1F60:  MOVLW  00
1F62:  MOVWF  FF7
1F64:  MOVLW  04
1F66:  MOVWF  x87
1F68:  CALL   05BE
*
21A6:  MOVFF  80,8D
21AA:  CALL   0476
21AE:  MOVLW  EC
21B0:  MOVWF  FF6
21B2:  MOVLW  00
21B4:  MOVWF  FF7
21B6:  MOVLW  04
21B8:  MOVWF  x87
21BA:  CALL   05BE
*
2430:  MOVFF  80,8D
2434:  CALL   0476
2438:  MOVLW  EC
243A:  MOVWF  FF6
243C:  MOVLW  00
243E:  MOVWF  FF7
2440:  MOVLW  04
2442:  MOVWF  x87
2444:  CALL   05BE
*
2682:  MOVFF  80,8D
2686:  CALL   0476
268A:  MOVLW  EC
268C:  MOVWF  FF6
268E:  MOVLW  00
2690:  MOVWF  FF7
2692:  MOVLW  04
2694:  MOVWF  x87
2696:  CALL   05BE
*
290C:  MOVFF  80,8D
2910:  CALL   0476
2914:  MOVLW  EC
2916:  MOVWF  FF6
2918:  MOVLW  00
291A:  MOVWF  FF7
291C:  MOVLW  04
291E:  MOVWF  x87
2920:  CALL   05BE
*
2B5E:  MOVFF  80,8D
2B62:  CALL   0476
2B66:  MOVLW  EC
2B68:  MOVWF  FF6
2B6A:  MOVLW  00
2B6C:  MOVWF  FF7
2B6E:  MOVLW  04
2B70:  MOVWF  x87
2B72:  CALL   05BE
*
2DE8:  MOVFF  80,8D
2DEC:  CALL   0476
2DF0:  MOVLW  EC
2DF2:  MOVWF  FF6
2DF4:  MOVLW  00
2DF6:  MOVWF  FF7
2DF8:  MOVLW  04
2DFA:  MOVWF  x87
2DFC:  CALL   05BE
*
303A:  MOVFF  80,8D
303E:  CALL   0476
3042:  MOVLW  EC
3044:  MOVWF  FF6
3046:  MOVLW  00
3048:  MOVWF  FF7
304A:  MOVLW  04
304C:  MOVWF  x87
304E:  CALL   05BE
*
32C2:  MOVFF  80,8D
32C6:  CALL   0476
32CA:  MOVLW  EC
32CC:  MOVWF  FF6
32CE:  MOVLW  00
32D0:  MOVWF  FF7
32D2:  MOVLW  04
32D4:  MOVWF  x87
32D6:  CALL   05BE
*
3514:  MOVFF  80,8D
3518:  CALL   0476
351C:  MOVLW  EC
351E:  MOVWF  FF6
3520:  MOVLW  00
3522:  MOVWF  FF7
3524:  MOVLW  04
3526:  MOVWF  x87
3528:  CALL   05BE
....................    do 
....................    { 
....................       con = kbd_getc(); 
*
0B0E:  RCALL  07E8
0B10:  MOVFF  01,84
*
15B4:  CALL   07E8
15B8:  MOVFF  01,84
*
1806:  CALL   07E8
180A:  MOVFF  01,84
*
1A90:  CALL   07E8
1A94:  MOVFF  01,84
*
1CE2:  CALL   07E8
1CE6:  MOVFF  01,84
*
1F6C:  CALL   07E8
1F70:  MOVFF  01,84
*
21BE:  CALL   07E8
21C2:  MOVFF  01,84
*
2448:  CALL   07E8
244C:  MOVFF  01,84
*
269A:  CALL   07E8
269E:  MOVFF  01,84
*
2924:  CALL   07E8
2928:  MOVFF  01,84
*
2B76:  CALL   07E8
2B7A:  MOVFF  01,84
*
2E00:  CALL   07E8
2E04:  MOVFF  01,84
*
3052:  CALL   07E8
3056:  MOVFF  01,84
*
32DA:  CALL   07E8
32DE:  MOVFF  01,84
*
352C:  CALL   07E8
3530:  MOVFF  01,84
....................       if(h[0]=='0'||h[0]=='1') ( (con >= '0') && (con <= '9') )?(h[1]=con):(con='\0'); 
*
0B14:  MOVF   x80,W
0B16:  SUBLW  30
0B18:  BZ    0B20
0B1A:  MOVF   x80,W
0B1C:  SUBLW  31
0B1E:  BNZ   0B36
0B20:  MOVF   x84,W
0B22:  SUBLW  2F
0B24:  BC    0B34
0B26:  MOVF   x84,W
0B28:  SUBLW  39
0B2A:  BNC   0B34
0B2C:  MOVFF  84,81
0B30:  MOVF   x81,W
0B32:  BRA    0B36
0B34:  CLRF   x84
*
15BC:  MOVF   x80,W
15BE:  SUBLW  30
15C0:  BZ    15C8
15C2:  MOVF   x80,W
15C4:  SUBLW  31
15C6:  BNZ   15DE
15C8:  MOVF   x84,W
15CA:  SUBLW  2F
15CC:  BC    15DC
15CE:  MOVF   x84,W
15D0:  SUBLW  39
15D2:  BNC   15DC
15D4:  MOVFF  84,81
15D8:  MOVF   x81,W
15DA:  BRA    15DE
15DC:  CLRF   x84
*
180E:  MOVF   x80,W
1810:  SUBLW  30
1812:  BZ    181A
1814:  MOVF   x80,W
1816:  SUBLW  31
1818:  BNZ   1830
181A:  MOVF   x84,W
181C:  SUBLW  2F
181E:  BC    182E
1820:  MOVF   x84,W
1822:  SUBLW  39
1824:  BNC   182E
1826:  MOVFF  84,81
182A:  MOVF   x81,W
182C:  BRA    1830
182E:  CLRF   x84
*
1A98:  MOVF   x80,W
1A9A:  SUBLW  30
1A9C:  BZ    1AA4
1A9E:  MOVF   x80,W
1AA0:  SUBLW  31
1AA2:  BNZ   1ABA
1AA4:  MOVF   x84,W
1AA6:  SUBLW  2F
1AA8:  BC    1AB8
1AAA:  MOVF   x84,W
1AAC:  SUBLW  39
1AAE:  BNC   1AB8
1AB0:  MOVFF  84,81
1AB4:  MOVF   x81,W
1AB6:  BRA    1ABA
1AB8:  CLRF   x84
*
1CEA:  MOVF   x80,W
1CEC:  SUBLW  30
1CEE:  BZ    1CF6
1CF0:  MOVF   x80,W
1CF2:  SUBLW  31
1CF4:  BNZ   1D0C
1CF6:  MOVF   x84,W
1CF8:  SUBLW  2F
1CFA:  BC    1D0A
1CFC:  MOVF   x84,W
1CFE:  SUBLW  39
1D00:  BNC   1D0A
1D02:  MOVFF  84,81
1D06:  MOVF   x81,W
1D08:  BRA    1D0C
1D0A:  CLRF   x84
*
1F74:  MOVF   x80,W
1F76:  SUBLW  30
1F78:  BZ    1F80
1F7A:  MOVF   x80,W
1F7C:  SUBLW  31
1F7E:  BNZ   1F96
1F80:  MOVF   x84,W
1F82:  SUBLW  2F
1F84:  BC    1F94
1F86:  MOVF   x84,W
1F88:  SUBLW  39
1F8A:  BNC   1F94
1F8C:  MOVFF  84,81
1F90:  MOVF   x81,W
1F92:  BRA    1F96
1F94:  CLRF   x84
*
21C6:  MOVF   x80,W
21C8:  SUBLW  30
21CA:  BZ    21D2
21CC:  MOVF   x80,W
21CE:  SUBLW  31
21D0:  BNZ   21E8
21D2:  MOVF   x84,W
21D4:  SUBLW  2F
21D6:  BC    21E6
21D8:  MOVF   x84,W
21DA:  SUBLW  39
21DC:  BNC   21E6
21DE:  MOVFF  84,81
21E2:  MOVF   x81,W
21E4:  BRA    21E8
21E6:  CLRF   x84
*
2450:  MOVF   x80,W
2452:  SUBLW  30
2454:  BZ    245C
2456:  MOVF   x80,W
2458:  SUBLW  31
245A:  BNZ   2472
245C:  MOVF   x84,W
245E:  SUBLW  2F
2460:  BC    2470
2462:  MOVF   x84,W
2464:  SUBLW  39
2466:  BNC   2470
2468:  MOVFF  84,81
246C:  MOVF   x81,W
246E:  BRA    2472
2470:  CLRF   x84
*
26A2:  MOVF   x80,W
26A4:  SUBLW  30
26A6:  BZ    26AE
26A8:  MOVF   x80,W
26AA:  SUBLW  31
26AC:  BNZ   26C4
26AE:  MOVF   x84,W
26B0:  SUBLW  2F
26B2:  BC    26C2
26B4:  MOVF   x84,W
26B6:  SUBLW  39
26B8:  BNC   26C2
26BA:  MOVFF  84,81
26BE:  MOVF   x81,W
26C0:  BRA    26C4
26C2:  CLRF   x84
*
292C:  MOVF   x80,W
292E:  SUBLW  30
2930:  BZ    2938
2932:  MOVF   x80,W
2934:  SUBLW  31
2936:  BNZ   294E
2938:  MOVF   x84,W
293A:  SUBLW  2F
293C:  BC    294C
293E:  MOVF   x84,W
2940:  SUBLW  39
2942:  BNC   294C
2944:  MOVFF  84,81
2948:  MOVF   x81,W
294A:  BRA    294E
294C:  CLRF   x84
*
2B7E:  MOVF   x80,W
2B80:  SUBLW  30
2B82:  BZ    2B8A
2B84:  MOVF   x80,W
2B86:  SUBLW  31
2B88:  BNZ   2BA0
2B8A:  MOVF   x84,W
2B8C:  SUBLW  2F
2B8E:  BC    2B9E
2B90:  MOVF   x84,W
2B92:  SUBLW  39
2B94:  BNC   2B9E
2B96:  MOVFF  84,81
2B9A:  MOVF   x81,W
2B9C:  BRA    2BA0
2B9E:  CLRF   x84
*
2E08:  MOVF   x80,W
2E0A:  SUBLW  30
2E0C:  BZ    2E14
2E0E:  MOVF   x80,W
2E10:  SUBLW  31
2E12:  BNZ   2E2A
2E14:  MOVF   x84,W
2E16:  SUBLW  2F
2E18:  BC    2E28
2E1A:  MOVF   x84,W
2E1C:  SUBLW  39
2E1E:  BNC   2E28
2E20:  MOVFF  84,81
2E24:  MOVF   x81,W
2E26:  BRA    2E2A
2E28:  CLRF   x84
*
305A:  MOVF   x80,W
305C:  SUBLW  30
305E:  BZ    3066
3060:  MOVF   x80,W
3062:  SUBLW  31
3064:  BNZ   307C
3066:  MOVF   x84,W
3068:  SUBLW  2F
306A:  BC    307A
306C:  MOVF   x84,W
306E:  SUBLW  39
3070:  BNC   307A
3072:  MOVFF  84,81
3076:  MOVF   x81,W
3078:  BRA    307C
307A:  CLRF   x84
*
32E2:  MOVF   x80,W
32E4:  SUBLW  30
32E6:  BZ    32EE
32E8:  MOVF   x80,W
32EA:  SUBLW  31
32EC:  BNZ   3304
32EE:  MOVF   x84,W
32F0:  SUBLW  2F
32F2:  BC    3302
32F4:  MOVF   x84,W
32F6:  SUBLW  39
32F8:  BNC   3302
32FA:  MOVFF  84,81
32FE:  MOVF   x81,W
3300:  BRA    3304
3302:  CLRF   x84
*
3534:  MOVF   x80,W
3536:  SUBLW  30
3538:  BZ    3540
353A:  MOVF   x80,W
353C:  SUBLW  31
353E:  BNZ   3556
3540:  MOVF   x84,W
3542:  SUBLW  2F
3544:  BC    3554
3546:  MOVF   x84,W
3548:  SUBLW  39
354A:  BNC   3554
354C:  MOVFF  84,81
3550:  MOVF   x81,W
3552:  BRA    3556
3554:  CLRF   x84
....................       if(h[0]=='2') ( (con >= '0') && (con <= '4') )?(h[1]=con):(con='\0');  
*
0B36:  MOVF   x80,W
0B38:  SUBLW  32
0B3A:  BNZ   0B52
0B3C:  MOVF   x84,W
0B3E:  SUBLW  2F
0B40:  BC    0B50
0B42:  MOVF   x84,W
0B44:  SUBLW  34
0B46:  BNC   0B50
0B48:  MOVFF  84,81
0B4C:  MOVF   x81,W
0B4E:  BRA    0B52
0B50:  CLRF   x84
*
15DE:  MOVF   x80,W
15E0:  SUBLW  32
15E2:  BNZ   15FA
15E4:  MOVF   x84,W
15E6:  SUBLW  2F
15E8:  BC    15F8
15EA:  MOVF   x84,W
15EC:  SUBLW  34
15EE:  BNC   15F8
15F0:  MOVFF  84,81
15F4:  MOVF   x81,W
15F6:  BRA    15FA
15F8:  CLRF   x84
*
1830:  MOVF   x80,W
1832:  SUBLW  32
1834:  BNZ   184C
1836:  MOVF   x84,W
1838:  SUBLW  2F
183A:  BC    184A
183C:  MOVF   x84,W
183E:  SUBLW  34
1840:  BNC   184A
1842:  MOVFF  84,81
1846:  MOVF   x81,W
1848:  BRA    184C
184A:  CLRF   x84
*
1ABA:  MOVF   x80,W
1ABC:  SUBLW  32
1ABE:  BNZ   1AD6
1AC0:  MOVF   x84,W
1AC2:  SUBLW  2F
1AC4:  BC    1AD4
1AC6:  MOVF   x84,W
1AC8:  SUBLW  34
1ACA:  BNC   1AD4
1ACC:  MOVFF  84,81
1AD0:  MOVF   x81,W
1AD2:  BRA    1AD6
1AD4:  CLRF   x84
*
1D0C:  MOVF   x80,W
1D0E:  SUBLW  32
1D10:  BNZ   1D28
1D12:  MOVF   x84,W
1D14:  SUBLW  2F
1D16:  BC    1D26
1D18:  MOVF   x84,W
1D1A:  SUBLW  34
1D1C:  BNC   1D26
1D1E:  MOVFF  84,81
1D22:  MOVF   x81,W
1D24:  BRA    1D28
1D26:  CLRF   x84
*
1F96:  MOVF   x80,W
1F98:  SUBLW  32
1F9A:  BNZ   1FB2
1F9C:  MOVF   x84,W
1F9E:  SUBLW  2F
1FA0:  BC    1FB0
1FA2:  MOVF   x84,W
1FA4:  SUBLW  34
1FA6:  BNC   1FB0
1FA8:  MOVFF  84,81
1FAC:  MOVF   x81,W
1FAE:  BRA    1FB2
1FB0:  CLRF   x84
*
21E8:  MOVF   x80,W
21EA:  SUBLW  32
21EC:  BNZ   2204
21EE:  MOVF   x84,W
21F0:  SUBLW  2F
21F2:  BC    2202
21F4:  MOVF   x84,W
21F6:  SUBLW  34
21F8:  BNC   2202
21FA:  MOVFF  84,81
21FE:  MOVF   x81,W
2200:  BRA    2204
2202:  CLRF   x84
*
2472:  MOVF   x80,W
2474:  SUBLW  32
2476:  BNZ   248E
2478:  MOVF   x84,W
247A:  SUBLW  2F
247C:  BC    248C
247E:  MOVF   x84,W
2480:  SUBLW  34
2482:  BNC   248C
2484:  MOVFF  84,81
2488:  MOVF   x81,W
248A:  BRA    248E
248C:  CLRF   x84
*
26C4:  MOVF   x80,W
26C6:  SUBLW  32
26C8:  BNZ   26E0
26CA:  MOVF   x84,W
26CC:  SUBLW  2F
26CE:  BC    26DE
26D0:  MOVF   x84,W
26D2:  SUBLW  34
26D4:  BNC   26DE
26D6:  MOVFF  84,81
26DA:  MOVF   x81,W
26DC:  BRA    26E0
26DE:  CLRF   x84
*
294E:  MOVF   x80,W
2950:  SUBLW  32
2952:  BNZ   296A
2954:  MOVF   x84,W
2956:  SUBLW  2F
2958:  BC    2968
295A:  MOVF   x84,W
295C:  SUBLW  34
295E:  BNC   2968
2960:  MOVFF  84,81
2964:  MOVF   x81,W
2966:  BRA    296A
2968:  CLRF   x84
*
2BA0:  MOVF   x80,W
2BA2:  SUBLW  32
2BA4:  BNZ   2BBC
2BA6:  MOVF   x84,W
2BA8:  SUBLW  2F
2BAA:  BC    2BBA
2BAC:  MOVF   x84,W
2BAE:  SUBLW  34
2BB0:  BNC   2BBA
2BB2:  MOVFF  84,81
2BB6:  MOVF   x81,W
2BB8:  BRA    2BBC
2BBA:  CLRF   x84
*
2E2A:  MOVF   x80,W
2E2C:  SUBLW  32
2E2E:  BNZ   2E46
2E30:  MOVF   x84,W
2E32:  SUBLW  2F
2E34:  BC    2E44
2E36:  MOVF   x84,W
2E38:  SUBLW  34
2E3A:  BNC   2E44
2E3C:  MOVFF  84,81
2E40:  MOVF   x81,W
2E42:  BRA    2E46
2E44:  CLRF   x84
*
307C:  MOVF   x80,W
307E:  SUBLW  32
3080:  BNZ   3098
3082:  MOVF   x84,W
3084:  SUBLW  2F
3086:  BC    3096
3088:  MOVF   x84,W
308A:  SUBLW  34
308C:  BNC   3096
308E:  MOVFF  84,81
3092:  MOVF   x81,W
3094:  BRA    3098
3096:  CLRF   x84
*
3304:  MOVF   x80,W
3306:  SUBLW  32
3308:  BNZ   3320
330A:  MOVF   x84,W
330C:  SUBLW  2F
330E:  BC    331E
3310:  MOVF   x84,W
3312:  SUBLW  34
3314:  BNC   331E
3316:  MOVFF  84,81
331A:  MOVF   x81,W
331C:  BRA    3320
331E:  CLRF   x84
*
3556:  MOVF   x80,W
3558:  SUBLW  32
355A:  BNZ   3572
355C:  MOVF   x84,W
355E:  SUBLW  2F
3560:  BC    3570
3562:  MOVF   x84,W
3564:  SUBLW  34
3566:  BNC   3570
3568:  MOVFF  84,81
356C:  MOVF   x81,W
356E:  BRA    3572
3570:  CLRF   x84
....................    }while(con == '\0'); 
*
0B52:  MOVF   x84,F
0B54:  BZ    0B0E
*
15FA:  MOVF   x84,F
15FC:  BZ    15B4
*
184C:  MOVF   x84,F
184E:  BZ    1806
*
1AD6:  MOVF   x84,F
1AD8:  BZ    1A90
*
1D28:  MOVF   x84,F
1D2A:  BZ    1CE2
*
1FB2:  MOVF   x84,F
1FB4:  BZ    1F6C
*
2204:  MOVF   x84,F
2206:  BZ    21BE
*
248E:  MOVF   x84,F
2490:  BZ    2448
*
26E0:  MOVF   x84,F
26E2:  BZ    269A
*
296A:  MOVF   x84,F
296C:  BZ    2924
*
2BBC:  MOVF   x84,F
2BBE:  BZ    2B76
*
2E46:  MOVF   x84,F
2E48:  BZ    2E00
*
3098:  MOVF   x84,F
309A:  BZ    3052
*
3320:  MOVF   x84,F
3322:  BZ    32DA
*
3572:  MOVF   x84,F
3574:  BZ    352C
....................    lcd_gotoxy (5,2); 
*
0B56:  MOVLW  05
0B58:  MOVWF  x8E
0B5A:  MOVLW  02
0B5C:  MOVWF  x8F
0B5E:  RCALL  042C
*
15FE:  MOVLW  05
1600:  MOVWF  x8E
1602:  MOVLW  02
1604:  MOVWF  x8F
1606:  CALL   042C
*
1850:  MOVLW  05
1852:  MOVWF  x8E
1854:  MOVLW  02
1856:  MOVWF  x8F
1858:  CALL   042C
*
1ADA:  MOVLW  05
1ADC:  MOVWF  x8E
1ADE:  MOVLW  02
1AE0:  MOVWF  x8F
1AE2:  CALL   042C
*
1D2C:  MOVLW  05
1D2E:  MOVWF  x8E
1D30:  MOVLW  02
1D32:  MOVWF  x8F
1D34:  CALL   042C
*
1FB6:  MOVLW  05
1FB8:  MOVWF  x8E
1FBA:  MOVLW  02
1FBC:  MOVWF  x8F
1FBE:  CALL   042C
*
2208:  MOVLW  05
220A:  MOVWF  x8E
220C:  MOVLW  02
220E:  MOVWF  x8F
2210:  CALL   042C
*
2492:  MOVLW  05
2494:  MOVWF  x8E
2496:  MOVLW  02
2498:  MOVWF  x8F
249A:  CALL   042C
*
26E4:  MOVLW  05
26E6:  MOVWF  x8E
26E8:  MOVLW  02
26EA:  MOVWF  x8F
26EC:  CALL   042C
*
296E:  MOVLW  05
2970:  MOVWF  x8E
2972:  MOVLW  02
2974:  MOVWF  x8F
2976:  CALL   042C
*
2BC0:  MOVLW  05
2BC2:  MOVWF  x8E
2BC4:  MOVLW  02
2BC6:  MOVWF  x8F
2BC8:  CALL   042C
*
2E4A:  MOVLW  05
2E4C:  MOVWF  x8E
2E4E:  MOVLW  02
2E50:  MOVWF  x8F
2E52:  CALL   042C
*
309C:  MOVLW  05
309E:  MOVWF  x8E
30A0:  MOVLW  02
30A2:  MOVWF  x8F
30A4:  CALL   042C
*
3324:  MOVLW  05
3326:  MOVWF  x8E
3328:  MOVLW  02
332A:  MOVWF  x8F
332C:  CALL   042C
*
3576:  MOVLW  05
3578:  MOVWF  x8E
357A:  MOVLW  02
357C:  MOVWF  x8F
357E:  CALL   042C
....................    printf (lcd_putc,"%c%c:MM",h[0],h[1]); 
*
0B60:  MOVFF  80,8D
0B64:  RCALL  0476
0B66:  MOVFF  81,8D
0B6A:  RCALL  0476
0B6C:  MOVLW  3A
0B6E:  MOVWF  x8D
0B70:  RCALL  0476
0B72:  MOVLW  4D
0B74:  MOVWF  x8D
0B76:  RCALL  0476
0B78:  MOVLW  4D
0B7A:  MOVWF  x8D
0B7C:  RCALL  0476
*
160A:  MOVFF  80,8D
160E:  CALL   0476
1612:  MOVFF  81,8D
1616:  CALL   0476
161A:  MOVLW  3A
161C:  MOVWF  x8D
161E:  CALL   0476
1622:  MOVLW  4D
1624:  MOVWF  x8D
1626:  CALL   0476
162A:  MOVLW  4D
162C:  MOVWF  x8D
162E:  CALL   0476
*
185C:  MOVFF  80,8D
1860:  CALL   0476
1864:  MOVFF  81,8D
1868:  CALL   0476
186C:  MOVLW  3A
186E:  MOVWF  x8D
1870:  CALL   0476
1874:  MOVLW  4D
1876:  MOVWF  x8D
1878:  CALL   0476
187C:  MOVLW  4D
187E:  MOVWF  x8D
1880:  CALL   0476
*
1AE6:  MOVFF  80,8D
1AEA:  CALL   0476
1AEE:  MOVFF  81,8D
1AF2:  CALL   0476
1AF6:  MOVLW  3A
1AF8:  MOVWF  x8D
1AFA:  CALL   0476
1AFE:  MOVLW  4D
1B00:  MOVWF  x8D
1B02:  CALL   0476
1B06:  MOVLW  4D
1B08:  MOVWF  x8D
1B0A:  CALL   0476
*
1D38:  MOVFF  80,8D
1D3C:  CALL   0476
1D40:  MOVFF  81,8D
1D44:  CALL   0476
1D48:  MOVLW  3A
1D4A:  MOVWF  x8D
1D4C:  CALL   0476
1D50:  MOVLW  4D
1D52:  MOVWF  x8D
1D54:  CALL   0476
1D58:  MOVLW  4D
1D5A:  MOVWF  x8D
1D5C:  CALL   0476
*
1FC2:  MOVFF  80,8D
1FC6:  CALL   0476
1FCA:  MOVFF  81,8D
1FCE:  CALL   0476
1FD2:  MOVLW  3A
1FD4:  MOVWF  x8D
1FD6:  CALL   0476
1FDA:  MOVLW  4D
1FDC:  MOVWF  x8D
1FDE:  CALL   0476
1FE2:  MOVLW  4D
1FE4:  MOVWF  x8D
1FE6:  CALL   0476
*
2214:  MOVFF  80,8D
2218:  CALL   0476
221C:  MOVFF  81,8D
2220:  CALL   0476
2224:  MOVLW  3A
2226:  MOVWF  x8D
2228:  CALL   0476
222C:  MOVLW  4D
222E:  MOVWF  x8D
2230:  CALL   0476
2234:  MOVLW  4D
2236:  MOVWF  x8D
2238:  CALL   0476
*
249E:  MOVFF  80,8D
24A2:  CALL   0476
24A6:  MOVFF  81,8D
24AA:  CALL   0476
24AE:  MOVLW  3A
24B0:  MOVWF  x8D
24B2:  CALL   0476
24B6:  MOVLW  4D
24B8:  MOVWF  x8D
24BA:  CALL   0476
24BE:  MOVLW  4D
24C0:  MOVWF  x8D
24C2:  CALL   0476
*
26F0:  MOVFF  80,8D
26F4:  CALL   0476
26F8:  MOVFF  81,8D
26FC:  CALL   0476
2700:  MOVLW  3A
2702:  MOVWF  x8D
2704:  CALL   0476
2708:  MOVLW  4D
270A:  MOVWF  x8D
270C:  CALL   0476
2710:  MOVLW  4D
2712:  MOVWF  x8D
2714:  CALL   0476
*
297A:  MOVFF  80,8D
297E:  CALL   0476
2982:  MOVFF  81,8D
2986:  CALL   0476
298A:  MOVLW  3A
298C:  MOVWF  x8D
298E:  CALL   0476
2992:  MOVLW  4D
2994:  MOVWF  x8D
2996:  CALL   0476
299A:  MOVLW  4D
299C:  MOVWF  x8D
299E:  CALL   0476
*
2BCC:  MOVFF  80,8D
2BD0:  CALL   0476
2BD4:  MOVFF  81,8D
2BD8:  CALL   0476
2BDC:  MOVLW  3A
2BDE:  MOVWF  x8D
2BE0:  CALL   0476
2BE4:  MOVLW  4D
2BE6:  MOVWF  x8D
2BE8:  CALL   0476
2BEC:  MOVLW  4D
2BEE:  MOVWF  x8D
2BF0:  CALL   0476
*
2E56:  MOVFF  80,8D
2E5A:  CALL   0476
2E5E:  MOVFF  81,8D
2E62:  CALL   0476
2E66:  MOVLW  3A
2E68:  MOVWF  x8D
2E6A:  CALL   0476
2E6E:  MOVLW  4D
2E70:  MOVWF  x8D
2E72:  CALL   0476
2E76:  MOVLW  4D
2E78:  MOVWF  x8D
2E7A:  CALL   0476
*
30A8:  MOVFF  80,8D
30AC:  CALL   0476
30B0:  MOVFF  81,8D
30B4:  CALL   0476
30B8:  MOVLW  3A
30BA:  MOVWF  x8D
30BC:  CALL   0476
30C0:  MOVLW  4D
30C2:  MOVWF  x8D
30C4:  CALL   0476
30C8:  MOVLW  4D
30CA:  MOVWF  x8D
30CC:  CALL   0476
*
3330:  MOVFF  80,8D
3334:  CALL   0476
3338:  MOVFF  81,8D
333C:  CALL   0476
3340:  MOVLW  3A
3342:  MOVWF  x8D
3344:  CALL   0476
3348:  MOVLW  4D
334A:  MOVWF  x8D
334C:  CALL   0476
3350:  MOVLW  4D
3352:  MOVWF  x8D
3354:  CALL   0476
*
3582:  MOVFF  80,8D
3586:  CALL   0476
358A:  MOVFF  81,8D
358E:  CALL   0476
3592:  MOVLW  3A
3594:  MOVWF  x8D
3596:  CALL   0476
359A:  MOVLW  4D
359C:  MOVWF  x8D
359E:  CALL   0476
35A2:  MOVLW  4D
35A4:  MOVWF  x8D
35A6:  CALL   0476
....................    do 
....................    { 
....................       con = kbd_getc(); 
*
0B7E:  RCALL  07E8
0B80:  MOVFF  01,84
*
1632:  CALL   07E8
1636:  MOVFF  01,84
*
1884:  CALL   07E8
1888:  MOVFF  01,84
*
1B0E:  CALL   07E8
1B12:  MOVFF  01,84
*
1D60:  CALL   07E8
1D64:  MOVFF  01,84
*
1FEA:  CALL   07E8
1FEE:  MOVFF  01,84
*
223C:  CALL   07E8
2240:  MOVFF  01,84
*
24C6:  CALL   07E8
24CA:  MOVFF  01,84
*
2718:  CALL   07E8
271C:  MOVFF  01,84
*
29A2:  CALL   07E8
29A6:  MOVFF  01,84
*
2BF4:  CALL   07E8
2BF8:  MOVFF  01,84
*
2E7E:  CALL   07E8
2E82:  MOVFF  01,84
*
30D0:  CALL   07E8
30D4:  MOVFF  01,84
*
3358:  CALL   07E8
335C:  MOVFF  01,84
*
35AA:  CALL   07E8
35AE:  MOVFF  01,84
....................       ((con >= '0') && (con <= '5'))? (m[0]=con) :(con='\0');  
*
0B84:  MOVF   x84,W
0B86:  SUBLW  2F
0B88:  BC    0B98
0B8A:  MOVF   x84,W
0B8C:  SUBLW  35
0B8E:  BNC   0B98
0B90:  MOVFF  84,82
0B94:  MOVF   x82,W
0B96:  BRA    0B9A
0B98:  CLRF   x84
*
163A:  MOVF   x84,W
163C:  SUBLW  2F
163E:  BC    164E
1640:  MOVF   x84,W
1642:  SUBLW  35
1644:  BNC   164E
1646:  MOVFF  84,82
164A:  MOVF   x82,W
164C:  BRA    1650
164E:  CLRF   x84
*
188C:  MOVF   x84,W
188E:  SUBLW  2F
1890:  BC    18A0
1892:  MOVF   x84,W
1894:  SUBLW  35
1896:  BNC   18A0
1898:  MOVFF  84,82
189C:  MOVF   x82,W
189E:  BRA    18A2
18A0:  CLRF   x84
*
1B16:  MOVF   x84,W
1B18:  SUBLW  2F
1B1A:  BC    1B2A
1B1C:  MOVF   x84,W
1B1E:  SUBLW  35
1B20:  BNC   1B2A
1B22:  MOVFF  84,82
1B26:  MOVF   x82,W
1B28:  BRA    1B2C
1B2A:  CLRF   x84
*
1D68:  MOVF   x84,W
1D6A:  SUBLW  2F
1D6C:  BC    1D7C
1D6E:  MOVF   x84,W
1D70:  SUBLW  35
1D72:  BNC   1D7C
1D74:  MOVFF  84,82
1D78:  MOVF   x82,W
1D7A:  BRA    1D7E
1D7C:  CLRF   x84
*
1FF2:  MOVF   x84,W
1FF4:  SUBLW  2F
1FF6:  BC    2006
1FF8:  MOVF   x84,W
1FFA:  SUBLW  35
1FFC:  BNC   2006
1FFE:  MOVFF  84,82
2002:  MOVF   x82,W
2004:  BRA    2008
2006:  CLRF   x84
*
2244:  MOVF   x84,W
2246:  SUBLW  2F
2248:  BC    2258
224A:  MOVF   x84,W
224C:  SUBLW  35
224E:  BNC   2258
2250:  MOVFF  84,82
2254:  MOVF   x82,W
2256:  BRA    225A
2258:  CLRF   x84
*
24CE:  MOVF   x84,W
24D0:  SUBLW  2F
24D2:  BC    24E2
24D4:  MOVF   x84,W
24D6:  SUBLW  35
24D8:  BNC   24E2
24DA:  MOVFF  84,82
24DE:  MOVF   x82,W
24E0:  BRA    24E4
24E2:  CLRF   x84
*
2720:  MOVF   x84,W
2722:  SUBLW  2F
2724:  BC    2734
2726:  MOVF   x84,W
2728:  SUBLW  35
272A:  BNC   2734
272C:  MOVFF  84,82
2730:  MOVF   x82,W
2732:  BRA    2736
2734:  CLRF   x84
*
29AA:  MOVF   x84,W
29AC:  SUBLW  2F
29AE:  BC    29BE
29B0:  MOVF   x84,W
29B2:  SUBLW  35
29B4:  BNC   29BE
29B6:  MOVFF  84,82
29BA:  MOVF   x82,W
29BC:  BRA    29C0
29BE:  CLRF   x84
*
2BFC:  MOVF   x84,W
2BFE:  SUBLW  2F
2C00:  BC    2C10
2C02:  MOVF   x84,W
2C04:  SUBLW  35
2C06:  BNC   2C10
2C08:  MOVFF  84,82
2C0C:  MOVF   x82,W
2C0E:  BRA    2C12
2C10:  CLRF   x84
*
2E86:  MOVF   x84,W
2E88:  SUBLW  2F
2E8A:  BC    2E9A
2E8C:  MOVF   x84,W
2E8E:  SUBLW  35
2E90:  BNC   2E9A
2E92:  MOVFF  84,82
2E96:  MOVF   x82,W
2E98:  BRA    2E9C
2E9A:  CLRF   x84
*
30D8:  MOVF   x84,W
30DA:  SUBLW  2F
30DC:  BC    30EC
30DE:  MOVF   x84,W
30E0:  SUBLW  35
30E2:  BNC   30EC
30E4:  MOVFF  84,82
30E8:  MOVF   x82,W
30EA:  BRA    30EE
30EC:  CLRF   x84
*
3360:  MOVF   x84,W
3362:  SUBLW  2F
3364:  BC    3374
3366:  MOVF   x84,W
3368:  SUBLW  35
336A:  BNC   3374
336C:  MOVFF  84,82
3370:  MOVF   x82,W
3372:  BRA    3376
3374:  CLRF   x84
*
35B2:  MOVF   x84,W
35B4:  SUBLW  2F
35B6:  BC    35C6
35B8:  MOVF   x84,W
35BA:  SUBLW  35
35BC:  BNC   35C6
35BE:  MOVFF  84,82
35C2:  MOVF   x82,W
35C4:  BRA    35C8
35C6:  CLRF   x84
....................    }while(con == '\0'); 
*
0B9A:  MOVF   x84,F
0B9C:  BZ    0B7E
*
1650:  MOVF   x84,F
1652:  BZ    1632
*
18A2:  MOVF   x84,F
18A4:  BZ    1884
*
1B2C:  MOVF   x84,F
1B2E:  BZ    1B0E
*
1D7E:  MOVF   x84,F
1D80:  BZ    1D60
*
2008:  MOVF   x84,F
200A:  BZ    1FEA
*
225A:  MOVF   x84,F
225C:  BZ    223C
*
24E4:  MOVF   x84,F
24E6:  BZ    24C6
*
2736:  MOVF   x84,F
2738:  BZ    2718
*
29C0:  MOVF   x84,F
29C2:  BZ    29A2
*
2C12:  MOVF   x84,F
2C14:  BZ    2BF4
*
2E9C:  MOVF   x84,F
2E9E:  BZ    2E7E
*
30EE:  MOVF   x84,F
30F0:  BZ    30D0
*
3376:  MOVF   x84,F
3378:  BZ    3358
*
35C8:  MOVF   x84,F
35CA:  BZ    35AA
....................    lcd_gotoxy (5,2); 
*
0B9E:  MOVLW  05
0BA0:  MOVWF  x8E
0BA2:  MOVLW  02
0BA4:  MOVWF  x8F
0BA6:  RCALL  042C
*
1654:  MOVLW  05
1656:  MOVWF  x8E
1658:  MOVLW  02
165A:  MOVWF  x8F
165C:  CALL   042C
*
18A6:  MOVLW  05
18A8:  MOVWF  x8E
18AA:  MOVLW  02
18AC:  MOVWF  x8F
18AE:  CALL   042C
*
1B30:  MOVLW  05
1B32:  MOVWF  x8E
1B34:  MOVLW  02
1B36:  MOVWF  x8F
1B38:  CALL   042C
*
1D82:  MOVLW  05
1D84:  MOVWF  x8E
1D86:  MOVLW  02
1D88:  MOVWF  x8F
1D8A:  CALL   042C
*
200C:  MOVLW  05
200E:  MOVWF  x8E
2010:  MOVLW  02
2012:  MOVWF  x8F
2014:  CALL   042C
*
225E:  MOVLW  05
2260:  MOVWF  x8E
2262:  MOVLW  02
2264:  MOVWF  x8F
2266:  CALL   042C
*
24E8:  MOVLW  05
24EA:  MOVWF  x8E
24EC:  MOVLW  02
24EE:  MOVWF  x8F
24F0:  CALL   042C
*
273A:  MOVLW  05
273C:  MOVWF  x8E
273E:  MOVLW  02
2740:  MOVWF  x8F
2742:  CALL   042C
*
29C4:  MOVLW  05
29C6:  MOVWF  x8E
29C8:  MOVLW  02
29CA:  MOVWF  x8F
29CC:  CALL   042C
*
2C16:  MOVLW  05
2C18:  MOVWF  x8E
2C1A:  MOVLW  02
2C1C:  MOVWF  x8F
2C1E:  CALL   042C
*
2EA0:  MOVLW  05
2EA2:  MOVWF  x8E
2EA4:  MOVLW  02
2EA6:  MOVWF  x8F
2EA8:  CALL   042C
*
30F2:  MOVLW  05
30F4:  MOVWF  x8E
30F6:  MOVLW  02
30F8:  MOVWF  x8F
30FA:  CALL   042C
*
337A:  MOVLW  05
337C:  MOVWF  x8E
337E:  MOVLW  02
3380:  MOVWF  x8F
3382:  CALL   042C
*
35CC:  MOVLW  05
35CE:  MOVWF  x8E
35D0:  MOVLW  02
35D2:  MOVWF  x8F
35D4:  CALL   042C
....................    printf (lcd_putc,"%c%c:%cM",h[0],h[1],m[0]); 
*
0BA8:  MOVFF  80,8D
0BAC:  RCALL  0476
0BAE:  MOVFF  81,8D
0BB2:  RCALL  0476
0BB4:  MOVLW  3A
0BB6:  MOVWF  x8D
0BB8:  RCALL  0476
0BBA:  MOVFF  82,8D
0BBE:  RCALL  0476
0BC0:  MOVLW  4D
0BC2:  MOVWF  x8D
0BC4:  RCALL  0476
*
1660:  MOVFF  80,8D
1664:  CALL   0476
1668:  MOVFF  81,8D
166C:  CALL   0476
1670:  MOVLW  3A
1672:  MOVWF  x8D
1674:  CALL   0476
1678:  MOVFF  82,8D
167C:  CALL   0476
1680:  MOVLW  4D
1682:  MOVWF  x8D
1684:  CALL   0476
*
18B2:  MOVFF  80,8D
18B6:  CALL   0476
18BA:  MOVFF  81,8D
18BE:  CALL   0476
18C2:  MOVLW  3A
18C4:  MOVWF  x8D
18C6:  CALL   0476
18CA:  MOVFF  82,8D
18CE:  CALL   0476
18D2:  MOVLW  4D
18D4:  MOVWF  x8D
18D6:  CALL   0476
*
1B3C:  MOVFF  80,8D
1B40:  CALL   0476
1B44:  MOVFF  81,8D
1B48:  CALL   0476
1B4C:  MOVLW  3A
1B4E:  MOVWF  x8D
1B50:  CALL   0476
1B54:  MOVFF  82,8D
1B58:  CALL   0476
1B5C:  MOVLW  4D
1B5E:  MOVWF  x8D
1B60:  CALL   0476
*
1D8E:  MOVFF  80,8D
1D92:  CALL   0476
1D96:  MOVFF  81,8D
1D9A:  CALL   0476
1D9E:  MOVLW  3A
1DA0:  MOVWF  x8D
1DA2:  CALL   0476
1DA6:  MOVFF  82,8D
1DAA:  CALL   0476
1DAE:  MOVLW  4D
1DB0:  MOVWF  x8D
1DB2:  CALL   0476
*
2018:  MOVFF  80,8D
201C:  CALL   0476
2020:  MOVFF  81,8D
2024:  CALL   0476
2028:  MOVLW  3A
202A:  MOVWF  x8D
202C:  CALL   0476
2030:  MOVFF  82,8D
2034:  CALL   0476
2038:  MOVLW  4D
203A:  MOVWF  x8D
203C:  CALL   0476
*
226A:  MOVFF  80,8D
226E:  CALL   0476
2272:  MOVFF  81,8D
2276:  CALL   0476
227A:  MOVLW  3A
227C:  MOVWF  x8D
227E:  CALL   0476
2282:  MOVFF  82,8D
2286:  CALL   0476
228A:  MOVLW  4D
228C:  MOVWF  x8D
228E:  CALL   0476
*
24F4:  MOVFF  80,8D
24F8:  CALL   0476
24FC:  MOVFF  81,8D
2500:  CALL   0476
2504:  MOVLW  3A
2506:  MOVWF  x8D
2508:  CALL   0476
250C:  MOVFF  82,8D
2510:  CALL   0476
2514:  MOVLW  4D
2516:  MOVWF  x8D
2518:  CALL   0476
*
2746:  MOVFF  80,8D
274A:  CALL   0476
274E:  MOVFF  81,8D
2752:  CALL   0476
2756:  MOVLW  3A
2758:  MOVWF  x8D
275A:  CALL   0476
275E:  MOVFF  82,8D
2762:  CALL   0476
2766:  MOVLW  4D
2768:  MOVWF  x8D
276A:  CALL   0476
*
29D0:  MOVFF  80,8D
29D4:  CALL   0476
29D8:  MOVFF  81,8D
29DC:  CALL   0476
29E0:  MOVLW  3A
29E2:  MOVWF  x8D
29E4:  CALL   0476
29E8:  MOVFF  82,8D
29EC:  CALL   0476
29F0:  MOVLW  4D
29F2:  MOVWF  x8D
29F4:  CALL   0476
*
2C22:  MOVFF  80,8D
2C26:  CALL   0476
2C2A:  MOVFF  81,8D
2C2E:  CALL   0476
2C32:  MOVLW  3A
2C34:  MOVWF  x8D
2C36:  CALL   0476
2C3A:  MOVFF  82,8D
2C3E:  CALL   0476
2C42:  MOVLW  4D
2C44:  MOVWF  x8D
2C46:  CALL   0476
*
2EAC:  MOVFF  80,8D
2EB0:  CALL   0476
2EB4:  MOVFF  81,8D
2EB8:  CALL   0476
2EBC:  MOVLW  3A
2EBE:  MOVWF  x8D
2EC0:  CALL   0476
2EC4:  MOVFF  82,8D
2EC8:  CALL   0476
2ECC:  MOVLW  4D
2ECE:  MOVWF  x8D
2ED0:  CALL   0476
*
30FE:  MOVFF  80,8D
3102:  CALL   0476
3106:  MOVFF  81,8D
310A:  CALL   0476
310E:  MOVLW  3A
3110:  MOVWF  x8D
3112:  CALL   0476
3116:  MOVFF  82,8D
311A:  CALL   0476
311E:  MOVLW  4D
3120:  MOVWF  x8D
3122:  CALL   0476
*
3386:  MOVFF  80,8D
338A:  CALL   0476
338E:  MOVFF  81,8D
3392:  CALL   0476
3396:  MOVLW  3A
3398:  MOVWF  x8D
339A:  CALL   0476
339E:  MOVFF  82,8D
33A2:  CALL   0476
33A6:  MOVLW  4D
33A8:  MOVWF  x8D
33AA:  CALL   0476
*
35D8:  MOVFF  80,8D
35DC:  CALL   0476
35E0:  MOVFF  81,8D
35E4:  CALL   0476
35E8:  MOVLW  3A
35EA:  MOVWF  x8D
35EC:  CALL   0476
35F0:  MOVFF  82,8D
35F4:  CALL   0476
35F8:  MOVLW  4D
35FA:  MOVWF  x8D
35FC:  CALL   0476
....................    do 
....................    { 
....................       con = kbd_getc(); 
*
0BC6:  RCALL  07E8
0BC8:  MOVFF  01,84
*
1688:  CALL   07E8
168C:  MOVFF  01,84
*
18DA:  CALL   07E8
18DE:  MOVFF  01,84
*
1B64:  CALL   07E8
1B68:  MOVFF  01,84
*
1DB6:  CALL   07E8
1DBA:  MOVFF  01,84
*
2040:  CALL   07E8
2044:  MOVFF  01,84
*
2292:  CALL   07E8
2296:  MOVFF  01,84
*
251C:  CALL   07E8
2520:  MOVFF  01,84
*
276E:  CALL   07E8
2772:  MOVFF  01,84
*
29F8:  CALL   07E8
29FC:  MOVFF  01,84
*
2C4A:  CALL   07E8
2C4E:  MOVFF  01,84
*
2ED4:  CALL   07E8
2ED8:  MOVFF  01,84
*
3126:  CALL   07E8
312A:  MOVFF  01,84
*
33AE:  CALL   07E8
33B2:  MOVFF  01,84
*
3600:  CALL   07E8
3604:  MOVFF  01,84
....................       ((con >= '0') && (con <= '5'))? (m[1]=con) :(con='\0');  
*
0BCC:  MOVF   x84,W
0BCE:  SUBLW  2F
0BD0:  BC    0BE0
0BD2:  MOVF   x84,W
0BD4:  SUBLW  35
0BD6:  BNC   0BE0
0BD8:  MOVFF  84,83
0BDC:  MOVF   x83,W
0BDE:  BRA    0BE2
0BE0:  CLRF   x84
*
1690:  MOVF   x84,W
1692:  SUBLW  2F
1694:  BC    16A4
1696:  MOVF   x84,W
1698:  SUBLW  35
169A:  BNC   16A4
169C:  MOVFF  84,83
16A0:  MOVF   x83,W
16A2:  BRA    16A6
16A4:  CLRF   x84
*
18E2:  MOVF   x84,W
18E4:  SUBLW  2F
18E6:  BC    18F6
18E8:  MOVF   x84,W
18EA:  SUBLW  35
18EC:  BNC   18F6
18EE:  MOVFF  84,83
18F2:  MOVF   x83,W
18F4:  BRA    18F8
18F6:  CLRF   x84
*
1B6C:  MOVF   x84,W
1B6E:  SUBLW  2F
1B70:  BC    1B80
1B72:  MOVF   x84,W
1B74:  SUBLW  35
1B76:  BNC   1B80
1B78:  MOVFF  84,83
1B7C:  MOVF   x83,W
1B7E:  BRA    1B82
1B80:  CLRF   x84
*
1DBE:  MOVF   x84,W
1DC0:  SUBLW  2F
1DC2:  BC    1DD2
1DC4:  MOVF   x84,W
1DC6:  SUBLW  35
1DC8:  BNC   1DD2
1DCA:  MOVFF  84,83
1DCE:  MOVF   x83,W
1DD0:  BRA    1DD4
1DD2:  CLRF   x84
*
2048:  MOVF   x84,W
204A:  SUBLW  2F
204C:  BC    205C
204E:  MOVF   x84,W
2050:  SUBLW  35
2052:  BNC   205C
2054:  MOVFF  84,83
2058:  MOVF   x83,W
205A:  BRA    205E
205C:  CLRF   x84
*
229A:  MOVF   x84,W
229C:  SUBLW  2F
229E:  BC    22AE
22A0:  MOVF   x84,W
22A2:  SUBLW  35
22A4:  BNC   22AE
22A6:  MOVFF  84,83
22AA:  MOVF   x83,W
22AC:  BRA    22B0
22AE:  CLRF   x84
*
2524:  MOVF   x84,W
2526:  SUBLW  2F
2528:  BC    2538
252A:  MOVF   x84,W
252C:  SUBLW  35
252E:  BNC   2538
2530:  MOVFF  84,83
2534:  MOVF   x83,W
2536:  BRA    253A
2538:  CLRF   x84
*
2776:  MOVF   x84,W
2778:  SUBLW  2F
277A:  BC    278A
277C:  MOVF   x84,W
277E:  SUBLW  35
2780:  BNC   278A
2782:  MOVFF  84,83
2786:  MOVF   x83,W
2788:  BRA    278C
278A:  CLRF   x84
*
2A00:  MOVF   x84,W
2A02:  SUBLW  2F
2A04:  BC    2A14
2A06:  MOVF   x84,W
2A08:  SUBLW  35
2A0A:  BNC   2A14
2A0C:  MOVFF  84,83
2A10:  MOVF   x83,W
2A12:  BRA    2A16
2A14:  CLRF   x84
*
2C52:  MOVF   x84,W
2C54:  SUBLW  2F
2C56:  BC    2C66
2C58:  MOVF   x84,W
2C5A:  SUBLW  35
2C5C:  BNC   2C66
2C5E:  MOVFF  84,83
2C62:  MOVF   x83,W
2C64:  BRA    2C68
2C66:  CLRF   x84
*
2EDC:  MOVF   x84,W
2EDE:  SUBLW  2F
2EE0:  BC    2EF0
2EE2:  MOVF   x84,W
2EE4:  SUBLW  35
2EE6:  BNC   2EF0
2EE8:  MOVFF  84,83
2EEC:  MOVF   x83,W
2EEE:  BRA    2EF2
2EF0:  CLRF   x84
*
312E:  MOVF   x84,W
3130:  SUBLW  2F
3132:  BC    3142
3134:  MOVF   x84,W
3136:  SUBLW  35
3138:  BNC   3142
313A:  MOVFF  84,83
313E:  MOVF   x83,W
3140:  BRA    3144
3142:  CLRF   x84
*
33B6:  MOVF   x84,W
33B8:  SUBLW  2F
33BA:  BC    33CA
33BC:  MOVF   x84,W
33BE:  SUBLW  35
33C0:  BNC   33CA
33C2:  MOVFF  84,83
33C6:  MOVF   x83,W
33C8:  BRA    33CC
33CA:  CLRF   x84
*
3608:  MOVF   x84,W
360A:  SUBLW  2F
360C:  BC    361C
360E:  MOVF   x84,W
3610:  SUBLW  35
3612:  BNC   361C
3614:  MOVFF  84,83
3618:  MOVF   x83,W
361A:  BRA    361E
361C:  CLRF   x84
....................    }while(con == '\0'); 
*
0BE2:  MOVF   x84,F
0BE4:  BZ    0BC6
*
16A6:  MOVF   x84,F
16A8:  BZ    1688
*
18F8:  MOVF   x84,F
18FA:  BZ    18DA
*
1B82:  MOVF   x84,F
1B84:  BZ    1B64
*
1DD4:  MOVF   x84,F
1DD6:  BZ    1DB6
*
205E:  MOVF   x84,F
2060:  BZ    2040
*
22B0:  MOVF   x84,F
22B2:  BZ    2292
*
253A:  MOVF   x84,F
253C:  BZ    251C
*
278C:  MOVF   x84,F
278E:  BZ    276E
*
2A16:  MOVF   x84,F
2A18:  BZ    29F8
*
2C68:  MOVF   x84,F
2C6A:  BZ    2C4A
*
2EF2:  MOVF   x84,F
2EF4:  BZ    2ED4
*
3144:  MOVF   x84,F
3146:  BZ    3126
*
33CC:  MOVF   x84,F
33CE:  BZ    33AE
*
361E:  MOVF   x84,F
3620:  BZ    3600
....................    lcd_gotoxy (5,2); 
*
0BE6:  MOVLW  05
0BE8:  MOVWF  x8E
0BEA:  MOVLW  02
0BEC:  MOVWF  x8F
0BEE:  RCALL  042C
*
16AA:  MOVLW  05
16AC:  MOVWF  x8E
16AE:  MOVLW  02
16B0:  MOVWF  x8F
16B2:  CALL   042C
*
18FC:  MOVLW  05
18FE:  MOVWF  x8E
1900:  MOVLW  02
1902:  MOVWF  x8F
1904:  CALL   042C
*
1B86:  MOVLW  05
1B88:  MOVWF  x8E
1B8A:  MOVLW  02
1B8C:  MOVWF  x8F
1B8E:  CALL   042C
*
1DD8:  MOVLW  05
1DDA:  MOVWF  x8E
1DDC:  MOVLW  02
1DDE:  MOVWF  x8F
1DE0:  CALL   042C
*
2062:  MOVLW  05
2064:  MOVWF  x8E
2066:  MOVLW  02
2068:  MOVWF  x8F
206A:  CALL   042C
*
22B4:  MOVLW  05
22B6:  MOVWF  x8E
22B8:  MOVLW  02
22BA:  MOVWF  x8F
22BC:  CALL   042C
*
253E:  MOVLW  05
2540:  MOVWF  x8E
2542:  MOVLW  02
2544:  MOVWF  x8F
2546:  CALL   042C
*
2790:  MOVLW  05
2792:  MOVWF  x8E
2794:  MOVLW  02
2796:  MOVWF  x8F
2798:  CALL   042C
*
2A1A:  MOVLW  05
2A1C:  MOVWF  x8E
2A1E:  MOVLW  02
2A20:  MOVWF  x8F
2A22:  CALL   042C
*
2C6C:  MOVLW  05
2C6E:  MOVWF  x8E
2C70:  MOVLW  02
2C72:  MOVWF  x8F
2C74:  CALL   042C
*
2EF6:  MOVLW  05
2EF8:  MOVWF  x8E
2EFA:  MOVLW  02
2EFC:  MOVWF  x8F
2EFE:  CALL   042C
*
3148:  MOVLW  05
314A:  MOVWF  x8E
314C:  MOVLW  02
314E:  MOVWF  x8F
3150:  CALL   042C
*
33D0:  MOVLW  05
33D2:  MOVWF  x8E
33D4:  MOVLW  02
33D6:  MOVWF  x8F
33D8:  CALL   042C
*
3622:  MOVLW  05
3624:  MOVWF  x8E
3626:  MOVLW  02
3628:  MOVWF  x8F
362A:  CALL   042C
....................    printf (lcd_putc,"%c%c:%c%c",h[0],h[1],m[0],m[1]); 
*
0BF0:  MOVFF  80,8D
0BF4:  RCALL  0476
0BF6:  MOVFF  81,8D
0BFA:  RCALL  0476
0BFC:  MOVLW  3A
0BFE:  MOVWF  x8D
0C00:  RCALL  0476
0C02:  MOVFF  82,8D
0C06:  RCALL  0476
0C08:  MOVFF  83,8D
0C0C:  RCALL  0476
*
16B6:  MOVFF  80,8D
16BA:  CALL   0476
16BE:  MOVFF  81,8D
16C2:  CALL   0476
16C6:  MOVLW  3A
16C8:  MOVWF  x8D
16CA:  CALL   0476
16CE:  MOVFF  82,8D
16D2:  CALL   0476
16D6:  MOVFF  83,8D
16DA:  CALL   0476
*
1908:  MOVFF  80,8D
190C:  CALL   0476
1910:  MOVFF  81,8D
1914:  CALL   0476
1918:  MOVLW  3A
191A:  MOVWF  x8D
191C:  CALL   0476
1920:  MOVFF  82,8D
1924:  CALL   0476
1928:  MOVFF  83,8D
192C:  CALL   0476
*
1B92:  MOVFF  80,8D
1B96:  CALL   0476
1B9A:  MOVFF  81,8D
1B9E:  CALL   0476
1BA2:  MOVLW  3A
1BA4:  MOVWF  x8D
1BA6:  CALL   0476
1BAA:  MOVFF  82,8D
1BAE:  CALL   0476
1BB2:  MOVFF  83,8D
1BB6:  CALL   0476
*
1DE4:  MOVFF  80,8D
1DE8:  CALL   0476
1DEC:  MOVFF  81,8D
1DF0:  CALL   0476
1DF4:  MOVLW  3A
1DF6:  MOVWF  x8D
1DF8:  CALL   0476
1DFC:  MOVFF  82,8D
1E00:  CALL   0476
1E04:  MOVFF  83,8D
1E08:  CALL   0476
*
206E:  MOVFF  80,8D
2072:  CALL   0476
2076:  MOVFF  81,8D
207A:  CALL   0476
207E:  MOVLW  3A
2080:  MOVWF  x8D
2082:  CALL   0476
2086:  MOVFF  82,8D
208A:  CALL   0476
208E:  MOVFF  83,8D
2092:  CALL   0476
*
22C0:  MOVFF  80,8D
22C4:  CALL   0476
22C8:  MOVFF  81,8D
22CC:  CALL   0476
22D0:  MOVLW  3A
22D2:  MOVWF  x8D
22D4:  CALL   0476
22D8:  MOVFF  82,8D
22DC:  CALL   0476
22E0:  MOVFF  83,8D
22E4:  CALL   0476
*
254A:  MOVFF  80,8D
254E:  CALL   0476
2552:  MOVFF  81,8D
2556:  CALL   0476
255A:  MOVLW  3A
255C:  MOVWF  x8D
255E:  CALL   0476
2562:  MOVFF  82,8D
2566:  CALL   0476
256A:  MOVFF  83,8D
256E:  CALL   0476
*
279C:  MOVFF  80,8D
27A0:  CALL   0476
27A4:  MOVFF  81,8D
27A8:  CALL   0476
27AC:  MOVLW  3A
27AE:  MOVWF  x8D
27B0:  CALL   0476
27B4:  MOVFF  82,8D
27B8:  CALL   0476
27BC:  MOVFF  83,8D
27C0:  CALL   0476
*
2A26:  MOVFF  80,8D
2A2A:  CALL   0476
2A2E:  MOVFF  81,8D
2A32:  CALL   0476
2A36:  MOVLW  3A
2A38:  MOVWF  x8D
2A3A:  CALL   0476
2A3E:  MOVFF  82,8D
2A42:  CALL   0476
2A46:  MOVFF  83,8D
2A4A:  CALL   0476
*
2C78:  MOVFF  80,8D
2C7C:  CALL   0476
2C80:  MOVFF  81,8D
2C84:  CALL   0476
2C88:  MOVLW  3A
2C8A:  MOVWF  x8D
2C8C:  CALL   0476
2C90:  MOVFF  82,8D
2C94:  CALL   0476
2C98:  MOVFF  83,8D
2C9C:  CALL   0476
*
2F02:  MOVFF  80,8D
2F06:  CALL   0476
2F0A:  MOVFF  81,8D
2F0E:  CALL   0476
2F12:  MOVLW  3A
2F14:  MOVWF  x8D
2F16:  CALL   0476
2F1A:  MOVFF  82,8D
2F1E:  CALL   0476
2F22:  MOVFF  83,8D
2F26:  CALL   0476
*
3154:  MOVFF  80,8D
3158:  CALL   0476
315C:  MOVFF  81,8D
3160:  CALL   0476
3164:  MOVLW  3A
3166:  MOVWF  x8D
3168:  CALL   0476
316C:  MOVFF  82,8D
3170:  CALL   0476
3174:  MOVFF  83,8D
3178:  CALL   0476
*
33DC:  MOVFF  80,8D
33E0:  CALL   0476
33E4:  MOVFF  81,8D
33E8:  CALL   0476
33EC:  MOVLW  3A
33EE:  MOVWF  x8D
33F0:  CALL   0476
33F4:  MOVFF  82,8D
33F8:  CALL   0476
33FC:  MOVFF  83,8D
3400:  CALL   0476
*
362E:  MOVFF  80,8D
3632:  CALL   0476
3636:  MOVFF  81,8D
363A:  CALL   0476
363E:  MOVLW  3A
3640:  MOVWF  x8D
3642:  CALL   0476
3646:  MOVFF  82,8D
364A:  CALL   0476
364E:  MOVFF  83,8D
3652:  CALL   0476
....................    delay_ms(500); 
*
0C0E:  MOVLW  02
0C10:  MOVWF  x85
0C12:  MOVLW  FA
0C14:  MOVWF  x8E
0C16:  CALL   02C4
0C1A:  DECFSZ x85,F
0C1C:  BRA    0C12
*
16DE:  MOVLW  02
16E0:  MOVWF  x85
16E2:  MOVLW  FA
16E4:  MOVWF  x8E
16E6:  CALL   02C4
16EA:  DECFSZ x85,F
16EC:  BRA    16E2
*
1930:  MOVLW  02
1932:  MOVWF  x85
1934:  MOVLW  FA
1936:  MOVWF  x8E
1938:  CALL   02C4
193C:  DECFSZ x85,F
193E:  BRA    1934
*
1BBA:  MOVLW  02
1BBC:  MOVWF  x85
1BBE:  MOVLW  FA
1BC0:  MOVWF  x8E
1BC2:  CALL   02C4
1BC6:  DECFSZ x85,F
1BC8:  BRA    1BBE
*
1E0C:  MOVLW  02
1E0E:  MOVWF  x85
1E10:  MOVLW  FA
1E12:  MOVWF  x8E
1E14:  CALL   02C4
1E18:  DECFSZ x85,F
1E1A:  BRA    1E10
*
2096:  MOVLW  02
2098:  MOVWF  x85
209A:  MOVLW  FA
209C:  MOVWF  x8E
209E:  CALL   02C4
20A2:  DECFSZ x85,F
20A4:  BRA    209A
*
22E8:  MOVLW  02
22EA:  MOVWF  x85
22EC:  MOVLW  FA
22EE:  MOVWF  x8E
22F0:  CALL   02C4
22F4:  DECFSZ x85,F
22F6:  BRA    22EC
*
2572:  MOVLW  02
2574:  MOVWF  x85
2576:  MOVLW  FA
2578:  MOVWF  x8E
257A:  CALL   02C4
257E:  DECFSZ x85,F
2580:  BRA    2576
*
27C4:  MOVLW  02
27C6:  MOVWF  x85
27C8:  MOVLW  FA
27CA:  MOVWF  x8E
27CC:  CALL   02C4
27D0:  DECFSZ x85,F
27D2:  BRA    27C8
*
2A4E:  MOVLW  02
2A50:  MOVWF  x85
2A52:  MOVLW  FA
2A54:  MOVWF  x8E
2A56:  CALL   02C4
2A5A:  DECFSZ x85,F
2A5C:  BRA    2A52
*
2CA0:  MOVLW  02
2CA2:  MOVWF  x85
2CA4:  MOVLW  FA
2CA6:  MOVWF  x8E
2CA8:  CALL   02C4
2CAC:  DECFSZ x85,F
2CAE:  BRA    2CA4
*
2F2A:  MOVLW  02
2F2C:  MOVWF  x85
2F2E:  MOVLW  FA
2F30:  MOVWF  x8E
2F32:  CALL   02C4
2F36:  DECFSZ x85,F
2F38:  BRA    2F2E
*
317C:  MOVLW  02
317E:  MOVWF  x85
3180:  MOVLW  FA
3182:  MOVWF  x8E
3184:  CALL   02C4
3188:  DECFSZ x85,F
318A:  BRA    3180
*
3404:  MOVLW  02
3406:  MOVWF  x85
3408:  MOVLW  FA
340A:  MOVWF  x8E
340C:  CALL   02C4
3410:  DECFSZ x85,F
3412:  BRA    3408
*
3656:  MOVLW  02
3658:  MOVWF  x85
365A:  MOVLW  FA
365C:  MOVWF  x8E
365E:  CALL   02C4
3662:  DECFSZ x85,F
3664:  BRA    365A
....................    hr = concatenateAtoi (h[0],h[1]); 
*
0C4C:  MOVFF  01,49
*
171C:  MOVFF  01,08
*
196E:  MOVFF  01,0A
*
1BF8:  MOVFF  01,0C
*
1E4A:  MOVFF  01,0E
*
20D4:  MOVFF  01,10
*
2326:  MOVFF  01,12
*
25B0:  MOVFF  01,14
*
2802:  MOVFF  01,16
*
2A8C:  MOVFF  01,18
*
2CDE:  MOVFF  01,1A
*
2F68:  MOVFF  01,1C
*
31BA:  MOVFF  01,1E
*
3442:  MOVFF  01,20
*
3694:  MOVFF  01,22
....................    min = concatenateAtoi (m[0],m[1]); 
*
0C7E:  MOVFF  01,4A
*
174E:  MOVFF  01,09
*
19A0:  MOVFF  01,0B
*
1C2A:  MOVFF  01,0D
*
1E7C:  MOVFF  01,0F
*
2106:  MOVFF  01,11
*
2358:  MOVFF  01,13
*
25E2:  MOVFF  01,15
*
2834:  MOVFF  01,17
*
2ABE:  MOVFF  01,19
*
2D10:  MOVFF  01,1B
*
2F9A:  MOVFF  01,1D
*
31EC:  MOVFF  01,1F
*
3474:  MOVFF  01,21
*
36C6:  MOVFF  01,23
.................... } 
....................  
.................... void getDate(char message[],BYTE& day, BYTE& month, BYTE& year, BYTE& dow) 
.................... { 
*
0D00:  CLRF   x72
....................    char d[2]; 
....................     
....................    char con = '\0'; 
....................    clean(2); 
0D02:  MOVLW  02
0D04:  MOVWF  x87
0D06:  RCALL  08C4
....................    printf (lcd_putc,"\a%s",message); 
0D08:  MOVLW  07
0D0A:  MOVWF  x8D
0D0C:  CALL   0476
0D10:  MOVFF  6F,FEA
0D14:  MOVFF  6E,FE9
0D18:  RCALL  08FE
....................    lcd_gotoxy (3,2); 
0D1A:  MOVLW  03
0D1C:  MOVWF  x8E
0D1E:  MOVLW  02
0D20:  MOVWF  x8F
0D22:  CALL   042C
....................    printf (lcd_putc,"DD/MM/YY D"); 
0D26:  MOVLW  F2
0D28:  MOVWF  FF6
0D2A:  MOVLW  00
0D2C:  MOVWF  FF7
0D2E:  RCALL  08A4
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
0D30:  RCALL  07E8
0D32:  MOVFF  01,72
....................       ((con >= '0') && (con <= '3'))? (d[0]=con) :(con='\0');  
0D36:  MOVF   x72,W
0D38:  SUBLW  2F
0D3A:  BC    0D4A
0D3C:  MOVF   x72,W
0D3E:  SUBLW  33
0D40:  BNC   0D4A
0D42:  MOVFF  72,70
0D46:  MOVF   x70,W
0D48:  BRA    0D4C
0D4A:  CLRF   x72
....................    }while(con == '\0'); 
0D4C:  MOVF   x72,F
0D4E:  BZ    0D30
....................    lcd_gotoxy (3,2); 
0D50:  MOVLW  03
0D52:  MOVWF  x8E
0D54:  MOVLW  02
0D56:  MOVWF  x8F
0D58:  CALL   042C
....................    printf (lcd_putc,"%cD/MM/YY D",d[0]); 
0D5C:  MOVFF  70,8D
0D60:  CALL   0476
0D64:  MOVLW  00
0D66:  MOVWF  FF6
0D68:  MOVLW  01
0D6A:  MOVWF  FF7
0D6C:  MOVLW  09
0D6E:  MOVWF  x87
0D70:  RCALL  05BE
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
0D72:  RCALL  07E8
0D74:  MOVFF  01,72
....................       if(d[0] == '0')( (con >= '1') && (con <= '9') )?(d[1]=con):(con='\0'); 
0D78:  MOVF   x70,W
0D7A:  SUBLW  30
0D7C:  BNZ   0D94
0D7E:  MOVF   x72,W
0D80:  SUBLW  30
0D82:  BC    0D92
0D84:  MOVF   x72,W
0D86:  SUBLW  39
0D88:  BNC   0D92
0D8A:  MOVFF  72,71
0D8E:  MOVF   x71,W
0D90:  BRA    0D94
0D92:  CLRF   x72
....................       if(d[0]>'0' && d[0]<='2') ( (con >= '0') && (con <= '9') )?(d[1]=con):(con='\0'); 
0D94:  MOVF   x70,W
0D96:  SUBLW  30
0D98:  BC    0DB6
0D9A:  MOVF   x70,W
0D9C:  SUBLW  32
0D9E:  BNC   0DB6
0DA0:  MOVF   x72,W
0DA2:  SUBLW  2F
0DA4:  BC    0DB4
0DA6:  MOVF   x72,W
0DA8:  SUBLW  39
0DAA:  BNC   0DB4
0DAC:  MOVFF  72,71
0DB0:  MOVF   x71,W
0DB2:  BRA    0DB6
0DB4:  CLRF   x72
....................       if(d[0]=='3') ( (con == '0') || (con == '1') )?(d[1]=con):(con='\0');  
0DB6:  MOVF   x70,W
0DB8:  SUBLW  33
0DBA:  BNZ   0DD2
0DBC:  MOVF   x72,W
0DBE:  SUBLW  30
0DC0:  BZ    0DC8
0DC2:  MOVF   x72,W
0DC4:  SUBLW  31
0DC6:  BNZ   0DD0
0DC8:  MOVFF  72,71
0DCC:  MOVF   x71,W
0DCE:  BRA    0DD2
0DD0:  CLRF   x72
....................    }while(con == '\0'); 
0DD2:  MOVF   x72,F
0DD4:  BZ    0D72
....................    lcd_gotoxy (3,2); 
0DD6:  MOVLW  03
0DD8:  MOVWF  x8E
0DDA:  MOVLW  02
0DDC:  MOVWF  x8F
0DDE:  CALL   042C
....................    printf (lcd_putc,"%c%c/MM/YY D",d[0],d[1]); 
0DE2:  MOVFF  70,8D
0DE6:  CALL   0476
0DEA:  MOVFF  71,8D
0DEE:  CALL   0476
0DF2:  MOVLW  0E
0DF4:  MOVWF  FF6
0DF6:  MOVLW  01
0DF8:  MOVWF  FF7
0DFA:  MOVLW  08
0DFC:  MOVWF  x87
0DFE:  CALL   05BE
....................    day = concatenateAtoi(d[0],d[1]); 
*
0E30:  MOVFF  01,4B
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
0E34:  RCALL  07E8
0E36:  MOVFF  01,72
....................       ((con == '0') || (con == '1'))? (d[0]=con) :(con='\0');  
0E3A:  MOVF   x72,W
0E3C:  SUBLW  30
0E3E:  BZ    0E46
0E40:  MOVF   x72,W
0E42:  SUBLW  31
0E44:  BNZ   0E4E
0E46:  MOVFF  72,70
0E4A:  MOVF   x70,W
0E4C:  BRA    0E50
0E4E:  CLRF   x72
....................    }while(con == '\0'); 
0E50:  MOVF   x72,F
0E52:  BZ    0E34
....................    lcd_gotoxy (3,2); 
0E54:  MOVLW  03
0E56:  MOVWF  x8E
0E58:  MOVLW  02
0E5A:  MOVWF  x8F
0E5C:  CALL   042C
....................    printf (lcd_putc,"%02d/%cM/YY D",day,d[0]); 
0E60:  MOVFF  4B,87
0E64:  MOVLW  01
0E66:  MOVWF  x88
0E68:  CALL   04C8
0E6C:  MOVLW  2F
0E6E:  MOVWF  x8D
0E70:  CALL   0476
0E74:  MOVFF  70,8D
0E78:  CALL   0476
0E7C:  MOVLW  1F
0E7E:  MOVWF  FF6
0E80:  MOVLW  01
0E82:  MOVWF  FF7
0E84:  MOVLW  06
0E86:  MOVWF  x87
0E88:  CALL   05BE
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
0E8C:  RCALL  07E8
0E8E:  MOVFF  01,72
....................       if(d[0]=='0') ( (con >= '1') && (con <= '9') )?(d[1]=con):(con='\0'); 
0E92:  MOVF   x70,W
0E94:  SUBLW  30
0E96:  BNZ   0EAE
0E98:  MOVF   x72,W
0E9A:  SUBLW  30
0E9C:  BC    0EAC
0E9E:  MOVF   x72,W
0EA0:  SUBLW  39
0EA2:  BNC   0EAC
0EA4:  MOVFF  72,71
0EA8:  MOVF   x71,W
0EAA:  BRA    0EAE
0EAC:  CLRF   x72
....................       if(d[0]=='1') ( (con >= '0') && (con <= '2') )?(d[1]=con):(con='\0'); 
0EAE:  MOVF   x70,W
0EB0:  SUBLW  31
0EB2:  BNZ   0ECA
0EB4:  MOVF   x72,W
0EB6:  SUBLW  2F
0EB8:  BC    0EC8
0EBA:  MOVF   x72,W
0EBC:  SUBLW  32
0EBE:  BNC   0EC8
0EC0:  MOVFF  72,71
0EC4:  MOVF   x71,W
0EC6:  BRA    0ECA
0EC8:  CLRF   x72
....................    }while(con == '\0'); 
0ECA:  MOVF   x72,F
0ECC:  BZ    0E8C
....................    lcd_gotoxy (3,2); 
0ECE:  MOVLW  03
0ED0:  MOVWF  x8E
0ED2:  MOVLW  02
0ED4:  MOVWF  x8F
0ED6:  CALL   042C
....................    month = concatenateAtoi(d[0],d[1]); 
*
0F08:  MOVFF  01,4C
....................    switch(month) 
....................    { 
0F0C:  MOVF   4C,W
0F0E:  XORLW  02
0F10:  BZ    0F24
0F12:  XORLW  06
0F14:  BZ    0F30
0F16:  XORLW  02
0F18:  BZ    0F3C
0F1A:  XORLW  0F
0F1C:  BZ    0F48
0F1E:  XORLW  05
0F20:  BZ    0F54
0F22:  BRA    0F60
....................    case 2:{if(day > 28)day=28; break;} 
0F24:  MOVF   4B,W
0F26:  SUBLW  1C
0F28:  BC    0F2E
0F2A:  MOVLW  1C
0F2C:  MOVWF  4B
0F2E:  BRA    0F60
....................    case 4:{if(day > 30)day=30; break;} 
0F30:  MOVF   4B,W
0F32:  SUBLW  1E
0F34:  BC    0F3A
0F36:  MOVLW  1E
0F38:  MOVWF  4B
0F3A:  BRA    0F60
....................    case 6:{if(day > 28)day=28; break;} 
0F3C:  MOVF   4B,W
0F3E:  SUBLW  1C
0F40:  BC    0F46
0F42:  MOVLW  1C
0F44:  MOVWF  4B
0F46:  BRA    0F60
....................    case 9:{if(day > 28)day=28; break;} 
0F48:  MOVF   4B,W
0F4A:  SUBLW  1C
0F4C:  BC    0F52
0F4E:  MOVLW  1C
0F50:  MOVWF  4B
0F52:  BRA    0F60
....................    case 12:{if(day > 28)day=28; break;} 
0F54:  MOVF   4B,W
0F56:  SUBLW  1C
0F58:  BC    0F5E
0F5A:  MOVLW  1C
0F5C:  MOVWF  4B
0F5E:  BRA    0F60
....................    } 
....................    printf (lcd_putc,"%02d/%02d/YY D",day,month); 
0F60:  MOVFF  4B,87
0F64:  MOVLW  01
0F66:  MOVWF  x88
0F68:  CALL   04C8
0F6C:  MOVLW  2F
0F6E:  MOVWF  x8D
0F70:  CALL   0476
0F74:  MOVFF  4C,87
0F78:  MOVLW  01
0F7A:  MOVWF  x88
0F7C:  CALL   04C8
0F80:  MOVLW  2F
0F82:  MOVWF  FF6
0F84:  MOVLW  01
0F86:  MOVWF  FF7
0F88:  MOVLW  05
0F8A:  MOVWF  x87
0F8C:  CALL   05BE
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
0F90:  RCALL  07E8
0F92:  MOVFF  01,72
....................       ((con >= '0') && (con <= '9'))? (d[0]=con) :(con='\0');  
0F96:  MOVF   x72,W
0F98:  SUBLW  2F
0F9A:  BC    0FAA
0F9C:  MOVF   x72,W
0F9E:  SUBLW  39
0FA0:  BNC   0FAA
0FA2:  MOVFF  72,70
0FA6:  MOVF   x70,W
0FA8:  BRA    0FAC
0FAA:  CLRF   x72
....................    }while(con == '\0'); 
0FAC:  MOVF   x72,F
0FAE:  BZ    0F90
....................    lcd_gotoxy (3,2); 
0FB0:  MOVLW  03
0FB2:  MOVWF  x8E
0FB4:  MOVLW  02
0FB6:  MOVWF  x8F
0FB8:  CALL   042C
....................    printf (lcd_putc,"%02d/%02d/%cY D",day,month,d[0]); 
0FBC:  MOVFF  4B,87
0FC0:  MOVLW  01
0FC2:  MOVWF  x88
0FC4:  CALL   04C8
0FC8:  MOVLW  2F
0FCA:  MOVWF  x8D
0FCC:  CALL   0476
0FD0:  MOVFF  4C,87
0FD4:  MOVLW  01
0FD6:  MOVWF  x88
0FD8:  CALL   04C8
0FDC:  MOVLW  2F
0FDE:  MOVWF  x8D
0FE0:  CALL   0476
0FE4:  MOVFF  70,8D
0FE8:  CALL   0476
0FEC:  MOVLW  59
0FEE:  MOVWF  x8D
0FF0:  CALL   0476
0FF4:  MOVLW  20
0FF6:  MOVWF  x8D
0FF8:  CALL   0476
0FFC:  MOVLW  44
0FFE:  MOVWF  x8D
1000:  CALL   0476
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
1004:  CALL   07E8
1008:  MOVFF  01,72
....................       ((con >= '0') && (con <= '9'))? (d[1]=con) :(con='\0');  
100C:  MOVF   x72,W
100E:  SUBLW  2F
1010:  BC    1020
1012:  MOVF   x72,W
1014:  SUBLW  39
1016:  BNC   1020
1018:  MOVFF  72,71
101C:  MOVF   x71,W
101E:  BRA    1022
1020:  CLRF   x72
....................    }while(con == '\0'); 
1022:  MOVF   x72,F
1024:  BZ    1004
....................    lcd_gotoxy (3,2); 
1026:  MOVLW  03
1028:  MOVWF  x8E
102A:  MOVLW  02
102C:  MOVWF  x8F
102E:  CALL   042C
....................    year=concatenateAtoi(d[0],d[1]); 
*
1060:  MOVFF  01,4D
....................    printf (lcd_putc,"%02d/%02d/%02d D",day,month,year); 
1064:  MOVFF  4B,87
1068:  MOVLW  01
106A:  MOVWF  x88
106C:  CALL   04C8
1070:  MOVLW  2F
1072:  MOVWF  x8D
1074:  CALL   0476
1078:  MOVFF  4C,87
107C:  MOVLW  01
107E:  MOVWF  x88
1080:  CALL   04C8
1084:  MOVLW  2F
1086:  MOVWF  x8D
1088:  CALL   0476
108C:  MOVFF  4D,87
1090:  MOVLW  01
1092:  MOVWF  x88
1094:  CALL   04C8
1098:  MOVLW  20
109A:  MOVWF  x8D
109C:  CALL   0476
10A0:  MOVLW  44
10A2:  MOVWF  x8D
10A4:  CALL   0476
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
10A8:  CALL   07E8
10AC:  MOVFF  01,72
....................       ((con >= '1') && (con <= '9'))? (d[0]=con) :(con='\0');  
10B0:  MOVF   x72,W
10B2:  SUBLW  30
10B4:  BC    10C4
10B6:  MOVF   x72,W
10B8:  SUBLW  39
10BA:  BNC   10C4
10BC:  MOVFF  72,70
10C0:  MOVF   x70,W
10C2:  BRA    10C6
10C4:  CLRF   x72
....................    }while(con == '\0'); 
10C6:  MOVF   x72,F
10C8:  BZ    10A8
....................    lcd_gotoxy (3,2); 
10CA:  MOVLW  03
10CC:  MOVWF  x8E
10CE:  MOVLW  02
10D0:  MOVWF  x8F
10D2:  CALL   042C
....................    dow =(int)(d[0]-'0'); 
10D6:  MOVLW  30
10D8:  SUBWF  x70,W
10DA:  MOVWF  4E
....................    printf (lcd_putc,"%02d/%02d/%02d %02d",day,month,year,dow); 
10DC:  MOVFF  4B,87
10E0:  MOVLW  01
10E2:  MOVWF  x88
10E4:  CALL   04C8
10E8:  MOVLW  2F
10EA:  MOVWF  x8D
10EC:  CALL   0476
10F0:  MOVFF  4C,87
10F4:  MOVLW  01
10F6:  MOVWF  x88
10F8:  CALL   04C8
10FC:  MOVLW  2F
10FE:  MOVWF  x8D
1100:  CALL   0476
1104:  MOVFF  4D,87
1108:  MOVLW  01
110A:  MOVWF  x88
110C:  CALL   04C8
1110:  MOVLW  20
1112:  MOVWF  x8D
1114:  CALL   0476
1118:  MOVFF  4E,87
111C:  MOVLW  01
111E:  MOVWF  x88
1120:  CALL   04C8
....................    delay_ms(1000); 
1124:  MOVLW  04
1126:  MOVWF  x73
1128:  MOVLW  FA
112A:  MOVWF  x8E
112C:  CALL   02C4
1130:  DECFSZ x73,F
1132:  BRA    1128
.................... } 
....................  
.................... void configClock() 
.................... { 
....................    BYTE hour,min,day,month,year,dow; 
....................    clean(2); 
*
09DC:  MOVLW  02
09DE:  MOVWF  x87
09E0:  RCALL  08C4
....................    int a = 1; 
09E2:  MOVLW  01
09E4:  MOVWF  4F
....................    lcd_gotoxy (2,2);  
09E6:  MOVLW  02
09E8:  MOVWF  x8E
09EA:  MOVWF  x8F
09EC:  RCALL  042C
....................    printf(lcd_putc "<   enter   >"); 
09EE:  MOVLW  36
09F0:  MOVWF  FF6
09F2:  MOVLW  01
09F4:  MOVWF  FF7
09F6:  RCALL  08A4
....................    while (a!=0) 
....................    { 
09F8:  MOVF   4F,F
09FA:  BTFSC  FD8.2
09FC:  GOTO   118A
....................       char c; 
....................       switch (a) 
....................       { 
0A00:  MOVF   4F,W
0A02:  XORLW  01
0A04:  BZ    0A18
0A06:  XORLW  03
0A08:  BTFSC  FD8.2
0A0A:  BRA    0C96
0A0C:  XORLW  01
0A0E:  BTFSC  FD8.2
0A10:  GOTO   1150
0A14:  GOTO   1188
....................       case 1: 
....................       { 
....................          char message[]={"-NUEVA HORA-"}; 
0A18:  MOVLW  2D
0A1A:  MOVWF  51
0A1C:  MOVLW  4E
0A1E:  MOVWF  52
0A20:  MOVLW  55
0A22:  MOVWF  53
0A24:  MOVLW  45
0A26:  MOVWF  54
0A28:  MOVLW  56
0A2A:  MOVWF  55
0A2C:  MOVLW  41
0A2E:  MOVWF  56
0A30:  MOVLW  20
0A32:  MOVWF  57
0A34:  MOVLW  48
0A36:  MOVWF  58
0A38:  MOVLW  4F
0A3A:  MOVWF  59
0A3C:  MOVLW  52
0A3E:  MOVWF  5A
0A40:  MOVLW  41
0A42:  MOVWF  5B
0A44:  MOVLW  2D
0A46:  MOVWF  5C
0A48:  CLRF   5D
....................          clean(1); 
0A4A:  MOVLW  01
0A4C:  MOVWF  x87
0A4E:  RCALL  08C4
....................          printf(lcd_putc,"\a-CONFIG HOUR-"); 
0A50:  MOVLW  44
0A52:  MOVWF  FF6
0A54:  MOVLW  01
0A56:  MOVWF  FF7
0A58:  RCALL  08A4
....................          c = kbd_getc(); 
0A5A:  RCALL  07E8
0A5C:  MOVFF  01,50
....................          if (c == '1') a=3; 
0A60:  MOVF   50,W
0A62:  SUBLW  31
0A64:  BNZ   0A6A
0A66:  MOVLW  03
0A68:  MOVWF  4F
....................          if (c == '2') {getHour(message,hour,min); rtc_set_time(hour,min);} 
0A6A:  MOVF   50,W
0A6C:  SUBLW  32
0A6E:  BTFSS  FD8.2
0A70:  BRA    0C8C
0A72:  CLRF   x6D
0A74:  MOVLW  51
0A76:  MOVWF  x6C
0A78:  MOVFF  6D,7F
0A7C:  MOVFF  6C,7E
*
0C82:  MOVFF  49,6C
0C86:  MOVFF  4A,6D
0C8A:  BRA    094A
....................          if (c == '3') ++a; 
0C8C:  MOVF   50,W
0C8E:  SUBLW  33
0C90:  BTFSC  FD8.2
0C92:  INCF   4F,F
....................           
....................          break; 
0C94:  BRA    1188
....................       } 
....................       case 2: 
....................       { 
....................          char message[]={"-NUEVA FECHA-"}; 
0C96:  MOVLW  2D
0C98:  MOVWF  5E
0C9A:  MOVLW  4E
0C9C:  MOVWF  5F
0C9E:  MOVLW  55
0CA0:  MOVWF  x60
0CA2:  MOVLW  45
0CA4:  MOVWF  x61
0CA6:  MOVLW  56
0CA8:  MOVWF  x62
0CAA:  MOVLW  41
0CAC:  MOVWF  x63
0CAE:  MOVLW  20
0CB0:  MOVWF  x64
0CB2:  MOVLW  46
0CB4:  MOVWF  x65
0CB6:  MOVLW  45
0CB8:  MOVWF  x66
0CBA:  MOVLW  43
0CBC:  MOVWF  x67
0CBE:  MOVLW  48
0CC0:  MOVWF  x68
0CC2:  MOVLW  41
0CC4:  MOVWF  x69
0CC6:  MOVLW  2D
0CC8:  MOVWF  x6A
0CCA:  CLRF   x6B
....................          clean(1); 
0CCC:  MOVLW  01
0CCE:  MOVWF  x87
0CD0:  RCALL  08C4
....................          printf(lcd_putc,"\a-CONFIG DATE-"); 
0CD2:  MOVLW  54
0CD4:  MOVWF  FF6
0CD6:  MOVLW  01
0CD8:  MOVWF  FF7
0CDA:  RCALL  08A4
....................          c = kbd_getc(); 
0CDC:  RCALL  07E8
0CDE:  MOVFF  01,50
....................          if (c == '1') --a; 
0CE2:  MOVF   50,W
0CE4:  SUBLW  31
0CE6:  BTFSC  FD8.2
0CE8:  DECF   4F,F
....................          if (c == '2') {getDate(message,day,month,year,dow); rtc_set_date(day,month,year,dow);} 
0CEA:  MOVF   50,W
0CEC:  SUBLW  32
0CEE:  BTFSS  FD8.2
0CF0:  BRA    1146
0CF2:  CLRF   x6D
0CF4:  MOVLW  5E
0CF6:  MOVWF  x6C
0CF8:  MOVFF  6D,6F
0CFC:  MOVFF  6C,6E
*
1134:  MOVFF  4B,6C
1138:  MOVFF  4C,6D
113C:  MOVFF  4D,6E
1140:  MOVFF  4E,6F
1144:  BRA    0988
....................          if (c == '3') ++a; 
1146:  MOVF   50,W
1148:  SUBLW  33
114A:  BTFSC  FD8.2
114C:  INCF   4F,F
....................          break; 
114E:  BRA    1188
....................       } 
....................       case 3: 
....................       { 
....................          clean(1); 
1150:  MOVLW  01
1152:  MOVWF  x87
1154:  CALL   08C4
....................          printf(lcd_putc,"\a-EXIT-"); 
1158:  MOVLW  64
115A:  MOVWF  FF6
115C:  MOVLW  01
115E:  MOVWF  FF7
1160:  CALL   08A4
....................          c = kbd_getc(); 
1164:  CALL   07E8
1168:  MOVFF  01,50
....................          if (c == '1') --a; 
116C:  MOVF   50,W
116E:  SUBLW  31
1170:  BTFSC  FD8.2
1172:  DECF   4F,F
....................          if (c == '2') a = 0; 
1174:  MOVF   50,W
1176:  SUBLW  32
1178:  BTFSC  FD8.2
117A:  CLRF   4F
....................          if (c == '3') a = 1; 
117C:  MOVF   50,W
117E:  SUBLW  33
1180:  BNZ   1186
1182:  MOVLW  01
1184:  MOVWF  4F
....................          break; 
1186:  BRA    1188
....................       } 
....................       } 
....................    }   
1188:  BRA    09F8
.................... } 
118A:  GOTO   13E2 (RETURN)
....................  
.................... void configOnOff(Week& schedule) 
.................... { 
....................    char message1[]={"-HORA ON-"}; 
*
141C:  MOVLW  2D
141E:  MOVWF  49
1420:  MOVLW  48
1422:  MOVWF  4A
1424:  MOVLW  4F
1426:  MOVWF  4B
1428:  MOVLW  52
142A:  MOVWF  4C
142C:  MOVLW  41
142E:  MOVWF  4D
1430:  MOVLW  20
1432:  MOVWF  4E
1434:  MOVLW  4F
1436:  MOVWF  4F
1438:  MOVLW  4E
143A:  MOVWF  50
143C:  MOVLW  2D
143E:  MOVWF  51
1440:  CLRF   52
....................    char message2[]={"-HORA OFF-"}; 
1442:  MOVWF  53
1444:  MOVLW  48
1446:  MOVWF  54
1448:  MOVLW  4F
144A:  MOVWF  55
144C:  MOVLW  52
144E:  MOVWF  56
1450:  MOVLW  41
1452:  MOVWF  57
1454:  MOVLW  20
1456:  MOVWF  58
1458:  MOVLW  4F
145A:  MOVWF  59
145C:  MOVLW  46
145E:  MOVWF  5A
1460:  MOVWF  5B
1462:  MOVLW  2D
1464:  MOVWF  5C
1466:  CLRF   5D
....................    clean(2); 
1468:  MOVLW  02
146A:  MOVWF  x87
146C:  CALL   08C4
....................    int a = 1; 
1470:  MOVLW  01
1472:  MOVWF  5E
....................    lcd_gotoxy (2,2);  
1474:  MOVLW  02
1476:  MOVWF  x8E
1478:  MOVWF  x8F
147A:  CALL   042C
....................    printf(lcd_putc "<   enter   >"); 
147E:  MOVLW  6C
1480:  MOVWF  FF6
1482:  MOVLW  01
1484:  MOVWF  FF7
1486:  CALL   08A4
....................    while (a!=0) 
....................    { 
148A:  MOVF   5E,F
148C:  BTFSC  FD8.2
148E:  GOTO   3710
....................       char c; 
....................       switch (a) 
....................       { 
1492:  MOVF   5E,W
1494:  XORLW  01
1496:  BZ    14D2
1498:  XORLW  03
149A:  BTFSC  FD8.2
149C:  BRA    19B0
149E:  XORLW  01
14A0:  BTFSC  FD8.2
14A2:  GOTO   1E8C
14A6:  XORLW  07
14A8:  BTFSC  FD8.2
14AA:  GOTO   2368
14AE:  XORLW  01
14B0:  BTFSC  FD8.2
14B2:  GOTO   2844
14B6:  XORLW  03
14B8:  BTFSC  FD8.2
14BA:  GOTO   2D20
14BE:  XORLW  01
14C0:  BTFSC  FD8.2
14C2:  GOTO   31FA
14C6:  XORLW  0F
14C8:  BTFSC  FD8.2
14CA:  GOTO   36D4
14CE:  GOTO   370C
....................       case 1: 
....................       { 
....................          clean(1); 
14D2:  MOVLW  01
14D4:  MOVWF  x87
14D6:  CALL   08C4
....................          printf(lcd_putc,"\a-LUNES-"); 
14DA:  MOVLW  7A
14DC:  MOVWF  FF6
14DE:  MOVLW  01
14E0:  MOVWF  FF7
14E2:  CALL   08A4
....................          c = kbd_getc(); 
14E6:  CALL   07E8
14EA:  MOVFF  01,5F
....................          if (c == '1') a=8; 
14EE:  MOVF   5F,W
14F0:  SUBLW  31
14F2:  BNZ   14F8
14F4:  MOVLW  08
14F6:  MOVWF  5E
....................          if (c == '2')  
14F8:  MOVF   5F,W
14FA:  SUBLW  32
14FC:  BTFSS  FD8.2
14FE:  BRA    19A4
....................          { 
....................             getHour(message1, schedule.monday.on.hour, schedule.monday.on.min); 
1500:  CLRF   x61
1502:  MOVLW  49
1504:  MOVWF  x60
1506:  MOVFF  61,7F
150A:  MOVFF  60,7E
....................             getHour(message2, schedule.monday.off.hour, schedule.monday.off.min); 
*
1752:  CLRF   x61
1754:  MOVLW  53
1756:  MOVWF  x60
1758:  MOVFF  61,7F
175C:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
19A4:  MOVF   5F,W
19A6:  SUBLW  33
19A8:  BTFSC  FD8.2
19AA:  INCF   5E,F
....................          break; 
19AC:  GOTO   370C
....................       } 
....................       case 2: 
....................       { 
....................          clean(1); 
19B0:  MOVLW  01
19B2:  MOVWF  x87
19B4:  CALL   08C4
....................          printf(lcd_putc,"\a-MARTES-"); 
19B8:  MOVLW  84
19BA:  MOVWF  FF6
19BC:  MOVLW  01
19BE:  MOVWF  FF7
19C0:  CALL   08A4
....................          c = kbd_getc(); 
19C4:  CALL   07E8
19C8:  MOVFF  01,5F
....................          if (c == '1') --a; 
19CC:  MOVF   5F,W
19CE:  SUBLW  31
19D0:  BTFSC  FD8.2
19D2:  DECF   5E,F
....................          if (c == '2') 
19D4:  MOVF   5F,W
19D6:  SUBLW  32
19D8:  BTFSS  FD8.2
19DA:  BRA    1E80
....................          { 
....................             getHour(message1, schedule.tuesday.on.hour, schedule.tuesday.on.min); 
19DC:  CLRF   x61
19DE:  MOVLW  49
19E0:  MOVWF  x60
19E2:  MOVFF  61,7F
19E6:  MOVFF  60,7E
....................             getHour(message2, schedule.tuesday.off.hour, schedule.tuesday.off.min); 
*
1C2E:  CLRF   x61
1C30:  MOVLW  53
1C32:  MOVWF  x60
1C34:  MOVFF  61,7F
1C38:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
1E80:  MOVF   5F,W
1E82:  SUBLW  33
1E84:  BTFSC  FD8.2
1E86:  INCF   5E,F
....................          break; 
1E88:  GOTO   370C
....................       }   
....................       case 3: 
....................       { 
....................          clean(1); 
1E8C:  MOVLW  01
1E8E:  MOVWF  x87
1E90:  CALL   08C4
....................          printf(lcd_putc,"\a-MIERCOLES-"); 
1E94:  MOVLW  8E
1E96:  MOVWF  FF6
1E98:  MOVLW  01
1E9A:  MOVWF  FF7
1E9C:  CALL   08A4
....................          c = kbd_getc(); 
1EA0:  CALL   07E8
1EA4:  MOVFF  01,5F
....................          if (c == '1') --a; 
1EA8:  MOVF   5F,W
1EAA:  SUBLW  31
1EAC:  BTFSC  FD8.2
1EAE:  DECF   5E,F
....................          if (c == '2') 
1EB0:  MOVF   5F,W
1EB2:  SUBLW  32
1EB4:  BTFSS  FD8.2
1EB6:  BRA    235C
....................          { 
....................             getHour(message1, schedule.wednesday.on.hour, schedule.wednesday.on.min); 
1EB8:  CLRF   x61
1EBA:  MOVLW  49
1EBC:  MOVWF  x60
1EBE:  MOVFF  61,7F
1EC2:  MOVFF  60,7E
....................             getHour(message2, schedule.wednesday.off.hour, schedule.wednesday.off.min); 
*
210A:  CLRF   x61
210C:  MOVLW  53
210E:  MOVWF  x60
2110:  MOVFF  61,7F
2114:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
235C:  MOVF   5F,W
235E:  SUBLW  33
2360:  BTFSC  FD8.2
2362:  INCF   5E,F
....................          break; 
2364:  GOTO   370C
....................       } 
....................       case 4: 
....................       { 
....................          clean(1); 
2368:  MOVLW  01
236A:  MOVWF  x87
236C:  CALL   08C4
....................          printf(lcd_putc,"\a-JUEVES-"); 
2370:  MOVLW  9C
2372:  MOVWF  FF6
2374:  MOVLW  01
2376:  MOVWF  FF7
2378:  CALL   08A4
....................          c = kbd_getc(); 
237C:  CALL   07E8
2380:  MOVFF  01,5F
....................          if (c == '1') --a; 
2384:  MOVF   5F,W
2386:  SUBLW  31
2388:  BTFSC  FD8.2
238A:  DECF   5E,F
....................          if (c == '2') 
238C:  MOVF   5F,W
238E:  SUBLW  32
2390:  BTFSS  FD8.2
2392:  BRA    2838
....................          { 
....................             getHour(message1, schedule.thursday.on.hour, schedule.thursday.on.min); 
2394:  CLRF   x61
2396:  MOVLW  49
2398:  MOVWF  x60
239A:  MOVFF  61,7F
239E:  MOVFF  60,7E
....................             getHour(message2, schedule.thursday.off.hour, schedule.thursday.off.min); 
*
25E6:  CLRF   x61
25E8:  MOVLW  53
25EA:  MOVWF  x60
25EC:  MOVFF  61,7F
25F0:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
2838:  MOVF   5F,W
283A:  SUBLW  33
283C:  BTFSC  FD8.2
283E:  INCF   5E,F
....................          break; 
2840:  GOTO   370C
....................       } 
....................       case 5: 
....................       { 
....................          clean(1); 
2844:  MOVLW  01
2846:  MOVWF  x87
2848:  CALL   08C4
....................          printf(lcd_putc,"\a-VIERNES-"); 
284C:  MOVLW  A6
284E:  MOVWF  FF6
2850:  MOVLW  01
2852:  MOVWF  FF7
2854:  CALL   08A4
....................          c = kbd_getc(); 
2858:  CALL   07E8
285C:  MOVFF  01,5F
....................          if (c == '1') --a; 
2860:  MOVF   5F,W
2862:  SUBLW  31
2864:  BTFSC  FD8.2
2866:  DECF   5E,F
....................          if (c == '2') 
2868:  MOVF   5F,W
286A:  SUBLW  32
286C:  BTFSS  FD8.2
286E:  BRA    2D14
....................          { 
....................             getHour(message1, schedule.friday.on.hour, schedule.friday.on.min); 
2870:  CLRF   x61
2872:  MOVLW  49
2874:  MOVWF  x60
2876:  MOVFF  61,7F
287A:  MOVFF  60,7E
....................             getHour(message2, schedule.friday.off.hour, schedule.friday.off.min); 
*
2AC2:  CLRF   x61
2AC4:  MOVLW  53
2AC6:  MOVWF  x60
2AC8:  MOVFF  61,7F
2ACC:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
2D14:  MOVF   5F,W
2D16:  SUBLW  33
2D18:  BTFSC  FD8.2
2D1A:  INCF   5E,F
....................          break; 
2D1C:  GOTO   370C
....................       } 
....................       case 6: 
....................       { 
....................          clean(1); 
2D20:  MOVLW  01
2D22:  MOVWF  x87
2D24:  CALL   08C4
....................          printf(lcd_putc,"\a-SABADO-"); 
2D28:  MOVLW  B2
2D2A:  MOVWF  FF6
2D2C:  MOVLW  01
2D2E:  MOVWF  FF7
2D30:  CALL   08A4
....................          c = kbd_getc(); 
2D34:  CALL   07E8
2D38:  MOVFF  01,5F
....................          if (c == '1') --a; 
2D3C:  MOVF   5F,W
2D3E:  SUBLW  31
2D40:  BTFSC  FD8.2
2D42:  DECF   5E,F
....................          if (c == '2') 
2D44:  MOVF   5F,W
2D46:  SUBLW  32
2D48:  BTFSS  FD8.2
2D4A:  BRA    31F0
....................          { 
....................             getHour(message1, schedule.saturday.on.hour, schedule.saturday.on.min); 
2D4C:  CLRF   x61
2D4E:  MOVLW  49
2D50:  MOVWF  x60
2D52:  MOVFF  61,7F
2D56:  MOVFF  60,7E
....................             getHour(message2, schedule.saturday.off.hour, schedule.saturday.off.min); 
*
2F9E:  CLRF   x61
2FA0:  MOVLW  53
2FA2:  MOVWF  x60
2FA4:  MOVFF  61,7F
2FA8:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
31F0:  MOVF   5F,W
31F2:  SUBLW  33
31F4:  BTFSC  FD8.2
31F6:  INCF   5E,F
....................          break; 
31F8:  BRA    370C
....................       } 
....................       case 7: 
....................       { 
....................          clean(1); 
31FA:  MOVLW  01
31FC:  MOVWF  x87
31FE:  CALL   08C4
....................          printf(lcd_putc,"\a-DOMINGO-"); 
3202:  MOVLW  BC
3204:  MOVWF  FF6
3206:  MOVLW  01
3208:  MOVWF  FF7
320A:  CALL   08A4
....................          c = kbd_getc(); 
320E:  CALL   07E8
3212:  MOVFF  01,5F
....................          if (c == '1') --a; 
3216:  MOVF   5F,W
3218:  SUBLW  31
321A:  BTFSC  FD8.2
321C:  DECF   5E,F
....................          if (c == '2') 
321E:  MOVF   5F,W
3220:  SUBLW  32
3222:  BTFSS  FD8.2
3224:  BRA    36CA
....................          { 
....................             getHour(message1, schedule.sunday.on.hour, schedule.sunday.on.min); 
3226:  CLRF   x61
3228:  MOVLW  49
322A:  MOVWF  x60
322C:  MOVFF  61,7F
3230:  MOVFF  60,7E
....................             getHour(message2, schedule.sunday.off.hour, schedule.sunday.off.min); 
*
3478:  CLRF   x61
347A:  MOVLW  53
347C:  MOVWF  x60
347E:  MOVFF  61,7F
3482:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
36CA:  MOVF   5F,W
36CC:  SUBLW  33
36CE:  BTFSC  FD8.2
36D0:  INCF   5E,F
....................          break; 
36D2:  BRA    370C
....................       } 
....................       case 8: 
....................       { 
....................          clean(1); 
36D4:  MOVLW  01
36D6:  MOVWF  x87
36D8:  CALL   08C4
....................          printf(lcd_putc,"\a-EXIT CONFIG-"); 
36DC:  MOVLW  C8
36DE:  MOVWF  FF6
36E0:  MOVLW  01
36E2:  MOVWF  FF7
36E4:  CALL   08A4
....................          c = kbd_getc(); 
36E8:  CALL   07E8
36EC:  MOVFF  01,5F
....................          if (c == '1') --a; 
36F0:  MOVF   5F,W
36F2:  SUBLW  31
36F4:  BTFSC  FD8.2
36F6:  DECF   5E,F
....................          if (c == '2') a = 0; 
36F8:  MOVF   5F,W
36FA:  SUBLW  32
36FC:  BTFSC  FD8.2
36FE:  CLRF   5E
....................          if (c == '3') a = 1; 
3700:  MOVF   5F,W
3702:  SUBLW  33
3704:  BNZ   370A
3706:  MOVLW  01
3708:  MOVWF  5E
....................          break; 
370A:  BRA    370C
....................       } 
....................       } 
....................    } 
370C:  GOTO   148A
....................    eepromLoad(1,&schedule); 
3710:  MOVLW  01
3712:  MOVWF  x7C
3714:  CLRF   x7E
3716:  MOVLW  08
3718:  MOVWF  x7D
371A:  GOTO   118E
.................... } 
....................  
.................... void menu(Week& schedule) 
.................... { 
....................    clean(2); 
*
1372:  MOVLW  02
1374:  MOVWF  x87
1376:  CALL   08C4
....................    int a = 1; 
137A:  MOVLW  01
137C:  MOVWF  2B
....................    lcd_gotoxy (2,2);  
137E:  MOVLW  02
1380:  MOVWF  x8E
1382:  MOVWF  x8F
1384:  CALL   042C
....................    printf(lcd_putc "<   enter   >"); 
1388:  MOVLW  D8
138A:  MOVWF  FF6
138C:  MOVLW  01
138E:  MOVWF  FF7
1390:  CALL   08A4
....................    while (a!=0) 
....................    { 
1394:  MOVF   2B,F
1396:  BTFSC  FD8.2
1398:  GOTO   3764
....................       char c; 
....................       switch (a) 
....................       { 
139C:  MOVF   2B,W
139E:  XORLW  01
13A0:  BZ    13B2
13A2:  XORLW  03
13A4:  BZ    13EE
13A6:  XORLW  01
13A8:  BTFSC  FD8.2
13AA:  GOTO   3728
13AE:  GOTO   3760
....................       case 1: 
....................          clean(1); 
13B2:  MOVLW  01
13B4:  MOVWF  x87
13B6:  CALL   08C4
....................          printf(lcd_putc,"\a-CONFIG RELOJ-"); 
13BA:  MOVLW  E6
13BC:  MOVWF  FF6
13BE:  MOVLW  01
13C0:  MOVWF  FF7
13C2:  CALL   08A4
....................          c = kbd_getc(); 
13C6:  CALL   07E8
13CA:  MOVFF  01,2C
....................          if (c == '1') a=3; 
13CE:  MOVF   2C,W
13D0:  SUBLW  31
13D2:  BNZ   13D8
13D4:  MOVLW  03
13D6:  MOVWF  2B
....................          if (c == '2') configClock(); 
13D8:  MOVF   2C,W
13DA:  SUBLW  32
13DC:  BNZ   13E2
13DE:  GOTO   09DC
....................          if (c == '3') ++a; 
13E2:  MOVF   2C,W
13E4:  SUBLW  33
13E6:  BTFSC  FD8.2
13E8:  INCF   2B,F
....................          break; 
13EA:  GOTO   3760
....................        
....................       case 2: 
....................          clean(1); 
13EE:  MOVLW  01
13F0:  MOVWF  x87
13F2:  CALL   08C4
....................          printf(lcd_putc,"\a-CONFIG ON/OFF-"); 
13F6:  MOVLW  F6
13F8:  MOVWF  FF6
13FA:  MOVLW  01
13FC:  MOVWF  FF7
13FE:  CALL   08A4
....................          c = kbd_getc(); 
1402:  CALL   07E8
1406:  MOVFF  01,2C
....................          if (c == '1') --a; 
140A:  MOVF   2C,W
140C:  SUBLW  31
140E:  BTFSC  FD8.2
1410:  DECF   2B,F
....................          if (c == '2') configOnOff(schedule); 
1412:  MOVF   2C,W
1414:  SUBLW  32
1416:  BTFSS  FD8.2
1418:  GOTO   371E
....................          if (c == '3') ++a; 
*
371E:  MOVF   2C,W
3720:  SUBLW  33
3722:  BTFSC  FD8.2
3724:  INCF   2B,F
....................          break; 
3726:  BRA    3760
....................           
....................       case 3: 
....................          clean(1); 
3728:  MOVLW  01
372A:  MOVWF  x87
372C:  CALL   08C4
....................          printf(lcd_putc,"\a-EXIT-"); 
3730:  MOVLW  08
3732:  MOVWF  FF6
3734:  MOVLW  02
3736:  MOVWF  FF7
3738:  CALL   08A4
....................          c = kbd_getc(); 
373C:  CALL   07E8
3740:  MOVFF  01,2C
....................          if (c == '1') --a; 
3744:  MOVF   2C,W
3746:  SUBLW  31
3748:  BTFSC  FD8.2
374A:  DECF   2B,F
....................          if (c == '2') a = 0; 
374C:  MOVF   2C,W
374E:  SUBLW  32
3750:  BTFSC  FD8.2
3752:  CLRF   2B
....................          if (c == '3') a = 1; 
3754:  MOVF   2C,W
3756:  SUBLW  33
3758:  BNZ   375E
375A:  MOVLW  01
375C:  MOVWF  2B
....................          break;          
375E:  BRA    3760
....................       } 
....................    }   
3760:  GOTO   1394
.................... } 
....................  
....................  
.................... void main() 
.................... { 
*
11EE:  CLRF   FF8
11F0:  BCF    FD0.7
11F2:  CLRF   FEA
11F4:  CLRF   FE9
11F6:  MOVLW  60
11F8:  MOVWF  FD3
11FA:  MOVF   FD3,W
11FC:  MOVF   FC1,W
11FE:  ANDLW  C0
1200:  IORLW  0F
1202:  MOVWF  FC1
1204:  MOVLW  07
1206:  MOVWF  FB4
1208:  CLRF   04
120A:  BCF    05.0
120C:  CLRF   06
120E:  CLRF   07
....................  
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
1210:  MOVF   FC1,W
1212:  ANDLW  C0
1214:  IORLW  0F
1216:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_2); 
1218:  BCF    FC0.0
121A:  BCF    FC0.1
121C:  BCF    FC0.2
121E:  BCF    FC0.7
1220:  BSF    FC2.0
....................    //setup_pp(PMP_DISABLED); 
....................    setup_spi(SPI_SS_DISABLED); 
1222:  BCF    FC6.5
1224:  BCF    F94.7
1226:  BSF    F93.0
1228:  BCF    F93.1
122A:  MOVLW  01
122C:  MOVWF  FC6
122E:  MOVLW  00
1230:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
1232:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
1234:  MOVLW  80
1236:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
1238:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
123A:  MOVLW  00
123C:  MOVWF  FCA
123E:  MOVLW  00
1240:  MOVWF  FCB
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
1242:  CLRF   FB1
....................    setup_ccp1(CCP_OFF); 
1244:  BSF    F94.2
1246:  CLRF   FBD
1248:  CLRF   FB7
124A:  CLRF   FB6
....................    setup_comparator(NC_NC_NC_NC); 
124C:  MOVLW  07
124E:  MOVWF  FB4
1250:  MOVF   F92,W
1252:  MOVWF  F92
1254:  MOVLW  03
1256:  MOVWF  00
1258:  DECFSZ 00,F
125A:  BRA    1258
125C:  MOVF   FB4,W
125E:  BCF    FA1.6
....................    kbd_init(); 
1260:  GOTO   0210
....................    rtc_init(); 
1264:  GOTO   028C
....................    lcd_init(); 
1268:  GOTO   0366
....................    Week schedule; 
....................    BYTE hour,min,sec; 
....................    BYTE day,month,year,dow; 
....................    dataLoad(1,&schedule); 
126C:  MOVLW  01
126E:  MOVWF  2B
1270:  CLRF   2D
1272:  MOVLW  08
1274:  MOVWF  2C
1276:  GOTO   03B6
....................     while(true) 
....................     { 
....................       /// Obtain time from ds1302 
....................       rtc_get_time(hour, min, sec);  // Store time in hr, min, sec 
....................       rtc_get_date(day,month,year,dow); 
....................        
....................       /// Show time 
....................       lcd_gotoxy(5,1);             // Change cursor position on lcd 
*
1322:  MOVLW  05
1324:  MOVWF  x8E
1326:  MOVLW  01
1328:  MOVWF  x8F
132A:  CALL   042C
....................       showHour (hour,min,sec); 
132E:  MOVFF  24,2B
1332:  MOVFF  25,2C
1336:  MOVFF  26,2D
133A:  GOTO   0590
....................       lcd_gotoxy(3,2); 
133E:  MOVLW  03
1340:  MOVWF  x8E
1342:  MOVLW  02
1344:  MOVWF  x8F
1346:  CALL   042C
....................       showDate (day, month, year, dow);      
134A:  MOVFF  27,2B
134E:  MOVFF  28,2C
1352:  MOVFF  29,2D
1356:  MOVFF  2A,2E
135A:  GOTO   05DC
....................       printf(lcd_putc, "\a"); 
135E:  MOVLW  07
1360:  MOVWF  x8D
1362:  CALL   0476
....................        
....................       if (kbd_getc() !='\0')  
1366:  CALL   07E8
136A:  MOVF   01,F
136C:  BTFSC  FD8.2
136E:  GOTO   376C
....................       { 
....................          menu(schedule); 
....................          clean(2); 
*
3764:  MOVLW  02
3766:  MOVWF  x87
3768:  CALL   08C4
....................       } 
....................     } 
376C:  GOTO   127A
....................  
.................... } 
3770:  SLEEP 

Configuration Fuses:
   Word  1: C83F   INTRC_IO IESO FCMEN PLL12 CPUDIV4 USBDIV
   Word  2: 0E39   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 00A1   STVREN NODEBUG NOLVP NOXINST ICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
