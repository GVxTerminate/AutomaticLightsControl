CCS PCH C Compiler, Version 4.108, 19920               08-mar-17 22:03

               Filename: F:\project\Src\v1.0\main.lst

               ROM used: 14382 bytes (44%)
                         Largest free fragment is 18386
               RAM used: 9 (0%) at main() level
                         152 (7%) worst case
               Stack:    8 locations

*
0000:  GOTO   12AA
.................... #include <main.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO              	//Internal RC Osc, no CLKOUT 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                	//PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES MCLR                  	//Master Clear pin enabled 
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL12                 	//Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV4               	//System Clock by 4 
.................... #FUSES USBDIV                	//USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                	//USB voltage regulator enabled 
.................... #FUSES ICPRT                 	//ICPRT enabled 
....................  
.................... #use delay(int=4000000) 
*
02C4:  CLRF   FEA
02C6:  MOVLW  8E
02C8:  MOVWF  FE9
02CA:  MOVF   FEF,W
02CC:  BZ    02EA
02CE:  MOVLW  01
02D0:  MOVWF  01
02D2:  CLRF   00
02D4:  DECFSZ 00,F
02D6:  BRA    02D4
02D8:  DECFSZ 01,F
02DA:  BRA    02D2
02DC:  MOVLW  4A
02DE:  MOVWF  00
02E0:  DECFSZ 00,F
02E2:  BRA    02E0
02E4:  BRA    02E6
02E6:  DECFSZ FEF,F
02E8:  BRA    02CE
02EA:  RETLW  00
.................... #define RTC_RST   PIN_A0 
.................... #define RTC_SCLK   PIN_A1 
.................... #define RTC_IO   PIN_A2 
....................  
....................  
.................... #include "DS1302.C" 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef RTC_SCLK 
....................  
.................... #define RTC_SCLK PIN_B1 
.................... #define RTC_IO   PIN_B3 
.................... #define RTC_RST  PIN_B2 
....................  
.................... #endif 
....................  
.................... void write_ds1302_byte(BYTE cmd) { 
....................    BYTE i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
0214:  CLRF   x74
0216:  MOVF   x74,W
0218:  SUBLW  07
021A:  BNC   0236
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
021C:  BCF    FD8.0
021E:  RRCF   x73,F
0220:  BC    0226
0222:  BCF    F89.2
0224:  BRA    0228
0226:  BSF    F89.2
0228:  BCF    F92.2
....................       output_high(RTC_SCLK); 
022A:  BCF    F92.1
022C:  BSF    F89.1
....................       output_low(RTC_SCLK); 
022E:  BCF    F92.1
0230:  BCF    F89.1
....................    } 
0232:  INCF   x74,F
0234:  BRA    0216
.................... } 
0236:  RETLW  00
....................  
.................... void write_ds1302(BYTE cmd, BYTE data) { 
....................  
....................    output_high(RTC_RST); 
0238:  BCF    F92.0
023A:  BSF    F89.0
....................    write_ds1302_byte(cmd); 
023C:  MOVFF  71,73
0240:  RCALL  0214
....................    write_ds1302_byte(data); 
0242:  MOVFF  72,73
0246:  RCALL  0214
....................    output_low(RTC_RST); 
0248:  BCF    F92.0
024A:  BCF    F89.0
.................... } 
024C:  RETLW  00
....................  
.................... BYTE read_ds1302(BYTE cmd) { 
....................    BYTE i,data; 
....................  
....................    output_high(RTC_RST); 
024E:  BCF    F92.0
0250:  BSF    F89.0
....................    write_ds1302_byte(cmd); 
0252:  MOVFF  2F,73
0256:  RCALL  0214
....................     
....................    input(RTC_IO); 
0258:  BSF    F92.2
....................    delay_us(1); 
025A:  NOP   
....................           
....................    for(i=0;i<=7;++i) { 
025C:  CLRF   30
025E:  MOVF   30,W
0260:  SUBLW  07
0262:  BNC   0282
....................       shift_right(&data,1,input(RTC_IO)); 
0264:  BSF    F92.2
0266:  BTFSC  F80.2
0268:  BRA    026E
026A:  BCF    FD8.0
026C:  BRA    0270
026E:  BSF    FD8.0
0270:  RRCF   31,F
....................       output_high(RTC_SCLK); 
0272:  BCF    F92.1
0274:  BSF    F89.1
....................       delay_us(2); 
0276:  BRA    0278
....................       output_low(RTC_SCLK); 
0278:  BCF    F92.1
027A:  BCF    F89.1
....................       delay_us(2); 
027C:  BRA    027E
....................    } 
027E:  INCF   30,F
0280:  BRA    025E
....................    output_low(RTC_RST); 
0282:  BCF    F92.0
0284:  BCF    F89.0
....................  
....................    return(data); 
0286:  MOVFF  31,01
.................... } 
028A:  RETLW  00
....................  
.................... void rtc_init() { 
....................    BYTE x; 
....................    output_low(RTC_RST); 
028C:  BCF    F92.0
028E:  BCF    F89.0
....................    delay_us(2); 
0290:  BRA    0292
....................    output_low(RTC_SCLK); 
0292:  BCF    F92.1
0294:  BCF    F89.1
....................    write_ds1302(0x8e,0); 
0296:  MOVLW  8E
0298:  MOVWF  x71
029A:  CLRF   x72
029C:  RCALL  0238
....................    write_ds1302(0x90,0xa4); 
029E:  MOVLW  90
02A0:  MOVWF  x71
02A2:  MOVLW  A4
02A4:  MOVWF  x72
02A6:  RCALL  0238
....................    x=read_ds1302(0x81); 
02A8:  MOVLW  81
02AA:  MOVWF  2F
02AC:  RCALL  024E
02AE:  MOVFF  01,2B
....................    if((x & 0x80)!=0) 
02B2:  MOVF   2B,W
02B4:  ANDLW  80
02B6:  BZ    02C0
....................      write_ds1302(0x80,0); 
02B8:  MOVLW  80
02BA:  MOVWF  x71
02BC:  CLRF   x72
02BE:  RCALL  0238
.................... } 
02C0:  GOTO   1324 (RETURN)
....................  
.................... byte get_bcd(BYTE data) 
.................... { 
....................    byte nibh; 
....................    byte nibl; 
....................  
....................    nibh=data/10; 
*
09D6:  MOVFF  70,8D
09DA:  MOVLW  0A
09DC:  MOVWF  x8E
09DE:  RCALL  0502
09E0:  MOVFF  01,71
....................    nibl=data-(nibh*10); 
09E4:  MOVF   x71,W
09E6:  MULLW  0A
09E8:  MOVF   FF3,W
09EA:  SUBWF  x70,W
09EC:  MOVWF  x72
....................  
....................    return((nibh<<4)|nibl); 
09EE:  SWAPF  x71,W
09F0:  MOVWF  00
09F2:  MOVLW  F0
09F4:  ANDWF  00,F
09F6:  MOVF   00,W
09F8:  IORWF  x72,W
09FA:  MOVWF  01
.................... } 
09FC:  RETLW  00
....................  
.................... byte rm_bcd(BYTE data) 
.................... { 
....................    byte i; 
....................  
....................    i=data; 
*
04B2:  MOVFF  30,31
....................    data=(i>>4)*10; 
04B6:  SWAPF  31,W
04B8:  MOVWF  00
04BA:  MOVLW  0F
04BC:  ANDWF  00,F
04BE:  MOVF   00,W
04C0:  MULLW  0A
04C2:  MOVFF  FF3,30
....................    data=data+(i<<4>>4); 
04C6:  SWAPF  31,W
04C8:  MOVWF  00
04CA:  MOVLW  F0
04CC:  ANDWF  00,F
04CE:  MOVF   00,W
04D0:  SWAPF  00,F
04D2:  MOVLW  0F
04D4:  ANDWF  00,F
04D6:  MOVF   00,W
04D8:  ADDWF  30,F
....................  
....................    return data; 
04DA:  MOVFF  30,01
.................... } 
04DE:  RETLW  00
....................  
.................... void rtc_set_datetime(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
....................    write_ds1302(0x88,get_bcd(mth)); 
....................    write_ds1302(0x8c,get_bcd(year)); 
....................    write_ds1302(0x8a,get_bcd(dow)); 
....................    write_ds1302(0x84,get_bcd(hr)); 
....................    write_ds1302(0x82,get_bcd(min)); 
....................    write_ds1302(0x80,get_bcd(0)); 
.................... } 
....................  
.................... void rtc_set_date(BYTE day, BYTE mth, BYTE year, BYTE dow) { 
....................    write_ds1302(0x86,get_bcd(day)); 
*
0A3C:  MOVFF  6C,70
0A40:  RCALL  09D6
0A42:  MOVFF  01,70
0A46:  MOVLW  86
0A48:  MOVWF  x71
0A4A:  MOVFF  01,72
0A4E:  CALL   0238
....................    write_ds1302(0x88,get_bcd(mth)); 
0A52:  MOVFF  6D,70
0A56:  RCALL  09D6
0A58:  MOVFF  01,70
0A5C:  MOVLW  88
0A5E:  MOVWF  x71
0A60:  MOVFF  01,72
0A64:  CALL   0238
....................    write_ds1302(0x8c,get_bcd(year)); 
0A68:  MOVFF  6E,70
0A6C:  RCALL  09D6
0A6E:  MOVFF  01,70
0A72:  MOVLW  8C
0A74:  MOVWF  x71
0A76:  MOVFF  01,72
0A7A:  CALL   0238
....................    write_ds1302(0x8a,get_bcd(dow)); 
0A7E:  MOVFF  6F,70
0A82:  RCALL  09D6
0A84:  MOVFF  01,70
0A88:  MOVLW  8A
0A8A:  MOVWF  x71
0A8C:  MOVFF  01,72
0A90:  CALL   0238
.................... } 
0A94:  GOTO   1202 (RETURN)
....................  
.................... void rtc_set_time(BYTE hr, BYTE min) { 
....................    write_ds1302(0x84,get_bcd(hr)); 
*
09FE:  MOVFF  6C,70
0A02:  RCALL  09D6
0A04:  MOVFF  01,6E
0A08:  MOVLW  84
0A0A:  MOVWF  x71
0A0C:  MOVFF  01,72
0A10:  RCALL  0238
....................    write_ds1302(0x82,get_bcd(min)); 
0A12:  MOVFF  6D,70
0A16:  RCALL  09D6
0A18:  MOVFF  01,6E
0A1C:  MOVLW  82
0A1E:  MOVWF  x71
0A20:  MOVFF  01,72
0A24:  RCALL  0238
....................    write_ds1302(0x80,get_bcd(0)); 
0A26:  CLRF   x70
0A28:  RCALL  09D6
0A2A:  MOVFF  01,6E
0A2E:  MOVLW  80
0A30:  MOVWF  x71
0A32:  MOVFF  01,72
0A36:  RCALL  0238
.................... } 
0A38:  GOTO   0D48 (RETURN)
....................  
.................... void rtc_get_date(BYTE& day, BYTE& mth, BYTE& year, BYTE& dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
137E:  MOVLW  87
1380:  MOVWF  2F
1382:  CALL   024E
1386:  MOVFF  01,2B
138A:  MOVFF  01,30
138E:  CALL   04B2
1392:  MOVFF  01,27
....................    mth = rm_bcd(read_ds1302(0x89)); 
1396:  MOVLW  89
1398:  MOVWF  2F
139A:  CALL   024E
139E:  MOVFF  01,2B
13A2:  MOVFF  01,30
13A6:  CALL   04B2
13AA:  MOVFF  01,28
....................    year = rm_bcd(read_ds1302(0x8d)); 
13AE:  MOVLW  8D
13B0:  MOVWF  2F
13B2:  CALL   024E
13B6:  MOVFF  01,2B
13BA:  MOVFF  01,30
13BE:  CALL   04B2
13C2:  MOVFF  01,29
....................    dow = rm_bcd(read_ds1302(0x8b)); 
13C6:  MOVLW  8B
13C8:  MOVWF  2F
13CA:  CALL   024E
13CE:  MOVFF  01,2B
13D2:  MOVFF  01,30
13D6:  CALL   04B2
13DA:  MOVFF  01,2A
.................... } 
....................  
.................... void rtc_get_time(BYTE& hr, BYTE& min, BYTE& sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
*
1336:  MOVLW  85
1338:  MOVWF  2F
133A:  CALL   024E
133E:  MOVFF  01,2B
1342:  MOVFF  01,30
1346:  CALL   04B2
134A:  MOVFF  01,24
....................    min = rm_bcd(read_ds1302(0x83)); 
134E:  MOVLW  83
1350:  MOVWF  2F
1352:  CALL   024E
1356:  MOVFF  01,2B
135A:  MOVFF  01,30
135E:  CALL   04B2
1362:  MOVFF  01,25
....................    sec = rm_bcd(read_ds1302(0x81)); 
1366:  MOVLW  81
1368:  MOVWF  2F
136A:  CALL   024E
136E:  MOVFF  01,2B
1372:  MOVFF  01,30
1376:  CALL   04B2
137A:  MOVFF  01,26
.................... } 
....................  
.................... void rtc_write_nvr(BYTE address, BYTE data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... BYTE rtc_read_nvr(BYTE address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
.................... #include <Flex_KBD.c> 
.................... ///////////////////////////////////////////////////////////////////////////  
.................... ////                             Flex_KBD.C                            ////  
.................... ////                  Generic keypad scan driver                       ////  
.................... ////                                                                   ////  
.................... ////  kbd_init()   Must be called before any other function.           ////  
.................... ////                                                                   ////  
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not ////  
.................... ////                   This function should be called frequently so as ////  
.................... ////                   not to miss a key press.                        ////  
.................... ////                                                                   ////  
.................... ///////////////////////////////////////////////////////////////////////////  
....................  
....................  
....................  
.................... //Keypad connection:   
....................  
.................... #define col0 PIN_D4  
.................... #define col1 PIN_D5  
.................... #define col2 PIN_D6  
.................... #define row0 PIN_D0  
.................... #define row1 PIN_D1  
.................... #define row2 PIN_D2  
.................... #define row3 PIN_D3  
....................  
.................... // Keypad layout:  
.................... char const KEYS[4][3] = {{'1','2','3'},  
....................                          {'4','5','6'},  
....................                          {'7','8','9'},  
....................                          {'*','0','#'}};  
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where  
....................                                   // n is the number of times you expect  
....................                                   // to call kbd_getc each second  
....................  
....................  
....................  
.................... void kbd_init() {  
.................... }  
*
0210:  GOTO   1320 (RETURN)
....................  
....................  
.................... short int ALL_ROWS (void)  
.................... {  
....................    if (input (row0) & input (row1) & input (row2) & input (row3))  
*
0862:  BSF    F95.0
0864:  MOVLW  00
0866:  BTFSC  F83.0
0868:  MOVLW  01
086A:  MOVWF  x89
086C:  BSF    F95.1
086E:  MOVLW  00
0870:  BTFSC  F83.1
0872:  MOVLW  01
0874:  ANDWF  x89,F
0876:  BSF    F95.2
0878:  MOVLW  00
087A:  BTFSC  F83.2
087C:  MOVLW  01
087E:  ANDWF  x89,F
0880:  BSF    F95.3
0882:  MOVLW  00
0884:  BTFSC  F83.3
0886:  MOVLW  01
0888:  ANDWF  x89,W
088A:  BZ    0894
....................       return (0);  
088C:  MOVLW  00
088E:  MOVWF  01
0890:  BRA    089A
....................    else  
0892:  BRA    089A
....................       return (1);  
0894:  MOVLW  01
0896:  MOVWF  01
0898:  BRA    089A
.................... }  
089A:  RETLW  00
....................  
....................  
....................  
.................... char kbd_getc( ) {  
....................    static byte kbd_call_count;  
....................    static short int kbd_down;  
....................    static char last_key;  
....................    static byte col;  
....................  
....................    byte kchar;  
....................    byte row;  
....................  
....................    kchar='\0';  
089C:  CLRF   x87
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) {  
089E:  INCF   04,F
08A0:  MOVF   04,W
08A2:  SUBLW  21
08A4:  BC    0952
....................        switch (col) {  
08A6:  MOVF   07,W
08A8:  BZ    08B4
08AA:  XORLW  01
08AC:  BZ    08C2
08AE:  XORLW  03
08B0:  BZ    08D0
08B2:  BRA    08DE
....................          case 0   : output_low(col0);  
08B4:  BCF    F95.4
08B6:  BCF    F8C.4
....................                output_high(col1);  
08B8:  BCF    F95.5
08BA:  BSF    F8C.5
....................                output_high(col2);  
08BC:  BCF    F95.6
08BE:  BSF    F8C.6
....................                     break;  
08C0:  BRA    08DE
....................          case 1   : output_high(col0);  
08C2:  BCF    F95.4
08C4:  BSF    F8C.4
....................                output_low(col1);  
08C6:  BCF    F95.5
08C8:  BCF    F8C.5
....................                output_high(col2);  
08CA:  BCF    F95.6
08CC:  BSF    F8C.6
....................                     break;  
08CE:  BRA    08DE
....................          case 2   : output_high(col0);  
08D0:  BCF    F95.4
08D2:  BSF    F8C.4
....................                output_high(col1);  
08D4:  BCF    F95.5
08D6:  BSF    F8C.5
....................                output_low(col2);  
08D8:  BCF    F95.6
08DA:  BCF    F8C.6
....................                     break;  
08DC:  BRA    08DE
....................        }  
....................  
....................        if(kbd_down) {  
08DE:  BTFSS  05.0
08E0:  BRA    08F2
....................          if(!ALL_ROWS()) {  
08E2:  RCALL  0862
08E4:  MOVF   01,F
08E6:  BNZ   08F0
....................            kbd_down=false;  
08E8:  BCF    05.0
....................            kchar=last_key;  
08EA:  MOVFF  06,87
....................            last_key='\0';  
08EE:  CLRF   06
....................          }  
....................        } else {  
08F0:  BRA    0950
....................           if(ALL_ROWS()) {  
08F2:  RCALL  0862
08F4:  MOVF   01,F
08F6:  BZ    0946
....................              if(!input (row0))  
08F8:  BSF    F95.0
08FA:  BTFSC  F83.0
08FC:  BRA    0902
....................                row=0;  
08FE:  CLRF   x88
....................              else if(!input (row1))  
0900:  BRA    0924
0902:  BSF    F95.1
0904:  BTFSC  F83.1
0906:  BRA    090E
....................                row=1;  
0908:  MOVLW  01
090A:  MOVWF  x88
....................              else if(!input (row2))  
090C:  BRA    0924
090E:  BSF    F95.2
0910:  BTFSC  F83.2
0912:  BRA    091A
....................                row=2;  
0914:  MOVLW  02
0916:  MOVWF  x88
....................              else if(!input (row3))  
0918:  BRA    0924
091A:  BSF    F95.3
091C:  BTFSC  F83.3
091E:  BRA    0924
....................                row=3;  
0920:  MOVLW  03
0922:  MOVWF  x88
....................              last_key =KEYS[row][col];  
0924:  MOVF   x88,W
0926:  MULLW  03
0928:  MOVF   FF3,W
092A:  CLRF   x8A
092C:  MOVWF  x89
092E:  CLRF   03
0930:  MOVF   07,W
0932:  ADDWF  x89,W
0934:  MOVWF  01
0936:  MOVF   x8A,W
0938:  ADDWFC 03,F
093A:  MOVF   01,W
093C:  CALL   0004
0940:  MOVWF  06
....................              kbd_down = true;  
0942:  BSF    05.0
....................           } else {  
0944:  BRA    0950
....................              ++col;  
0946:  INCF   07,F
....................              if(col==3)  
0948:  MOVF   07,W
094A:  SUBLW  03
094C:  BNZ   0950
....................                col=0;  
094E:  CLRF   07
....................           }  
....................        }  
....................       kbd_call_count=0;  
0950:  CLRF   04
....................    }  
....................   return(kchar);  
0952:  MOVFF  87,01
.................... } 
0956:  RETLW  00
....................  
....................  
.................... //LCD Module Connections 
.................... #define LCD_ENABLE_PIN PIN_B1 
.................... #define LCD_RS_PIN PIN_B2 
.................... #define LCD_RW_PIN PIN_B3 
.................... #define LCD_DATA4 PIN_B4 
.................... #define LCD_DATA5 PIN_B5 
.................... #define LCD_DATA6 PIN_B6 
.................... #define LCD_DATA7 PIN_B7 
.................... //End LCD Module Connections 
.................... #include <LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
037C:  BSF    F93.4
....................    output_float(LCD_DATA5); 
037E:  BSF    F93.5
....................    output_float(LCD_DATA6); 
0380:  BSF    F93.6
....................    output_float(LCD_DATA7); 
0382:  BSF    F93.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0384:  BSF    F8A.3
0386:  BCF    F93.3
....................    delay_cycles(1); 
0388:  NOP   
....................    lcd_output_enable(1); 
038A:  BSF    F8A.1
038C:  BCF    F93.1
....................    delay_cycles(1); 
038E:  NOP   
....................    high = lcd_read_nibble(); 
0390:  RCALL  032A
0392:  MOVFF  01,95
....................        
....................    lcd_output_enable(0); 
0396:  BCF    F8A.1
0398:  BCF    F93.1
....................    delay_cycles(1); 
039A:  NOP   
....................    lcd_output_enable(1); 
039C:  BSF    F8A.1
039E:  BCF    F93.1
....................    delay_us(1); 
03A0:  NOP   
....................    low = lcd_read_nibble(); 
03A2:  RCALL  032A
03A4:  MOVFF  01,94
....................        
....................    lcd_output_enable(0); 
03A8:  BCF    F8A.1
03AA:  BCF    F93.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
03AC:  BCF    F93.4
....................    output_drive(LCD_DATA5); 
03AE:  BCF    F93.5
....................    output_drive(LCD_DATA6); 
03B0:  BCF    F93.6
....................    output_drive(LCD_DATA7); 
03B2:  BCF    F93.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
03B4:  SWAPF  x95,W
03B6:  MOVWF  00
03B8:  MOVLW  F0
03BA:  ANDWF  00,F
03BC:  MOVF   00,W
03BE:  IORWF  x94,W
03C0:  MOVWF  01
.................... } 
03C2:  GOTO   03D2 (RETURN)
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
032A:  CLRF   x96
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
032C:  BSF    F93.4
032E:  MOVLW  00
0330:  BTFSC  F81.4
0332:  MOVLW  01
0334:  IORWF  x96,F
....................    n |= input(LCD_DATA5) << 1; 
0336:  BSF    F93.5
0338:  MOVLW  00
033A:  BTFSC  F81.5
033C:  MOVLW  01
033E:  MOVWF  00
0340:  BCF    FD8.0
0342:  RLCF   00,F
0344:  MOVF   00,W
0346:  IORWF  x96,F
....................    n |= input(LCD_DATA6) << 2; 
0348:  BSF    F93.6
034A:  MOVLW  00
034C:  BTFSC  F81.6
034E:  MOVLW  01
0350:  MOVWF  00
0352:  RLCF   00,F
0354:  RLCF   00,F
0356:  MOVLW  FC
0358:  ANDWF  00,F
035A:  MOVF   00,W
035C:  IORWF  x96,F
....................    n |= input(LCD_DATA7) << 3; 
035E:  BSF    F93.7
0360:  MOVLW  00
0362:  BTFSC  F81.7
0364:  MOVLW  01
0366:  MOVWF  00
0368:  RLCF   00,F
036A:  RLCF   00,F
036C:  RLCF   00,F
036E:  MOVLW  F8
0370:  ANDWF  00,F
0372:  MOVF   00,W
0374:  IORWF  x96,F
....................     
....................    return(n); 
0376:  MOVFF  96,01
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
037A:  RETLW  00
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
02EC:  BTFSC  x95.0
02EE:  BRA    02F4
02F0:  BCF    F8A.4
02F2:  BRA    02F6
02F4:  BSF    F8A.4
02F6:  BCF    F93.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
02F8:  BTFSC  x95.1
02FA:  BRA    0300
02FC:  BCF    F8A.5
02FE:  BRA    0302
0300:  BSF    F8A.5
0302:  BCF    F93.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0304:  BTFSC  x95.2
0306:  BRA    030C
0308:  BCF    F8A.6
030A:  BRA    030E
030C:  BSF    F8A.6
030E:  BCF    F93.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0310:  BTFSC  x95.3
0312:  BRA    0318
0314:  BCF    F8A.7
0316:  BRA    031A
0318:  BSF    F8A.7
031A:  BCF    F93.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
031C:  NOP   
....................    lcd_output_enable(1); 
031E:  BSF    F8A.1
0320:  BCF    F93.1
....................    delay_us(2); 
0322:  BRA    0324
....................    lcd_output_enable(0); 
0324:  BCF    F8A.1
0326:  BCF    F93.1
.................... } 
0328:  RETLW  00
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
03C6:  BCF    F93.1
....................    lcd_rs_tris(); 
03C8:  BCF    F93.2
....................    lcd_rw_tris(); 
03CA:  BCF    F93.3
....................   #endif 
....................  
....................    lcd_output_rs(0); 
03CC:  BCF    F8A.2
03CE:  BCF    F93.2
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
03D0:  BRA    037C
03D2:  MOVFF  01,94
03D6:  BTFSC  01.7
03D8:  BRA    03D0
....................    lcd_output_rs(address); 
03DA:  MOVF   x92,F
03DC:  BNZ   03E2
03DE:  BCF    F8A.2
03E0:  BRA    03E4
03E2:  BSF    F8A.2
03E4:  BCF    F93.2
....................    delay_cycles(1); 
03E6:  NOP   
....................    lcd_output_rw(0); 
03E8:  BCF    F8A.3
03EA:  BCF    F93.3
....................    delay_cycles(1); 
03EC:  NOP   
....................    lcd_output_enable(0); 
03EE:  BCF    F8A.1
03F0:  BCF    F93.1
....................    lcd_send_nibble(n >> 4); 
03F2:  SWAPF  x93,W
03F4:  MOVWF  x94
03F6:  MOVLW  0F
03F8:  ANDWF  x94,F
03FA:  MOVFF  94,95
03FE:  RCALL  02EC
....................    lcd_send_nibble(n & 0xf); 
0400:  MOVF   x93,W
0402:  ANDLW  0F
0404:  MOVWF  x94
0406:  MOVWF  x95
0408:  RCALL  02EC
.................... } 
040A:  RETLW  00
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
040C:  BCF    F93.4
....................    output_drive(LCD_DATA5); 
040E:  BCF    F93.5
....................    output_drive(LCD_DATA6); 
0410:  BCF    F93.6
....................    output_drive(LCD_DATA7); 
0412:  BCF    F93.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0414:  BCF    F93.1
....................    lcd_rs_tris(); 
0416:  BCF    F93.2
....................    lcd_rw_tris(); 
0418:  BCF    F93.3
....................  #endif 
....................  
....................    lcd_output_rs(0); 
041A:  BCF    F8A.2
041C:  BCF    F93.2
....................    lcd_output_rw(0); 
041E:  BCF    F8A.3
0420:  BCF    F93.3
....................    lcd_output_enable(0); 
0422:  BCF    F8A.1
0424:  BCF    F93.1
....................      
....................    delay_ms(15); 
0426:  MOVLW  0F
0428:  MOVWF  x8E
042A:  RCALL  02C4
....................    for(i=1;i<=3;++i) 
042C:  MOVLW  01
042E:  MOVWF  2B
0430:  MOVF   2B,W
0432:  SUBLW  03
0434:  BNC   0446
....................    { 
....................        lcd_send_nibble(3); 
0436:  MOVLW  03
0438:  MOVWF  x95
043A:  RCALL  02EC
....................        delay_ms(5); 
043C:  MOVLW  05
043E:  MOVWF  x8E
0440:  RCALL  02C4
....................    } 
0442:  INCF   2B,F
0444:  BRA    0430
....................     
....................    lcd_send_nibble(2); 
0446:  MOVLW  02
0448:  MOVWF  x95
044A:  RCALL  02EC
....................    for(i=0;i<=3;++i) 
044C:  CLRF   2B
044E:  MOVF   2B,W
0450:  SUBLW  03
0452:  BNC   0466
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0454:  CLRF   03
0456:  MOVF   2B,W
0458:  RCALL  0020
045A:  MOVWF  2C
045C:  CLRF   x92
045E:  MOVWF  x93
0460:  RCALL  03C6
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0462:  INCF   2B,F
0464:  BRA    044E
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
0466:  GOTO   1328 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
*
04E0:  DECFSZ x8F,W
04E2:  BRA    04E6
04E4:  BRA    04EC
....................       address=LCD_LINE_TWO; 
04E6:  MOVLW  40
04E8:  MOVWF  x90
....................    else 
04EA:  BRA    04EE
....................       address=0; 
04EC:  CLRF   x90
....................       
....................    address+=x-1; 
04EE:  MOVLW  01
04F0:  SUBWF  x8E,W
04F2:  ADDWF  x90,F
....................    lcd_send_byte(0,0x80|address); 
04F4:  MOVF   x90,W
04F6:  IORLW  80
04F8:  MOVWF  x91
04FA:  CLRF   x92
04FC:  MOVWF  x93
04FE:  RCALL  03C6
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
0500:  RETLW  00
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
*
052A:  MOVF   x8D,W
052C:  XORLW  07
052E:  BZ    053E
0530:  XORLW  0B
0532:  BZ    0548
0534:  XORLW  06
0536:  BZ    0558
0538:  XORLW  02
053A:  BZ    0564
053C:  BRA    056E
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
053E:  MOVLW  01
0540:  MOVWF  x8E
0542:  MOVWF  x8F
0544:  RCALL  04E0
0546:  BRA    057A
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0548:  CLRF   x92
054A:  MOVLW  01
054C:  MOVWF  x93
054E:  RCALL  03C6
....................                      delay_ms(2); 
0550:  MOVLW  02
0552:  MOVWF  x8E
0554:  RCALL  02C4
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0556:  BRA    057A
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0558:  MOVLW  01
055A:  MOVWF  x8E
055C:  MOVLW  02
055E:  MOVWF  x8F
0560:  RCALL  04E0
0562:  BRA    057A
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0564:  CLRF   x92
0566:  MOVLW  10
0568:  MOVWF  x93
056A:  RCALL  03C6
056C:  BRA    057A
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
056E:  MOVLW  01
0570:  MOVWF  x92
0572:  MOVFF  8D,93
0576:  RCALL  03C6
0578:  BRA    057A
....................      #endif 
....................    } 
.................... } 
057A:  RETLW  00
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #include <menu.c> 
.................... typedef struct 
.................... { 
....................    BYTE hour,min; 
.................... }Hour; 
....................  
.................... typedef struct 
.................... { 
....................    Hour on; 
....................    Hour off; 
.................... }Day; 
....................  
.................... typedef struct 
.................... { 
....................    Day monday, tuesday, wednesday; 
....................    Day thursday, friday, saturday, sunday; 
.................... }Week; 
....................  
.................... void clean(int a) 
.................... { 
....................    if(a == 1 || a ==2) 
*
0978:  DECFSZ x87,W
097A:  BRA    097E
097C:  BRA    0984
097E:  MOVF   x87,W
0980:  SUBLW  02
0982:  BNZ   0996
....................    { 
....................       lcd_gotoxy(1,1); 
0984:  MOVLW  01
0986:  MOVWF  x8E
0988:  MOVWF  x8F
098A:  RCALL  04E0
....................       printf(lcd_putc,"                ");  
098C:  MOVLW  34
098E:  MOVWF  FF6
0990:  MOVLW  00
0992:  MOVWF  FF7
0994:  RCALL  0958
....................    } 
....................    if(a ==2) 
0996:  MOVF   x87,W
0998:  SUBLW  02
099A:  BNZ   09B0
....................    { 
....................       lcd_gotoxy(1,2); 
099C:  MOVLW  01
099E:  MOVWF  x8E
09A0:  MOVLW  02
09A2:  MOVWF  x8F
09A4:  RCALL  04E0
....................       printf(lcd_putc,"                "); 
09A6:  MOVLW  46
09A8:  MOVWF  FF6
09AA:  MOVLW  00
09AC:  MOVWF  FF7
09AE:  RCALL  0958
....................    } 
.................... } 
09B0:  RETLW  00
....................  
.................... void eepromLoad(BYTE addr,Week* schedule) 
.................... { 
*
124A:  MOVFF  7E,80
124E:  MOVFF  7D,7F
....................    BYTE *ptr = (BYTE*) schedule; 
....................    BYTE i; 
....................    for (i = 0; i < sizeof(schedule); i++) 
1252:  CLRF   x81
1254:  MOVF   x81,W
1256:  SUBLW  01
1258:  BNC   12A6
....................       write_eeprom (addr++, *(ptr++)); 
125A:  MOVF   x7C,W
125C:  INCF   x7C,F
125E:  MOVWF  x82
1260:  MOVF   x80,W
1262:  MOVWF  03
1264:  MOVF   x7F,W
1266:  INCF   x7F,F
1268:  BTFSC  FD8.2
126A:  INCF   x80,F
126C:  MOVWF  FE9
126E:  MOVFF  03,FEA
1272:  MOVFF  FEF,83
1276:  MOVFF  82,FA9
127A:  MOVFF  83,FA8
127E:  BCF    FA6.6
1280:  BCF    FA6.7
1282:  BSF    FA6.2
1284:  MOVF   FF2,W
1286:  MOVWF  00
1288:  BCF    FF2.7
128A:  MOVLB  F
128C:  MOVLW  55
128E:  MOVWF  FA7
1290:  MOVLW  AA
1292:  MOVWF  FA7
1294:  BSF    FA6.1
1296:  BTFSC  FA6.1
1298:  BRA    1296
129A:  BCF    FA6.2
129C:  MOVF   00,W
129E:  IORWF  FF2,F
12A0:  MOVLB  0
12A2:  INCF   x81,F
12A4:  BRA    1254
.................... } 
12A6:  GOTO   37DA (RETURN)
....................  
.................... void dataLoad (Byte addr,Week* schedule) 
.................... { 
*
046A:  MOVFF  2D,2F
046E:  MOVFF  2C,2E
....................    BYTE *ptr = (BYTE*) schedule; 
....................    BYTE i; 
....................    for (i = 0; i < sizeof(schedule); i++) 
0472:  CLRF   30
0474:  MOVF   30,W
0476:  SUBLW  01
0478:  BNC   04AE
....................       *(ptr++) = read_eeprom(addr++); 
047A:  MOVF   2F,W
047C:  MOVWF  03
047E:  MOVF   2E,W
0480:  INCF   2E,F
0482:  BTFSC  FD8.2
0484:  INCF   2F,F
0486:  MOVWF  FE9
0488:  MOVFF  03,FEA
048C:  MOVF   2B,W
048E:  INCF   2B,F
0490:  MOVWF  33
0492:  MOVFF  FF2,34
0496:  BCF    FF2.7
0498:  MOVFF  33,FA9
049C:  BCF    FA6.6
049E:  BCF    FA6.7
04A0:  BSF    FA6.0
04A2:  MOVF   FA8,W
04A4:  BTFSC  34.7
04A6:  BSF    FF2.7
04A8:  MOVWF  FEF
04AA:  INCF   30,F
04AC:  BRA    0474
.................... } 
04AE:  GOTO   1336 (RETURN)
....................  
....................  
.................... int concatenateAtoi(char& a, char& b) 
.................... { 
*
0CDA:  MOVLW  0A
0CDC:  MOVWF  x8A
*
0D0C:  MOVLW  0A
0D0E:  MOVWF  x8A
*
0EBE:  MOVLW  0A
0EC0:  MOVWF  x8A
*
0F96:  MOVLW  0A
0F98:  MOVWF  x8A
*
10EE:  MOVLW  0A
10F0:  MOVWF  x8A
*
17AA:  MOVLW  0A
17AC:  MOVWF  x8A
*
17DC:  MOVLW  0A
17DE:  MOVWF  x8A
*
19FC:  MOVLW  0A
19FE:  MOVWF  x8A
*
1A2E:  MOVLW  0A
1A30:  MOVWF  x8A
*
1C86:  MOVLW  0A
1C88:  MOVWF  x8A
*
1CB8:  MOVLW  0A
1CBA:  MOVWF  x8A
*
1ED8:  MOVLW  0A
1EDA:  MOVWF  x8A
*
1F0A:  MOVLW  0A
1F0C:  MOVWF  x8A
*
2162:  MOVLW  0A
2164:  MOVWF  x8A
*
2194:  MOVLW  0A
2196:  MOVWF  x8A
*
23B4:  MOVLW  0A
23B6:  MOVWF  x8A
*
23E6:  MOVLW  0A
23E8:  MOVWF  x8A
*
263E:  MOVLW  0A
2640:  MOVWF  x8A
*
2670:  MOVLW  0A
2672:  MOVWF  x8A
*
2890:  MOVLW  0A
2892:  MOVWF  x8A
*
28C2:  MOVLW  0A
28C4:  MOVWF  x8A
*
2B1A:  MOVLW  0A
2B1C:  MOVWF  x8A
*
2B4C:  MOVLW  0A
2B4E:  MOVWF  x8A
*
2D6C:  MOVLW  0A
2D6E:  MOVWF  x8A
*
2D9E:  MOVLW  0A
2DA0:  MOVWF  x8A
*
2FF6:  MOVLW  0A
2FF8:  MOVWF  x8A
*
3028:  MOVLW  0A
302A:  MOVWF  x8A
*
3248:  MOVLW  0A
324A:  MOVWF  x8A
*
327A:  MOVLW  0A
327C:  MOVWF  x8A
*
34D0:  MOVLW  0A
34D2:  MOVWF  x8A
*
3502:  MOVLW  0A
3504:  MOVWF  x8A
*
3722:  MOVLW  0A
3724:  MOVWF  x8A
*
3754:  MOVLW  0A
3756:  MOVWF  x8A
....................    int aI, bI, r, pow=10; 
....................    aI = a-'0'; 
*
0CDE:  MOVLW  30
0CE0:  SUBWF  x80,W
0CE2:  MOVWF  x87
*
0D10:  MOVLW  30
0D12:  SUBWF  x82,W
0D14:  MOVWF  x87
*
0EC2:  MOVLW  30
0EC4:  SUBWF  x70,W
0EC6:  MOVWF  x87
*
0F9A:  MOVLW  30
0F9C:  SUBWF  x70,W
0F9E:  MOVWF  x87
*
10F2:  MOVLW  30
10F4:  SUBWF  x70,W
10F6:  MOVWF  x87
*
17AE:  MOVLW  30
17B0:  SUBWF  x80,W
17B2:  MOVWF  x87
*
17E0:  MOVLW  30
17E2:  SUBWF  x82,W
17E4:  MOVWF  x87
*
1A00:  MOVLW  30
1A02:  SUBWF  x80,W
1A04:  MOVWF  x87
*
1A32:  MOVLW  30
1A34:  SUBWF  x82,W
1A36:  MOVWF  x87
*
1C8A:  MOVLW  30
1C8C:  SUBWF  x80,W
1C8E:  MOVWF  x87
*
1CBC:  MOVLW  30
1CBE:  SUBWF  x82,W
1CC0:  MOVWF  x87
*
1EDC:  MOVLW  30
1EDE:  SUBWF  x80,W
1EE0:  MOVWF  x87
*
1F0E:  MOVLW  30
1F10:  SUBWF  x82,W
1F12:  MOVWF  x87
*
2166:  MOVLW  30
2168:  SUBWF  x80,W
216A:  MOVWF  x87
*
2198:  MOVLW  30
219A:  SUBWF  x82,W
219C:  MOVWF  x87
*
23B8:  MOVLW  30
23BA:  SUBWF  x80,W
23BC:  MOVWF  x87
*
23EA:  MOVLW  30
23EC:  SUBWF  x82,W
23EE:  MOVWF  x87
*
2642:  MOVLW  30
2644:  SUBWF  x80,W
2646:  MOVWF  x87
*
2674:  MOVLW  30
2676:  SUBWF  x82,W
2678:  MOVWF  x87
*
2894:  MOVLW  30
2896:  SUBWF  x80,W
2898:  MOVWF  x87
*
28C6:  MOVLW  30
28C8:  SUBWF  x82,W
28CA:  MOVWF  x87
*
2B1E:  MOVLW  30
2B20:  SUBWF  x80,W
2B22:  MOVWF  x87
*
2B50:  MOVLW  30
2B52:  SUBWF  x82,W
2B54:  MOVWF  x87
*
2D70:  MOVLW  30
2D72:  SUBWF  x80,W
2D74:  MOVWF  x87
*
2DA2:  MOVLW  30
2DA4:  SUBWF  x82,W
2DA6:  MOVWF  x87
*
2FFA:  MOVLW  30
2FFC:  SUBWF  x80,W
2FFE:  MOVWF  x87
*
302C:  MOVLW  30
302E:  SUBWF  x82,W
3030:  MOVWF  x87
*
324C:  MOVLW  30
324E:  SUBWF  x80,W
3250:  MOVWF  x87
*
327E:  MOVLW  30
3280:  SUBWF  x82,W
3282:  MOVWF  x87
*
34D4:  MOVLW  30
34D6:  SUBWF  x80,W
34D8:  MOVWF  x87
*
3506:  MOVLW  30
3508:  SUBWF  x82,W
350A:  MOVWF  x87
*
3726:  MOVLW  30
3728:  SUBWF  x80,W
372A:  MOVWF  x87
*
3758:  MOVLW  30
375A:  SUBWF  x82,W
375C:  MOVWF  x87
....................    bI = b-'0'; 
*
0CE4:  MOVLW  30
0CE6:  SUBWF  x81,W
0CE8:  MOVWF  x88
*
0D16:  MOVLW  30
0D18:  SUBWF  x83,W
0D1A:  MOVWF  x88
*
0EC8:  MOVLW  30
0ECA:  SUBWF  x71,W
0ECC:  MOVWF  x88
*
0FA0:  MOVLW  30
0FA2:  SUBWF  x71,W
0FA4:  MOVWF  x88
*
10F8:  MOVLW  30
10FA:  SUBWF  x71,W
10FC:  MOVWF  x88
*
17B4:  MOVLW  30
17B6:  SUBWF  x81,W
17B8:  MOVWF  x88
*
17E6:  MOVLW  30
17E8:  SUBWF  x83,W
17EA:  MOVWF  x88
*
1A06:  MOVLW  30
1A08:  SUBWF  x81,W
1A0A:  MOVWF  x88
*
1A38:  MOVLW  30
1A3A:  SUBWF  x83,W
1A3C:  MOVWF  x88
*
1C90:  MOVLW  30
1C92:  SUBWF  x81,W
1C94:  MOVWF  x88
*
1CC2:  MOVLW  30
1CC4:  SUBWF  x83,W
1CC6:  MOVWF  x88
*
1EE2:  MOVLW  30
1EE4:  SUBWF  x81,W
1EE6:  MOVWF  x88
*
1F14:  MOVLW  30
1F16:  SUBWF  x83,W
1F18:  MOVWF  x88
*
216C:  MOVLW  30
216E:  SUBWF  x81,W
2170:  MOVWF  x88
*
219E:  MOVLW  30
21A0:  SUBWF  x83,W
21A2:  MOVWF  x88
*
23BE:  MOVLW  30
23C0:  SUBWF  x81,W
23C2:  MOVWF  x88
*
23F0:  MOVLW  30
23F2:  SUBWF  x83,W
23F4:  MOVWF  x88
*
2648:  MOVLW  30
264A:  SUBWF  x81,W
264C:  MOVWF  x88
*
267A:  MOVLW  30
267C:  SUBWF  x83,W
267E:  MOVWF  x88
*
289A:  MOVLW  30
289C:  SUBWF  x81,W
289E:  MOVWF  x88
*
28CC:  MOVLW  30
28CE:  SUBWF  x83,W
28D0:  MOVWF  x88
*
2B24:  MOVLW  30
2B26:  SUBWF  x81,W
2B28:  MOVWF  x88
*
2B56:  MOVLW  30
2B58:  SUBWF  x83,W
2B5A:  MOVWF  x88
*
2D76:  MOVLW  30
2D78:  SUBWF  x81,W
2D7A:  MOVWF  x88
*
2DA8:  MOVLW  30
2DAA:  SUBWF  x83,W
2DAC:  MOVWF  x88
*
3000:  MOVLW  30
3002:  SUBWF  x81,W
3004:  MOVWF  x88
*
3032:  MOVLW  30
3034:  SUBWF  x83,W
3036:  MOVWF  x88
*
3252:  MOVLW  30
3254:  SUBWF  x81,W
3256:  MOVWF  x88
*
3284:  MOVLW  30
3286:  SUBWF  x83,W
3288:  MOVWF  x88
*
34DA:  MOVLW  30
34DC:  SUBWF  x81,W
34DE:  MOVWF  x88
*
350C:  MOVLW  30
350E:  SUBWF  x83,W
3510:  MOVWF  x88
*
372C:  MOVLW  30
372E:  SUBWF  x81,W
3730:  MOVWF  x88
*
375E:  MOVLW  30
3760:  SUBWF  x83,W
3762:  MOVWF  x88
....................    while(bI >= pow) 
....................       pow *= 10; 
*
0CEA:  MOVF   x8A,W
0CEC:  SUBWF  x88,W
0CEE:  BNC   0CFA
0CF0:  MOVF   x8A,W
0CF2:  MULLW  0A
0CF4:  MOVFF  FF3,8A
0CF8:  BRA    0CEA
*
0D1C:  MOVF   x8A,W
0D1E:  SUBWF  x88,W
0D20:  BNC   0D2C
0D22:  MOVF   x8A,W
0D24:  MULLW  0A
0D26:  MOVFF  FF3,8A
0D2A:  BRA    0D1C
*
0ECE:  MOVF   x8A,W
0ED0:  SUBWF  x88,W
0ED2:  BNC   0EDE
0ED4:  MOVF   x8A,W
0ED6:  MULLW  0A
0ED8:  MOVFF  FF3,8A
0EDC:  BRA    0ECE
*
0FA6:  MOVF   x8A,W
0FA8:  SUBWF  x88,W
0FAA:  BNC   0FB6
0FAC:  MOVF   x8A,W
0FAE:  MULLW  0A
0FB0:  MOVFF  FF3,8A
0FB4:  BRA    0FA6
*
10FE:  MOVF   x8A,W
1100:  SUBWF  x88,W
1102:  BNC   110E
1104:  MOVF   x8A,W
1106:  MULLW  0A
1108:  MOVFF  FF3,8A
110C:  BRA    10FE
*
17BA:  MOVF   x8A,W
17BC:  SUBWF  x88,W
17BE:  BNC   17CA
17C0:  MOVF   x8A,W
17C2:  MULLW  0A
17C4:  MOVFF  FF3,8A
17C8:  BRA    17BA
*
17EC:  MOVF   x8A,W
17EE:  SUBWF  x88,W
17F0:  BNC   17FC
17F2:  MOVF   x8A,W
17F4:  MULLW  0A
17F6:  MOVFF  FF3,8A
17FA:  BRA    17EC
*
1A0C:  MOVF   x8A,W
1A0E:  SUBWF  x88,W
1A10:  BNC   1A1C
1A12:  MOVF   x8A,W
1A14:  MULLW  0A
1A16:  MOVFF  FF3,8A
1A1A:  BRA    1A0C
*
1A3E:  MOVF   x8A,W
1A40:  SUBWF  x88,W
1A42:  BNC   1A4E
1A44:  MOVF   x8A,W
1A46:  MULLW  0A
1A48:  MOVFF  FF3,8A
1A4C:  BRA    1A3E
*
1C96:  MOVF   x8A,W
1C98:  SUBWF  x88,W
1C9A:  BNC   1CA6
1C9C:  MOVF   x8A,W
1C9E:  MULLW  0A
1CA0:  MOVFF  FF3,8A
1CA4:  BRA    1C96
*
1CC8:  MOVF   x8A,W
1CCA:  SUBWF  x88,W
1CCC:  BNC   1CD8
1CCE:  MOVF   x8A,W
1CD0:  MULLW  0A
1CD2:  MOVFF  FF3,8A
1CD6:  BRA    1CC8
*
1EE8:  MOVF   x8A,W
1EEA:  SUBWF  x88,W
1EEC:  BNC   1EF8
1EEE:  MOVF   x8A,W
1EF0:  MULLW  0A
1EF2:  MOVFF  FF3,8A
1EF6:  BRA    1EE8
*
1F1A:  MOVF   x8A,W
1F1C:  SUBWF  x88,W
1F1E:  BNC   1F2A
1F20:  MOVF   x8A,W
1F22:  MULLW  0A
1F24:  MOVFF  FF3,8A
1F28:  BRA    1F1A
*
2172:  MOVF   x8A,W
2174:  SUBWF  x88,W
2176:  BNC   2182
2178:  MOVF   x8A,W
217A:  MULLW  0A
217C:  MOVFF  FF3,8A
2180:  BRA    2172
*
21A4:  MOVF   x8A,W
21A6:  SUBWF  x88,W
21A8:  BNC   21B4
21AA:  MOVF   x8A,W
21AC:  MULLW  0A
21AE:  MOVFF  FF3,8A
21B2:  BRA    21A4
*
23C4:  MOVF   x8A,W
23C6:  SUBWF  x88,W
23C8:  BNC   23D4
23CA:  MOVF   x8A,W
23CC:  MULLW  0A
23CE:  MOVFF  FF3,8A
23D2:  BRA    23C4
*
23F6:  MOVF   x8A,W
23F8:  SUBWF  x88,W
23FA:  BNC   2406
23FC:  MOVF   x8A,W
23FE:  MULLW  0A
2400:  MOVFF  FF3,8A
2404:  BRA    23F6
*
264E:  MOVF   x8A,W
2650:  SUBWF  x88,W
2652:  BNC   265E
2654:  MOVF   x8A,W
2656:  MULLW  0A
2658:  MOVFF  FF3,8A
265C:  BRA    264E
*
2680:  MOVF   x8A,W
2682:  SUBWF  x88,W
2684:  BNC   2690
2686:  MOVF   x8A,W
2688:  MULLW  0A
268A:  MOVFF  FF3,8A
268E:  BRA    2680
*
28A0:  MOVF   x8A,W
28A2:  SUBWF  x88,W
28A4:  BNC   28B0
28A6:  MOVF   x8A,W
28A8:  MULLW  0A
28AA:  MOVFF  FF3,8A
28AE:  BRA    28A0
*
28D2:  MOVF   x8A,W
28D4:  SUBWF  x88,W
28D6:  BNC   28E2
28D8:  MOVF   x8A,W
28DA:  MULLW  0A
28DC:  MOVFF  FF3,8A
28E0:  BRA    28D2
*
2B2A:  MOVF   x8A,W
2B2C:  SUBWF  x88,W
2B2E:  BNC   2B3A
2B30:  MOVF   x8A,W
2B32:  MULLW  0A
2B34:  MOVFF  FF3,8A
2B38:  BRA    2B2A
*
2B5C:  MOVF   x8A,W
2B5E:  SUBWF  x88,W
2B60:  BNC   2B6C
2B62:  MOVF   x8A,W
2B64:  MULLW  0A
2B66:  MOVFF  FF3,8A
2B6A:  BRA    2B5C
*
2D7C:  MOVF   x8A,W
2D7E:  SUBWF  x88,W
2D80:  BNC   2D8C
2D82:  MOVF   x8A,W
2D84:  MULLW  0A
2D86:  MOVFF  FF3,8A
2D8A:  BRA    2D7C
*
2DAE:  MOVF   x8A,W
2DB0:  SUBWF  x88,W
2DB2:  BNC   2DBE
2DB4:  MOVF   x8A,W
2DB6:  MULLW  0A
2DB8:  MOVFF  FF3,8A
2DBC:  BRA    2DAE
*
3006:  MOVF   x8A,W
3008:  SUBWF  x88,W
300A:  BNC   3016
300C:  MOVF   x8A,W
300E:  MULLW  0A
3010:  MOVFF  FF3,8A
3014:  BRA    3006
*
3038:  MOVF   x8A,W
303A:  SUBWF  x88,W
303C:  BNC   3048
303E:  MOVF   x8A,W
3040:  MULLW  0A
3042:  MOVFF  FF3,8A
3046:  BRA    3038
*
3258:  MOVF   x8A,W
325A:  SUBWF  x88,W
325C:  BNC   3268
325E:  MOVF   x8A,W
3260:  MULLW  0A
3262:  MOVFF  FF3,8A
3266:  BRA    3258
*
328A:  MOVF   x8A,W
328C:  SUBWF  x88,W
328E:  BNC   329A
3290:  MOVF   x8A,W
3292:  MULLW  0A
3294:  MOVFF  FF3,8A
3298:  BRA    328A
*
34E0:  MOVF   x8A,W
34E2:  SUBWF  x88,W
34E4:  BNC   34F0
34E6:  MOVF   x8A,W
34E8:  MULLW  0A
34EA:  MOVFF  FF3,8A
34EE:  BRA    34E0
*
3512:  MOVF   x8A,W
3514:  SUBWF  x88,W
3516:  BNC   3522
3518:  MOVF   x8A,W
351A:  MULLW  0A
351C:  MOVFF  FF3,8A
3520:  BRA    3512
*
3732:  MOVF   x8A,W
3734:  SUBWF  x88,W
3736:  BNC   3742
3738:  MOVF   x8A,W
373A:  MULLW  0A
373C:  MOVFF  FF3,8A
3740:  BRA    3732
*
3764:  MOVF   x8A,W
3766:  SUBWF  x88,W
3768:  BNC   3774
376A:  MOVF   x8A,W
376C:  MULLW  0A
376E:  MOVFF  FF3,8A
3772:  BRA    3764
....................    r = aI*pow+bI; 
*
0CFA:  MOVF   x87,W
0CFC:  MULWF  x8A
0CFE:  MOVF   FF3,W
0D00:  ADDWF  x88,W
0D02:  MOVWF  x89
*
0D2C:  MOVF   x87,W
0D2E:  MULWF  x8A
0D30:  MOVF   FF3,W
0D32:  ADDWF  x88,W
0D34:  MOVWF  x89
*
0EDE:  MOVF   x87,W
0EE0:  MULWF  x8A
0EE2:  MOVF   FF3,W
0EE4:  ADDWF  x88,W
0EE6:  MOVWF  x89
*
0FB6:  MOVF   x87,W
0FB8:  MULWF  x8A
0FBA:  MOVF   FF3,W
0FBC:  ADDWF  x88,W
0FBE:  MOVWF  x89
*
110E:  MOVF   x87,W
1110:  MULWF  x8A
1112:  MOVF   FF3,W
1114:  ADDWF  x88,W
1116:  MOVWF  x89
*
17CA:  MOVF   x87,W
17CC:  MULWF  x8A
17CE:  MOVF   FF3,W
17D0:  ADDWF  x88,W
17D2:  MOVWF  x89
*
17FC:  MOVF   x87,W
17FE:  MULWF  x8A
1800:  MOVF   FF3,W
1802:  ADDWF  x88,W
1804:  MOVWF  x89
*
1A1C:  MOVF   x87,W
1A1E:  MULWF  x8A
1A20:  MOVF   FF3,W
1A22:  ADDWF  x88,W
1A24:  MOVWF  x89
*
1A4E:  MOVF   x87,W
1A50:  MULWF  x8A
1A52:  MOVF   FF3,W
1A54:  ADDWF  x88,W
1A56:  MOVWF  x89
*
1CA6:  MOVF   x87,W
1CA8:  MULWF  x8A
1CAA:  MOVF   FF3,W
1CAC:  ADDWF  x88,W
1CAE:  MOVWF  x89
*
1CD8:  MOVF   x87,W
1CDA:  MULWF  x8A
1CDC:  MOVF   FF3,W
1CDE:  ADDWF  x88,W
1CE0:  MOVWF  x89
*
1EF8:  MOVF   x87,W
1EFA:  MULWF  x8A
1EFC:  MOVF   FF3,W
1EFE:  ADDWF  x88,W
1F00:  MOVWF  x89
*
1F2A:  MOVF   x87,W
1F2C:  MULWF  x8A
1F2E:  MOVF   FF3,W
1F30:  ADDWF  x88,W
1F32:  MOVWF  x89
*
2182:  MOVF   x87,W
2184:  MULWF  x8A
2186:  MOVF   FF3,W
2188:  ADDWF  x88,W
218A:  MOVWF  x89
*
21B4:  MOVF   x87,W
21B6:  MULWF  x8A
21B8:  MOVF   FF3,W
21BA:  ADDWF  x88,W
21BC:  MOVWF  x89
*
23D4:  MOVF   x87,W
23D6:  MULWF  x8A
23D8:  MOVF   FF3,W
23DA:  ADDWF  x88,W
23DC:  MOVWF  x89
*
2406:  MOVF   x87,W
2408:  MULWF  x8A
240A:  MOVF   FF3,W
240C:  ADDWF  x88,W
240E:  MOVWF  x89
*
265E:  MOVF   x87,W
2660:  MULWF  x8A
2662:  MOVF   FF3,W
2664:  ADDWF  x88,W
2666:  MOVWF  x89
*
2690:  MOVF   x87,W
2692:  MULWF  x8A
2694:  MOVF   FF3,W
2696:  ADDWF  x88,W
2698:  MOVWF  x89
*
28B0:  MOVF   x87,W
28B2:  MULWF  x8A
28B4:  MOVF   FF3,W
28B6:  ADDWF  x88,W
28B8:  MOVWF  x89
*
28E2:  MOVF   x87,W
28E4:  MULWF  x8A
28E6:  MOVF   FF3,W
28E8:  ADDWF  x88,W
28EA:  MOVWF  x89
*
2B3A:  MOVF   x87,W
2B3C:  MULWF  x8A
2B3E:  MOVF   FF3,W
2B40:  ADDWF  x88,W
2B42:  MOVWF  x89
*
2B6C:  MOVF   x87,W
2B6E:  MULWF  x8A
2B70:  MOVF   FF3,W
2B72:  ADDWF  x88,W
2B74:  MOVWF  x89
*
2D8C:  MOVF   x87,W
2D8E:  MULWF  x8A
2D90:  MOVF   FF3,W
2D92:  ADDWF  x88,W
2D94:  MOVWF  x89
*
2DBE:  MOVF   x87,W
2DC0:  MULWF  x8A
2DC2:  MOVF   FF3,W
2DC4:  ADDWF  x88,W
2DC6:  MOVWF  x89
*
3016:  MOVF   x87,W
3018:  MULWF  x8A
301A:  MOVF   FF3,W
301C:  ADDWF  x88,W
301E:  MOVWF  x89
*
3048:  MOVF   x87,W
304A:  MULWF  x8A
304C:  MOVF   FF3,W
304E:  ADDWF  x88,W
3050:  MOVWF  x89
*
3268:  MOVF   x87,W
326A:  MULWF  x8A
326C:  MOVF   FF3,W
326E:  ADDWF  x88,W
3270:  MOVWF  x89
*
329A:  MOVF   x87,W
329C:  MULWF  x8A
329E:  MOVF   FF3,W
32A0:  ADDWF  x88,W
32A2:  MOVWF  x89
*
34F0:  MOVF   x87,W
34F2:  MULWF  x8A
34F4:  MOVF   FF3,W
34F6:  ADDWF  x88,W
34F8:  MOVWF  x89
*
3522:  MOVF   x87,W
3524:  MULWF  x8A
3526:  MOVF   FF3,W
3528:  ADDWF  x88,W
352A:  MOVWF  x89
*
3742:  MOVF   x87,W
3744:  MULWF  x8A
3746:  MOVF   FF3,W
3748:  ADDWF  x88,W
374A:  MOVWF  x89
*
3774:  MOVF   x87,W
3776:  MULWF  x8A
3778:  MOVF   FF3,W
377A:  ADDWF  x88,W
377C:  MOVWF  x89
....................    return (r); 
*
0D04:  MOVFF  89,01
*
0D36:  MOVFF  89,01
*
0EE8:  MOVFF  89,01
*
0FC0:  MOVFF  89,01
*
1118:  MOVFF  89,01
*
17D4:  MOVFF  89,01
*
1806:  MOVFF  89,01
*
1A26:  MOVFF  89,01
*
1A58:  MOVFF  89,01
*
1CB0:  MOVFF  89,01
*
1CE2:  MOVFF  89,01
*
1F02:  MOVFF  89,01
*
1F34:  MOVFF  89,01
*
218C:  MOVFF  89,01
*
21BE:  MOVFF  89,01
*
23DE:  MOVFF  89,01
*
2410:  MOVFF  89,01
*
2668:  MOVFF  89,01
*
269A:  MOVFF  89,01
*
28BA:  MOVFF  89,01
*
28EC:  MOVFF  89,01
*
2B44:  MOVFF  89,01
*
2B76:  MOVFF  89,01
*
2D96:  MOVFF  89,01
*
2DC8:  MOVFF  89,01
*
3020:  MOVFF  89,01
*
3052:  MOVFF  89,01
*
3272:  MOVFF  89,01
*
32A4:  MOVFF  89,01
*
34FA:  MOVFF  89,01
*
352C:  MOVFF  89,01
*
374C:  MOVFF  89,01
*
377E:  MOVFF  89,01
.................... } 
....................  
.................... void showHour(BYTE hr, BYTE min, BYTE sec) 
.................... { 
....................    printf(lcd_putc, "%02d:%02d:%02d",hr,min,sec); 
*
0644:  MOVFF  2B,87
0648:  MOVLW  01
064A:  MOVWF  x88
064C:  RCALL  057C
064E:  MOVLW  3A
0650:  MOVWF  x8D
0652:  RCALL  052A
0654:  MOVFF  2C,87
0658:  MOVLW  01
065A:  MOVWF  x88
065C:  RCALL  057C
065E:  MOVLW  3A
0660:  MOVWF  x8D
0662:  RCALL  052A
0664:  MOVFF  2D,87
0668:  MOVLW  01
066A:  MOVWF  x88
066C:  RCALL  057C
.................... } 
066E:  GOTO   13FA (RETURN)
....................  
.................... void showDate (BYTE day, BYTE month, BYTE year, BYTE dow) 
.................... { 
....................    switch (dow) 
....................    { 
*
0690:  MOVLW  01
0692:  SUBWF  2E,W
0694:  ADDLW  F9
0696:  BTFSC  FD8.0
0698:  BRA    0836
069A:  ADDLW  07
069C:  GOTO   083A
....................       case 1: 
....................          printf(lcd_putc, "%02d/%02d/%02d DOM",day,month,year); 
06A0:  MOVFF  2B,87
06A4:  MOVLW  01
06A6:  MOVWF  x88
06A8:  RCALL  057C
06AA:  MOVLW  2F
06AC:  MOVWF  x8D
06AE:  RCALL  052A
06B0:  MOVFF  2C,87
06B4:  MOVLW  01
06B6:  MOVWF  x88
06B8:  RCALL  057C
06BA:  MOVLW  2F
06BC:  MOVWF  x8D
06BE:  RCALL  052A
06C0:  MOVFF  2D,87
06C4:  MOVLW  01
06C6:  MOVWF  x88
06C8:  RCALL  057C
06CA:  MOVLW  66
06CC:  MOVWF  FF6
06CE:  MOVLW  00
06D0:  MOVWF  FF7
06D2:  MOVLW  04
06D4:  MOVWF  x87
06D6:  RCALL  0672
....................          break; 
06D8:  BRA    0836
....................       case 2: 
....................          printf(lcd_putc, "%02d/%02d/%02d LUN",day,month,year); 
06DA:  MOVFF  2B,87
06DE:  MOVLW  01
06E0:  MOVWF  x88
06E2:  RCALL  057C
06E4:  MOVLW  2F
06E6:  MOVWF  x8D
06E8:  RCALL  052A
06EA:  MOVFF  2C,87
06EE:  MOVLW  01
06F0:  MOVWF  x88
06F2:  RCALL  057C
06F4:  MOVLW  2F
06F6:  MOVWF  x8D
06F8:  RCALL  052A
06FA:  MOVFF  2D,87
06FE:  MOVLW  01
0700:  MOVWF  x88
0702:  RCALL  057C
0704:  MOVLW  7A
0706:  MOVWF  FF6
0708:  MOVLW  00
070A:  MOVWF  FF7
070C:  MOVLW  04
070E:  MOVWF  x87
0710:  RCALL  0672
....................          break; 
0712:  BRA    0836
....................       case 3: 
....................          printf(lcd_putc, "%02d/%02d/%02d MAR",day,month,year); 
0714:  MOVFF  2B,87
0718:  MOVLW  01
071A:  MOVWF  x88
071C:  RCALL  057C
071E:  MOVLW  2F
0720:  MOVWF  x8D
0722:  RCALL  052A
0724:  MOVFF  2C,87
0728:  MOVLW  01
072A:  MOVWF  x88
072C:  RCALL  057C
072E:  MOVLW  2F
0730:  MOVWF  x8D
0732:  RCALL  052A
0734:  MOVFF  2D,87
0738:  MOVLW  01
073A:  MOVWF  x88
073C:  RCALL  057C
073E:  MOVLW  8E
0740:  MOVWF  FF6
0742:  MOVLW  00
0744:  MOVWF  FF7
0746:  MOVLW  04
0748:  MOVWF  x87
074A:  RCALL  0672
....................          break; 
074C:  BRA    0836
....................       case 4: 
....................          printf(lcd_putc, "%02d/%02d/%02d MIE",day,month,year); 
074E:  MOVFF  2B,87
0752:  MOVLW  01
0754:  MOVWF  x88
0756:  RCALL  057C
0758:  MOVLW  2F
075A:  MOVWF  x8D
075C:  RCALL  052A
075E:  MOVFF  2C,87
0762:  MOVLW  01
0764:  MOVWF  x88
0766:  RCALL  057C
0768:  MOVLW  2F
076A:  MOVWF  x8D
076C:  RCALL  052A
076E:  MOVFF  2D,87
0772:  MOVLW  01
0774:  MOVWF  x88
0776:  RCALL  057C
0778:  MOVLW  A2
077A:  MOVWF  FF6
077C:  MOVLW  00
077E:  MOVWF  FF7
0780:  MOVLW  04
0782:  MOVWF  x87
0784:  RCALL  0672
....................          break; 
0786:  BRA    0836
....................       case 5: 
....................          printf(lcd_putc, "%02d/%02d/%02d JUE",day,month,year); 
0788:  MOVFF  2B,87
078C:  MOVLW  01
078E:  MOVWF  x88
0790:  RCALL  057C
0792:  MOVLW  2F
0794:  MOVWF  x8D
0796:  RCALL  052A
0798:  MOVFF  2C,87
079C:  MOVLW  01
079E:  MOVWF  x88
07A0:  RCALL  057C
07A2:  MOVLW  2F
07A4:  MOVWF  x8D
07A6:  RCALL  052A
07A8:  MOVFF  2D,87
07AC:  MOVLW  01
07AE:  MOVWF  x88
07B0:  RCALL  057C
07B2:  MOVLW  B6
07B4:  MOVWF  FF6
07B6:  MOVLW  00
07B8:  MOVWF  FF7
07BA:  MOVLW  04
07BC:  MOVWF  x87
07BE:  RCALL  0672
....................          break; 
07C0:  BRA    0836
....................       case 6: 
....................          printf(lcd_putc, "%02d/%02d/%02d VIE",day,month,year); 
07C2:  MOVFF  2B,87
07C6:  MOVLW  01
07C8:  MOVWF  x88
07CA:  RCALL  057C
07CC:  MOVLW  2F
07CE:  MOVWF  x8D
07D0:  RCALL  052A
07D2:  MOVFF  2C,87
07D6:  MOVLW  01
07D8:  MOVWF  x88
07DA:  RCALL  057C
07DC:  MOVLW  2F
07DE:  MOVWF  x8D
07E0:  RCALL  052A
07E2:  MOVFF  2D,87
07E6:  MOVLW  01
07E8:  MOVWF  x88
07EA:  RCALL  057C
07EC:  MOVLW  CA
07EE:  MOVWF  FF6
07F0:  MOVLW  00
07F2:  MOVWF  FF7
07F4:  MOVLW  04
07F6:  MOVWF  x87
07F8:  RCALL  0672
....................          break; 
07FA:  BRA    0836
....................       case 7: 
....................          printf(lcd_putc, "%02d/%02d/%02d SAB",day,month,year); 
07FC:  MOVFF  2B,87
0800:  MOVLW  01
0802:  MOVWF  x88
0804:  RCALL  057C
0806:  MOVLW  2F
0808:  MOVWF  x8D
080A:  RCALL  052A
080C:  MOVFF  2C,87
0810:  MOVLW  01
0812:  MOVWF  x88
0814:  RCALL  057C
0816:  MOVLW  2F
0818:  MOVWF  x8D
081A:  RCALL  052A
081C:  MOVFF  2D,87
0820:  MOVLW  01
0822:  MOVWF  x88
0824:  RCALL  057C
0826:  MOVLW  DE
0828:  MOVWF  FF6
082A:  MOVLW  00
082C:  MOVWF  FF7
082E:  MOVLW  04
0830:  MOVWF  x87
0832:  RCALL  0672
....................          break; 
0834:  BRA    0836
....................    } 
.................... } 
0836:  GOTO   141A (RETURN)
....................  
.................... void getHour(char message[],BYTE& hr, BYTE& min) 
.................... { 
*
0B3C:  CLRF   x84
*
15CA:  CLRF   x84
*
181C:  CLRF   x84
*
1AA6:  CLRF   x84
*
1CF8:  CLRF   x84
*
1F82:  CLRF   x84
*
21D4:  CLRF   x84
*
245E:  CLRF   x84
*
26B0:  CLRF   x84
*
293A:  CLRF   x84
*
2B8C:  CLRF   x84
*
2E16:  CLRF   x84
*
3068:  CLRF   x84
*
32F0:  CLRF   x84
*
3542:  CLRF   x84
....................    char h[2]; 
....................    char m[2];  
....................    char con = '\0'; 
....................    clean(2); 
*
0B3E:  MOVLW  02
0B40:  MOVWF  x87
0B42:  RCALL  0978
*
15CC:  MOVLW  02
15CE:  MOVWF  x87
15D0:  CALL   0978
*
181E:  MOVLW  02
1820:  MOVWF  x87
1822:  CALL   0978
*
1AA8:  MOVLW  02
1AAA:  MOVWF  x87
1AAC:  CALL   0978
*
1CFA:  MOVLW  02
1CFC:  MOVWF  x87
1CFE:  CALL   0978
*
1F84:  MOVLW  02
1F86:  MOVWF  x87
1F88:  CALL   0978
*
21D6:  MOVLW  02
21D8:  MOVWF  x87
21DA:  CALL   0978
*
2460:  MOVLW  02
2462:  MOVWF  x87
2464:  CALL   0978
*
26B2:  MOVLW  02
26B4:  MOVWF  x87
26B6:  CALL   0978
*
293C:  MOVLW  02
293E:  MOVWF  x87
2940:  CALL   0978
*
2B8E:  MOVLW  02
2B90:  MOVWF  x87
2B92:  CALL   0978
*
2E18:  MOVLW  02
2E1A:  MOVWF  x87
2E1C:  CALL   0978
*
306A:  MOVLW  02
306C:  MOVWF  x87
306E:  CALL   0978
*
32F2:  MOVLW  02
32F4:  MOVWF  x87
32F6:  CALL   0978
*
3544:  MOVLW  02
3546:  MOVWF  x87
3548:  CALL   0978
....................    printf (lcd_putc,"\a%s",message); 
*
0B44:  MOVLW  07
0B46:  MOVWF  x8D
0B48:  RCALL  052A
0B4A:  MOVFF  7F,FEA
0B4E:  MOVFF  7E,FE9
0B52:  RCALL  09B2
*
15D4:  MOVLW  07
15D6:  MOVWF  x8D
15D8:  CALL   052A
15DC:  MOVFF  7F,FEA
15E0:  MOVFF  7E,FE9
15E4:  CALL   09B2
*
1826:  MOVLW  07
1828:  MOVWF  x8D
182A:  CALL   052A
182E:  MOVFF  7F,FEA
1832:  MOVFF  7E,FE9
1836:  CALL   09B2
*
1AB0:  MOVLW  07
1AB2:  MOVWF  x8D
1AB4:  CALL   052A
1AB8:  MOVFF  7F,FEA
1ABC:  MOVFF  7E,FE9
1AC0:  CALL   09B2
*
1D02:  MOVLW  07
1D04:  MOVWF  x8D
1D06:  CALL   052A
1D0A:  MOVFF  7F,FEA
1D0E:  MOVFF  7E,FE9
1D12:  CALL   09B2
*
1F8C:  MOVLW  07
1F8E:  MOVWF  x8D
1F90:  CALL   052A
1F94:  MOVFF  7F,FEA
1F98:  MOVFF  7E,FE9
1F9C:  CALL   09B2
*
21DE:  MOVLW  07
21E0:  MOVWF  x8D
21E2:  CALL   052A
21E6:  MOVFF  7F,FEA
21EA:  MOVFF  7E,FE9
21EE:  CALL   09B2
*
2468:  MOVLW  07
246A:  MOVWF  x8D
246C:  CALL   052A
2470:  MOVFF  7F,FEA
2474:  MOVFF  7E,FE9
2478:  CALL   09B2
*
26BA:  MOVLW  07
26BC:  MOVWF  x8D
26BE:  CALL   052A
26C2:  MOVFF  7F,FEA
26C6:  MOVFF  7E,FE9
26CA:  CALL   09B2
*
2944:  MOVLW  07
2946:  MOVWF  x8D
2948:  CALL   052A
294C:  MOVFF  7F,FEA
2950:  MOVFF  7E,FE9
2954:  CALL   09B2
*
2B96:  MOVLW  07
2B98:  MOVWF  x8D
2B9A:  CALL   052A
2B9E:  MOVFF  7F,FEA
2BA2:  MOVFF  7E,FE9
2BA6:  CALL   09B2
*
2E20:  MOVLW  07
2E22:  MOVWF  x8D
2E24:  CALL   052A
2E28:  MOVFF  7F,FEA
2E2C:  MOVFF  7E,FE9
2E30:  CALL   09B2
*
3072:  MOVLW  07
3074:  MOVWF  x8D
3076:  CALL   052A
307A:  MOVFF  7F,FEA
307E:  MOVFF  7E,FE9
3082:  CALL   09B2
*
32FA:  MOVLW  07
32FC:  MOVWF  x8D
32FE:  CALL   052A
3302:  MOVFF  7F,FEA
3306:  MOVFF  7E,FE9
330A:  CALL   09B2
*
354C:  MOVLW  07
354E:  MOVWF  x8D
3550:  CALL   052A
3554:  MOVFF  7F,FEA
3558:  MOVFF  7E,FE9
355C:  CALL   09B2
....................    lcd_gotoxy (5,2); 
*
0B54:  MOVLW  05
0B56:  MOVWF  x8E
0B58:  MOVLW  02
0B5A:  MOVWF  x8F
0B5C:  RCALL  04E0
*
15E8:  MOVLW  05
15EA:  MOVWF  x8E
15EC:  MOVLW  02
15EE:  MOVWF  x8F
15F0:  CALL   04E0
*
183A:  MOVLW  05
183C:  MOVWF  x8E
183E:  MOVLW  02
1840:  MOVWF  x8F
1842:  CALL   04E0
*
1AC4:  MOVLW  05
1AC6:  MOVWF  x8E
1AC8:  MOVLW  02
1ACA:  MOVWF  x8F
1ACC:  CALL   04E0
*
1D16:  MOVLW  05
1D18:  MOVWF  x8E
1D1A:  MOVLW  02
1D1C:  MOVWF  x8F
1D1E:  CALL   04E0
*
1FA0:  MOVLW  05
1FA2:  MOVWF  x8E
1FA4:  MOVLW  02
1FA6:  MOVWF  x8F
1FA8:  CALL   04E0
*
21F2:  MOVLW  05
21F4:  MOVWF  x8E
21F6:  MOVLW  02
21F8:  MOVWF  x8F
21FA:  CALL   04E0
*
247C:  MOVLW  05
247E:  MOVWF  x8E
2480:  MOVLW  02
2482:  MOVWF  x8F
2484:  CALL   04E0
*
26CE:  MOVLW  05
26D0:  MOVWF  x8E
26D2:  MOVLW  02
26D4:  MOVWF  x8F
26D6:  CALL   04E0
*
2958:  MOVLW  05
295A:  MOVWF  x8E
295C:  MOVLW  02
295E:  MOVWF  x8F
2960:  CALL   04E0
*
2BAA:  MOVLW  05
2BAC:  MOVWF  x8E
2BAE:  MOVLW  02
2BB0:  MOVWF  x8F
2BB2:  CALL   04E0
*
2E34:  MOVLW  05
2E36:  MOVWF  x8E
2E38:  MOVLW  02
2E3A:  MOVWF  x8F
2E3C:  CALL   04E0
*
3086:  MOVLW  05
3088:  MOVWF  x8E
308A:  MOVLW  02
308C:  MOVWF  x8F
308E:  CALL   04E0
*
330E:  MOVLW  05
3310:  MOVWF  x8E
3312:  MOVLW  02
3314:  MOVWF  x8F
3316:  CALL   04E0
*
3560:  MOVLW  05
3562:  MOVWF  x8E
3564:  MOVLW  02
3566:  MOVWF  x8F
3568:  CALL   04E0
....................    if(hr==0 && min == 0)printf (lcd_putc,"HH:MM"); 
*
0B5E:  MOVF   49,F
0B60:  BNZ   0B72
0B62:  MOVF   4A,F
0B64:  BNZ   0B72
0B66:  MOVLW  E4
0B68:  MOVWF  FF6
0B6A:  MOVLW  00
0B6C:  MOVWF  FF7
0B6E:  RCALL  0958
*
15F4:  MOVF   08,F
15F6:  BNZ   160A
15F8:  MOVF   09,F
15FA:  BNZ   160A
15FC:  MOVLW  E4
15FE:  MOVWF  FF6
1600:  MOVLW  00
1602:  MOVWF  FF7
1604:  CALL   0958
*
1846:  MOVF   0A,F
1848:  BNZ   185C
184A:  MOVF   0B,F
184C:  BNZ   185C
184E:  MOVLW  E4
1850:  MOVWF  FF6
1852:  MOVLW  00
1854:  MOVWF  FF7
1856:  CALL   0958
*
1AD0:  MOVF   0C,F
1AD2:  BNZ   1AE6
1AD4:  MOVF   0D,F
1AD6:  BNZ   1AE6
1AD8:  MOVLW  E4
1ADA:  MOVWF  FF6
1ADC:  MOVLW  00
1ADE:  MOVWF  FF7
1AE0:  CALL   0958
*
1D22:  MOVF   0E,F
1D24:  BNZ   1D38
1D26:  MOVF   0F,F
1D28:  BNZ   1D38
1D2A:  MOVLW  E4
1D2C:  MOVWF  FF6
1D2E:  MOVLW  00
1D30:  MOVWF  FF7
1D32:  CALL   0958
*
1FAC:  MOVF   10,F
1FAE:  BNZ   1FC2
1FB0:  MOVF   11,F
1FB2:  BNZ   1FC2
1FB4:  MOVLW  E4
1FB6:  MOVWF  FF6
1FB8:  MOVLW  00
1FBA:  MOVWF  FF7
1FBC:  CALL   0958
*
21FE:  MOVF   12,F
2200:  BNZ   2214
2202:  MOVF   13,F
2204:  BNZ   2214
2206:  MOVLW  E4
2208:  MOVWF  FF6
220A:  MOVLW  00
220C:  MOVWF  FF7
220E:  CALL   0958
*
2488:  MOVF   14,F
248A:  BNZ   249E
248C:  MOVF   15,F
248E:  BNZ   249E
2490:  MOVLW  E4
2492:  MOVWF  FF6
2494:  MOVLW  00
2496:  MOVWF  FF7
2498:  CALL   0958
*
26DA:  MOVF   16,F
26DC:  BNZ   26F0
26DE:  MOVF   17,F
26E0:  BNZ   26F0
26E2:  MOVLW  E4
26E4:  MOVWF  FF6
26E6:  MOVLW  00
26E8:  MOVWF  FF7
26EA:  CALL   0958
*
2964:  MOVF   18,F
2966:  BNZ   297A
2968:  MOVF   19,F
296A:  BNZ   297A
296C:  MOVLW  E4
296E:  MOVWF  FF6
2970:  MOVLW  00
2972:  MOVWF  FF7
2974:  CALL   0958
*
2BB6:  MOVF   1A,F
2BB8:  BNZ   2BCC
2BBA:  MOVF   1B,F
2BBC:  BNZ   2BCC
2BBE:  MOVLW  E4
2BC0:  MOVWF  FF6
2BC2:  MOVLW  00
2BC4:  MOVWF  FF7
2BC6:  CALL   0958
*
2E40:  MOVF   1C,F
2E42:  BNZ   2E56
2E44:  MOVF   1D,F
2E46:  BNZ   2E56
2E48:  MOVLW  E4
2E4A:  MOVWF  FF6
2E4C:  MOVLW  00
2E4E:  MOVWF  FF7
2E50:  CALL   0958
*
3092:  MOVF   1E,F
3094:  BNZ   30A8
3096:  MOVF   1F,F
3098:  BNZ   30A8
309A:  MOVLW  E4
309C:  MOVWF  FF6
309E:  MOVLW  00
30A0:  MOVWF  FF7
30A2:  CALL   0958
*
331A:  MOVF   20,F
331C:  BNZ   3330
331E:  MOVF   21,F
3320:  BNZ   3330
3322:  MOVLW  E4
3324:  MOVWF  FF6
3326:  MOVLW  00
3328:  MOVWF  FF7
332A:  CALL   0958
*
356C:  MOVF   22,F
356E:  BNZ   3582
3570:  MOVF   23,F
3572:  BNZ   3582
3574:  MOVLW  E4
3576:  MOVWF  FF6
3578:  MOVLW  00
357A:  MOVWF  FF7
357C:  CALL   0958
....................    else printf (lcd_putc,"%02d:%02d",hr,min); 
*
0B70:  BRA    0B8C
0B72:  MOVFF  49,87
0B76:  MOVLW  01
0B78:  MOVWF  x88
0B7A:  RCALL  057C
0B7C:  MOVLW  3A
0B7E:  MOVWF  x8D
0B80:  RCALL  052A
0B82:  MOVFF  4A,87
0B86:  MOVLW  01
0B88:  MOVWF  x88
0B8A:  RCALL  057C
*
1608:  BRA    162A
160A:  MOVFF  08,87
160E:  MOVLW  01
1610:  MOVWF  x88
1612:  CALL   057C
1616:  MOVLW  3A
1618:  MOVWF  x8D
161A:  CALL   052A
161E:  MOVFF  09,87
1622:  MOVLW  01
1624:  MOVWF  x88
1626:  CALL   057C
*
185A:  BRA    187C
185C:  MOVFF  0A,87
1860:  MOVLW  01
1862:  MOVWF  x88
1864:  CALL   057C
1868:  MOVLW  3A
186A:  MOVWF  x8D
186C:  CALL   052A
1870:  MOVFF  0B,87
1874:  MOVLW  01
1876:  MOVWF  x88
1878:  CALL   057C
*
1AE4:  BRA    1B06
1AE6:  MOVFF  0C,87
1AEA:  MOVLW  01
1AEC:  MOVWF  x88
1AEE:  CALL   057C
1AF2:  MOVLW  3A
1AF4:  MOVWF  x8D
1AF6:  CALL   052A
1AFA:  MOVFF  0D,87
1AFE:  MOVLW  01
1B00:  MOVWF  x88
1B02:  CALL   057C
*
1D36:  BRA    1D58
1D38:  MOVFF  0E,87
1D3C:  MOVLW  01
1D3E:  MOVWF  x88
1D40:  CALL   057C
1D44:  MOVLW  3A
1D46:  MOVWF  x8D
1D48:  CALL   052A
1D4C:  MOVFF  0F,87
1D50:  MOVLW  01
1D52:  MOVWF  x88
1D54:  CALL   057C
*
1FC0:  BRA    1FE2
1FC2:  MOVFF  10,87
1FC6:  MOVLW  01
1FC8:  MOVWF  x88
1FCA:  CALL   057C
1FCE:  MOVLW  3A
1FD0:  MOVWF  x8D
1FD2:  CALL   052A
1FD6:  MOVFF  11,87
1FDA:  MOVLW  01
1FDC:  MOVWF  x88
1FDE:  CALL   057C
*
2212:  BRA    2234
2214:  MOVFF  12,87
2218:  MOVLW  01
221A:  MOVWF  x88
221C:  CALL   057C
2220:  MOVLW  3A
2222:  MOVWF  x8D
2224:  CALL   052A
2228:  MOVFF  13,87
222C:  MOVLW  01
222E:  MOVWF  x88
2230:  CALL   057C
*
249C:  BRA    24BE
249E:  MOVFF  14,87
24A2:  MOVLW  01
24A4:  MOVWF  x88
24A6:  CALL   057C
24AA:  MOVLW  3A
24AC:  MOVWF  x8D
24AE:  CALL   052A
24B2:  MOVFF  15,87
24B6:  MOVLW  01
24B8:  MOVWF  x88
24BA:  CALL   057C
*
26EE:  BRA    2710
26F0:  MOVFF  16,87
26F4:  MOVLW  01
26F6:  MOVWF  x88
26F8:  CALL   057C
26FC:  MOVLW  3A
26FE:  MOVWF  x8D
2700:  CALL   052A
2704:  MOVFF  17,87
2708:  MOVLW  01
270A:  MOVWF  x88
270C:  CALL   057C
*
2978:  BRA    299A
297A:  MOVFF  18,87
297E:  MOVLW  01
2980:  MOVWF  x88
2982:  CALL   057C
2986:  MOVLW  3A
2988:  MOVWF  x8D
298A:  CALL   052A
298E:  MOVFF  19,87
2992:  MOVLW  01
2994:  MOVWF  x88
2996:  CALL   057C
*
2BCA:  BRA    2BEC
2BCC:  MOVFF  1A,87
2BD0:  MOVLW  01
2BD2:  MOVWF  x88
2BD4:  CALL   057C
2BD8:  MOVLW  3A
2BDA:  MOVWF  x8D
2BDC:  CALL   052A
2BE0:  MOVFF  1B,87
2BE4:  MOVLW  01
2BE6:  MOVWF  x88
2BE8:  CALL   057C
*
2E54:  BRA    2E76
2E56:  MOVFF  1C,87
2E5A:  MOVLW  01
2E5C:  MOVWF  x88
2E5E:  CALL   057C
2E62:  MOVLW  3A
2E64:  MOVWF  x8D
2E66:  CALL   052A
2E6A:  MOVFF  1D,87
2E6E:  MOVLW  01
2E70:  MOVWF  x88
2E72:  CALL   057C
*
30A6:  BRA    30C8
30A8:  MOVFF  1E,87
30AC:  MOVLW  01
30AE:  MOVWF  x88
30B0:  CALL   057C
30B4:  MOVLW  3A
30B6:  MOVWF  x8D
30B8:  CALL   052A
30BC:  MOVFF  1F,87
30C0:  MOVLW  01
30C2:  MOVWF  x88
30C4:  CALL   057C
*
332E:  BRA    3350
3330:  MOVFF  20,87
3334:  MOVLW  01
3336:  MOVWF  x88
3338:  CALL   057C
333C:  MOVLW  3A
333E:  MOVWF  x8D
3340:  CALL   052A
3344:  MOVFF  21,87
3348:  MOVLW  01
334A:  MOVWF  x88
334C:  CALL   057C
*
3580:  BRA    35A2
3582:  MOVFF  22,87
3586:  MOVLW  01
3588:  MOVWF  x88
358A:  CALL   057C
358E:  MOVLW  3A
3590:  MOVWF  x8D
3592:  CALL   052A
3596:  MOVFF  23,87
359A:  MOVLW  01
359C:  MOVWF  x88
359E:  CALL   057C
....................    do 
....................    { 
....................       con = kbd_getc(); 
*
0B8C:  RCALL  089C
0B8E:  MOVFF  01,84
*
162A:  CALL   089C
162E:  MOVFF  01,84
*
187C:  CALL   089C
1880:  MOVFF  01,84
*
1B06:  CALL   089C
1B0A:  MOVFF  01,84
*
1D58:  CALL   089C
1D5C:  MOVFF  01,84
*
1FE2:  CALL   089C
1FE6:  MOVFF  01,84
*
2234:  CALL   089C
2238:  MOVFF  01,84
*
24BE:  CALL   089C
24C2:  MOVFF  01,84
*
2710:  CALL   089C
2714:  MOVFF  01,84
*
299A:  CALL   089C
299E:  MOVFF  01,84
*
2BEC:  CALL   089C
2BF0:  MOVFF  01,84
*
2E76:  CALL   089C
2E7A:  MOVFF  01,84
*
30C8:  CALL   089C
30CC:  MOVFF  01,84
*
3350:  CALL   089C
3354:  MOVFF  01,84
*
35A2:  CALL   089C
35A6:  MOVFF  01,84
....................       ((con >= '0') && (con <= '2'))? (h[0]=con) :(con='\0');  
*
0B92:  MOVF   x84,W
0B94:  SUBLW  2F
0B96:  BC    0BA6
0B98:  MOVF   x84,W
0B9A:  SUBLW  32
0B9C:  BNC   0BA6
0B9E:  MOVFF  84,80
0BA2:  MOVF   x80,W
0BA4:  BRA    0BA8
0BA6:  CLRF   x84
*
1632:  MOVF   x84,W
1634:  SUBLW  2F
1636:  BC    1646
1638:  MOVF   x84,W
163A:  SUBLW  32
163C:  BNC   1646
163E:  MOVFF  84,80
1642:  MOVF   x80,W
1644:  BRA    1648
1646:  CLRF   x84
*
1884:  MOVF   x84,W
1886:  SUBLW  2F
1888:  BC    1898
188A:  MOVF   x84,W
188C:  SUBLW  32
188E:  BNC   1898
1890:  MOVFF  84,80
1894:  MOVF   x80,W
1896:  BRA    189A
1898:  CLRF   x84
*
1B0E:  MOVF   x84,W
1B10:  SUBLW  2F
1B12:  BC    1B22
1B14:  MOVF   x84,W
1B16:  SUBLW  32
1B18:  BNC   1B22
1B1A:  MOVFF  84,80
1B1E:  MOVF   x80,W
1B20:  BRA    1B24
1B22:  CLRF   x84
*
1D60:  MOVF   x84,W
1D62:  SUBLW  2F
1D64:  BC    1D74
1D66:  MOVF   x84,W
1D68:  SUBLW  32
1D6A:  BNC   1D74
1D6C:  MOVFF  84,80
1D70:  MOVF   x80,W
1D72:  BRA    1D76
1D74:  CLRF   x84
*
1FEA:  MOVF   x84,W
1FEC:  SUBLW  2F
1FEE:  BC    1FFE
1FF0:  MOVF   x84,W
1FF2:  SUBLW  32
1FF4:  BNC   1FFE
1FF6:  MOVFF  84,80
1FFA:  MOVF   x80,W
1FFC:  BRA    2000
1FFE:  CLRF   x84
*
223C:  MOVF   x84,W
223E:  SUBLW  2F
2240:  BC    2250
2242:  MOVF   x84,W
2244:  SUBLW  32
2246:  BNC   2250
2248:  MOVFF  84,80
224C:  MOVF   x80,W
224E:  BRA    2252
2250:  CLRF   x84
*
24C6:  MOVF   x84,W
24C8:  SUBLW  2F
24CA:  BC    24DA
24CC:  MOVF   x84,W
24CE:  SUBLW  32
24D0:  BNC   24DA
24D2:  MOVFF  84,80
24D6:  MOVF   x80,W
24D8:  BRA    24DC
24DA:  CLRF   x84
*
2718:  MOVF   x84,W
271A:  SUBLW  2F
271C:  BC    272C
271E:  MOVF   x84,W
2720:  SUBLW  32
2722:  BNC   272C
2724:  MOVFF  84,80
2728:  MOVF   x80,W
272A:  BRA    272E
272C:  CLRF   x84
*
29A2:  MOVF   x84,W
29A4:  SUBLW  2F
29A6:  BC    29B6
29A8:  MOVF   x84,W
29AA:  SUBLW  32
29AC:  BNC   29B6
29AE:  MOVFF  84,80
29B2:  MOVF   x80,W
29B4:  BRA    29B8
29B6:  CLRF   x84
*
2BF4:  MOVF   x84,W
2BF6:  SUBLW  2F
2BF8:  BC    2C08
2BFA:  MOVF   x84,W
2BFC:  SUBLW  32
2BFE:  BNC   2C08
2C00:  MOVFF  84,80
2C04:  MOVF   x80,W
2C06:  BRA    2C0A
2C08:  CLRF   x84
*
2E7E:  MOVF   x84,W
2E80:  SUBLW  2F
2E82:  BC    2E92
2E84:  MOVF   x84,W
2E86:  SUBLW  32
2E88:  BNC   2E92
2E8A:  MOVFF  84,80
2E8E:  MOVF   x80,W
2E90:  BRA    2E94
2E92:  CLRF   x84
*
30D0:  MOVF   x84,W
30D2:  SUBLW  2F
30D4:  BC    30E4
30D6:  MOVF   x84,W
30D8:  SUBLW  32
30DA:  BNC   30E4
30DC:  MOVFF  84,80
30E0:  MOVF   x80,W
30E2:  BRA    30E6
30E4:  CLRF   x84
*
3358:  MOVF   x84,W
335A:  SUBLW  2F
335C:  BC    336C
335E:  MOVF   x84,W
3360:  SUBLW  32
3362:  BNC   336C
3364:  MOVFF  84,80
3368:  MOVF   x80,W
336A:  BRA    336E
336C:  CLRF   x84
*
35AA:  MOVF   x84,W
35AC:  SUBLW  2F
35AE:  BC    35BE
35B0:  MOVF   x84,W
35B2:  SUBLW  32
35B4:  BNC   35BE
35B6:  MOVFF  84,80
35BA:  MOVF   x80,W
35BC:  BRA    35C0
35BE:  CLRF   x84
....................    }while(con == '\0'); 
*
0BA8:  MOVF   x84,F
0BAA:  BZ    0B8C
*
1648:  MOVF   x84,F
164A:  BZ    162A
*
189A:  MOVF   x84,F
189C:  BZ    187C
*
1B24:  MOVF   x84,F
1B26:  BZ    1B06
*
1D76:  MOVF   x84,F
1D78:  BZ    1D58
*
2000:  MOVF   x84,F
2002:  BZ    1FE2
*
2252:  MOVF   x84,F
2254:  BZ    2234
*
24DC:  MOVF   x84,F
24DE:  BZ    24BE
*
272E:  MOVF   x84,F
2730:  BZ    2710
*
29B8:  MOVF   x84,F
29BA:  BZ    299A
*
2C0A:  MOVF   x84,F
2C0C:  BZ    2BEC
*
2E94:  MOVF   x84,F
2E96:  BZ    2E76
*
30E6:  MOVF   x84,F
30E8:  BZ    30C8
*
336E:  MOVF   x84,F
3370:  BZ    3350
*
35C0:  MOVF   x84,F
35C2:  BZ    35A2
....................    lcd_gotoxy (5,2); 
*
0BAC:  MOVLW  05
0BAE:  MOVWF  x8E
0BB0:  MOVLW  02
0BB2:  MOVWF  x8F
0BB4:  RCALL  04E0
*
164C:  MOVLW  05
164E:  MOVWF  x8E
1650:  MOVLW  02
1652:  MOVWF  x8F
1654:  CALL   04E0
*
189E:  MOVLW  05
18A0:  MOVWF  x8E
18A2:  MOVLW  02
18A4:  MOVWF  x8F
18A6:  CALL   04E0
*
1B28:  MOVLW  05
1B2A:  MOVWF  x8E
1B2C:  MOVLW  02
1B2E:  MOVWF  x8F
1B30:  CALL   04E0
*
1D7A:  MOVLW  05
1D7C:  MOVWF  x8E
1D7E:  MOVLW  02
1D80:  MOVWF  x8F
1D82:  CALL   04E0
*
2004:  MOVLW  05
2006:  MOVWF  x8E
2008:  MOVLW  02
200A:  MOVWF  x8F
200C:  CALL   04E0
*
2256:  MOVLW  05
2258:  MOVWF  x8E
225A:  MOVLW  02
225C:  MOVWF  x8F
225E:  CALL   04E0
*
24E0:  MOVLW  05
24E2:  MOVWF  x8E
24E4:  MOVLW  02
24E6:  MOVWF  x8F
24E8:  CALL   04E0
*
2732:  MOVLW  05
2734:  MOVWF  x8E
2736:  MOVLW  02
2738:  MOVWF  x8F
273A:  CALL   04E0
*
29BC:  MOVLW  05
29BE:  MOVWF  x8E
29C0:  MOVLW  02
29C2:  MOVWF  x8F
29C4:  CALL   04E0
*
2C0E:  MOVLW  05
2C10:  MOVWF  x8E
2C12:  MOVLW  02
2C14:  MOVWF  x8F
2C16:  CALL   04E0
*
2E98:  MOVLW  05
2E9A:  MOVWF  x8E
2E9C:  MOVLW  02
2E9E:  MOVWF  x8F
2EA0:  CALL   04E0
*
30EA:  MOVLW  05
30EC:  MOVWF  x8E
30EE:  MOVLW  02
30F0:  MOVWF  x8F
30F2:  CALL   04E0
*
3372:  MOVLW  05
3374:  MOVWF  x8E
3376:  MOVLW  02
3378:  MOVWF  x8F
337A:  CALL   04E0
*
35C4:  MOVLW  05
35C6:  MOVWF  x8E
35C8:  MOVLW  02
35CA:  MOVWF  x8F
35CC:  CALL   04E0
....................    printf (lcd_putc,"%cH:MM",h[0]); 
*
0BB6:  MOVFF  80,8D
0BBA:  RCALL  052A
0BBC:  MOVLW  EC
0BBE:  MOVWF  FF6
0BC0:  MOVLW  00
0BC2:  MOVWF  FF7
0BC4:  MOVLW  04
0BC6:  MOVWF  x87
0BC8:  RCALL  0672
*
1658:  MOVFF  80,8D
165C:  CALL   052A
1660:  MOVLW  EC
1662:  MOVWF  FF6
1664:  MOVLW  00
1666:  MOVWF  FF7
1668:  MOVLW  04
166A:  MOVWF  x87
166C:  CALL   0672
*
18AA:  MOVFF  80,8D
18AE:  CALL   052A
18B2:  MOVLW  EC
18B4:  MOVWF  FF6
18B6:  MOVLW  00
18B8:  MOVWF  FF7
18BA:  MOVLW  04
18BC:  MOVWF  x87
18BE:  CALL   0672
*
1B34:  MOVFF  80,8D
1B38:  CALL   052A
1B3C:  MOVLW  EC
1B3E:  MOVWF  FF6
1B40:  MOVLW  00
1B42:  MOVWF  FF7
1B44:  MOVLW  04
1B46:  MOVWF  x87
1B48:  CALL   0672
*
1D86:  MOVFF  80,8D
1D8A:  CALL   052A
1D8E:  MOVLW  EC
1D90:  MOVWF  FF6
1D92:  MOVLW  00
1D94:  MOVWF  FF7
1D96:  MOVLW  04
1D98:  MOVWF  x87
1D9A:  CALL   0672
*
2010:  MOVFF  80,8D
2014:  CALL   052A
2018:  MOVLW  EC
201A:  MOVWF  FF6
201C:  MOVLW  00
201E:  MOVWF  FF7
2020:  MOVLW  04
2022:  MOVWF  x87
2024:  CALL   0672
*
2262:  MOVFF  80,8D
2266:  CALL   052A
226A:  MOVLW  EC
226C:  MOVWF  FF6
226E:  MOVLW  00
2270:  MOVWF  FF7
2272:  MOVLW  04
2274:  MOVWF  x87
2276:  CALL   0672
*
24EC:  MOVFF  80,8D
24F0:  CALL   052A
24F4:  MOVLW  EC
24F6:  MOVWF  FF6
24F8:  MOVLW  00
24FA:  MOVWF  FF7
24FC:  MOVLW  04
24FE:  MOVWF  x87
2500:  CALL   0672
*
273E:  MOVFF  80,8D
2742:  CALL   052A
2746:  MOVLW  EC
2748:  MOVWF  FF6
274A:  MOVLW  00
274C:  MOVWF  FF7
274E:  MOVLW  04
2750:  MOVWF  x87
2752:  CALL   0672
*
29C8:  MOVFF  80,8D
29CC:  CALL   052A
29D0:  MOVLW  EC
29D2:  MOVWF  FF6
29D4:  MOVLW  00
29D6:  MOVWF  FF7
29D8:  MOVLW  04
29DA:  MOVWF  x87
29DC:  CALL   0672
*
2C1A:  MOVFF  80,8D
2C1E:  CALL   052A
2C22:  MOVLW  EC
2C24:  MOVWF  FF6
2C26:  MOVLW  00
2C28:  MOVWF  FF7
2C2A:  MOVLW  04
2C2C:  MOVWF  x87
2C2E:  CALL   0672
*
2EA4:  MOVFF  80,8D
2EA8:  CALL   052A
2EAC:  MOVLW  EC
2EAE:  MOVWF  FF6
2EB0:  MOVLW  00
2EB2:  MOVWF  FF7
2EB4:  MOVLW  04
2EB6:  MOVWF  x87
2EB8:  CALL   0672
*
30F6:  MOVFF  80,8D
30FA:  CALL   052A
30FE:  MOVLW  EC
3100:  MOVWF  FF6
3102:  MOVLW  00
3104:  MOVWF  FF7
3106:  MOVLW  04
3108:  MOVWF  x87
310A:  CALL   0672
*
337E:  MOVFF  80,8D
3382:  CALL   052A
3386:  MOVLW  EC
3388:  MOVWF  FF6
338A:  MOVLW  00
338C:  MOVWF  FF7
338E:  MOVLW  04
3390:  MOVWF  x87
3392:  CALL   0672
*
35D0:  MOVFF  80,8D
35D4:  CALL   052A
35D8:  MOVLW  EC
35DA:  MOVWF  FF6
35DC:  MOVLW  00
35DE:  MOVWF  FF7
35E0:  MOVLW  04
35E2:  MOVWF  x87
35E4:  CALL   0672
....................    do 
....................    { 
....................       con = kbd_getc(); 
*
0BCA:  RCALL  089C
0BCC:  MOVFF  01,84
*
1670:  CALL   089C
1674:  MOVFF  01,84
*
18C2:  CALL   089C
18C6:  MOVFF  01,84
*
1B4C:  CALL   089C
1B50:  MOVFF  01,84
*
1D9E:  CALL   089C
1DA2:  MOVFF  01,84
*
2028:  CALL   089C
202C:  MOVFF  01,84
*
227A:  CALL   089C
227E:  MOVFF  01,84
*
2504:  CALL   089C
2508:  MOVFF  01,84
*
2756:  CALL   089C
275A:  MOVFF  01,84
*
29E0:  CALL   089C
29E4:  MOVFF  01,84
*
2C32:  CALL   089C
2C36:  MOVFF  01,84
*
2EBC:  CALL   089C
2EC0:  MOVFF  01,84
*
310E:  CALL   089C
3112:  MOVFF  01,84
*
3396:  CALL   089C
339A:  MOVFF  01,84
*
35E8:  CALL   089C
35EC:  MOVFF  01,84
....................       if(h[0]=='0'||h[0]=='1') ( (con >= '0') && (con <= '9') )?(h[1]=con):(con='\0'); 
*
0BD0:  MOVF   x80,W
0BD2:  SUBLW  30
0BD4:  BZ    0BDC
0BD6:  MOVF   x80,W
0BD8:  SUBLW  31
0BDA:  BNZ   0BF2
0BDC:  MOVF   x84,W
0BDE:  SUBLW  2F
0BE0:  BC    0BF0
0BE2:  MOVF   x84,W
0BE4:  SUBLW  39
0BE6:  BNC   0BF0
0BE8:  MOVFF  84,81
0BEC:  MOVF   x81,W
0BEE:  BRA    0BF2
0BF0:  CLRF   x84
*
1678:  MOVF   x80,W
167A:  SUBLW  30
167C:  BZ    1684
167E:  MOVF   x80,W
1680:  SUBLW  31
1682:  BNZ   169A
1684:  MOVF   x84,W
1686:  SUBLW  2F
1688:  BC    1698
168A:  MOVF   x84,W
168C:  SUBLW  39
168E:  BNC   1698
1690:  MOVFF  84,81
1694:  MOVF   x81,W
1696:  BRA    169A
1698:  CLRF   x84
*
18CA:  MOVF   x80,W
18CC:  SUBLW  30
18CE:  BZ    18D6
18D0:  MOVF   x80,W
18D2:  SUBLW  31
18D4:  BNZ   18EC
18D6:  MOVF   x84,W
18D8:  SUBLW  2F
18DA:  BC    18EA
18DC:  MOVF   x84,W
18DE:  SUBLW  39
18E0:  BNC   18EA
18E2:  MOVFF  84,81
18E6:  MOVF   x81,W
18E8:  BRA    18EC
18EA:  CLRF   x84
*
1B54:  MOVF   x80,W
1B56:  SUBLW  30
1B58:  BZ    1B60
1B5A:  MOVF   x80,W
1B5C:  SUBLW  31
1B5E:  BNZ   1B76
1B60:  MOVF   x84,W
1B62:  SUBLW  2F
1B64:  BC    1B74
1B66:  MOVF   x84,W
1B68:  SUBLW  39
1B6A:  BNC   1B74
1B6C:  MOVFF  84,81
1B70:  MOVF   x81,W
1B72:  BRA    1B76
1B74:  CLRF   x84
*
1DA6:  MOVF   x80,W
1DA8:  SUBLW  30
1DAA:  BZ    1DB2
1DAC:  MOVF   x80,W
1DAE:  SUBLW  31
1DB0:  BNZ   1DC8
1DB2:  MOVF   x84,W
1DB4:  SUBLW  2F
1DB6:  BC    1DC6
1DB8:  MOVF   x84,W
1DBA:  SUBLW  39
1DBC:  BNC   1DC6
1DBE:  MOVFF  84,81
1DC2:  MOVF   x81,W
1DC4:  BRA    1DC8
1DC6:  CLRF   x84
*
2030:  MOVF   x80,W
2032:  SUBLW  30
2034:  BZ    203C
2036:  MOVF   x80,W
2038:  SUBLW  31
203A:  BNZ   2052
203C:  MOVF   x84,W
203E:  SUBLW  2F
2040:  BC    2050
2042:  MOVF   x84,W
2044:  SUBLW  39
2046:  BNC   2050
2048:  MOVFF  84,81
204C:  MOVF   x81,W
204E:  BRA    2052
2050:  CLRF   x84
*
2282:  MOVF   x80,W
2284:  SUBLW  30
2286:  BZ    228E
2288:  MOVF   x80,W
228A:  SUBLW  31
228C:  BNZ   22A4
228E:  MOVF   x84,W
2290:  SUBLW  2F
2292:  BC    22A2
2294:  MOVF   x84,W
2296:  SUBLW  39
2298:  BNC   22A2
229A:  MOVFF  84,81
229E:  MOVF   x81,W
22A0:  BRA    22A4
22A2:  CLRF   x84
*
250C:  MOVF   x80,W
250E:  SUBLW  30
2510:  BZ    2518
2512:  MOVF   x80,W
2514:  SUBLW  31
2516:  BNZ   252E
2518:  MOVF   x84,W
251A:  SUBLW  2F
251C:  BC    252C
251E:  MOVF   x84,W
2520:  SUBLW  39
2522:  BNC   252C
2524:  MOVFF  84,81
2528:  MOVF   x81,W
252A:  BRA    252E
252C:  CLRF   x84
*
275E:  MOVF   x80,W
2760:  SUBLW  30
2762:  BZ    276A
2764:  MOVF   x80,W
2766:  SUBLW  31
2768:  BNZ   2780
276A:  MOVF   x84,W
276C:  SUBLW  2F
276E:  BC    277E
2770:  MOVF   x84,W
2772:  SUBLW  39
2774:  BNC   277E
2776:  MOVFF  84,81
277A:  MOVF   x81,W
277C:  BRA    2780
277E:  CLRF   x84
*
29E8:  MOVF   x80,W
29EA:  SUBLW  30
29EC:  BZ    29F4
29EE:  MOVF   x80,W
29F0:  SUBLW  31
29F2:  BNZ   2A0A
29F4:  MOVF   x84,W
29F6:  SUBLW  2F
29F8:  BC    2A08
29FA:  MOVF   x84,W
29FC:  SUBLW  39
29FE:  BNC   2A08
2A00:  MOVFF  84,81
2A04:  MOVF   x81,W
2A06:  BRA    2A0A
2A08:  CLRF   x84
*
2C3A:  MOVF   x80,W
2C3C:  SUBLW  30
2C3E:  BZ    2C46
2C40:  MOVF   x80,W
2C42:  SUBLW  31
2C44:  BNZ   2C5C
2C46:  MOVF   x84,W
2C48:  SUBLW  2F
2C4A:  BC    2C5A
2C4C:  MOVF   x84,W
2C4E:  SUBLW  39
2C50:  BNC   2C5A
2C52:  MOVFF  84,81
2C56:  MOVF   x81,W
2C58:  BRA    2C5C
2C5A:  CLRF   x84
*
2EC4:  MOVF   x80,W
2EC6:  SUBLW  30
2EC8:  BZ    2ED0
2ECA:  MOVF   x80,W
2ECC:  SUBLW  31
2ECE:  BNZ   2EE6
2ED0:  MOVF   x84,W
2ED2:  SUBLW  2F
2ED4:  BC    2EE4
2ED6:  MOVF   x84,W
2ED8:  SUBLW  39
2EDA:  BNC   2EE4
2EDC:  MOVFF  84,81
2EE0:  MOVF   x81,W
2EE2:  BRA    2EE6
2EE4:  CLRF   x84
*
3116:  MOVF   x80,W
3118:  SUBLW  30
311A:  BZ    3122
311C:  MOVF   x80,W
311E:  SUBLW  31
3120:  BNZ   3138
3122:  MOVF   x84,W
3124:  SUBLW  2F
3126:  BC    3136
3128:  MOVF   x84,W
312A:  SUBLW  39
312C:  BNC   3136
312E:  MOVFF  84,81
3132:  MOVF   x81,W
3134:  BRA    3138
3136:  CLRF   x84
*
339E:  MOVF   x80,W
33A0:  SUBLW  30
33A2:  BZ    33AA
33A4:  MOVF   x80,W
33A6:  SUBLW  31
33A8:  BNZ   33C0
33AA:  MOVF   x84,W
33AC:  SUBLW  2F
33AE:  BC    33BE
33B0:  MOVF   x84,W
33B2:  SUBLW  39
33B4:  BNC   33BE
33B6:  MOVFF  84,81
33BA:  MOVF   x81,W
33BC:  BRA    33C0
33BE:  CLRF   x84
*
35F0:  MOVF   x80,W
35F2:  SUBLW  30
35F4:  BZ    35FC
35F6:  MOVF   x80,W
35F8:  SUBLW  31
35FA:  BNZ   3612
35FC:  MOVF   x84,W
35FE:  SUBLW  2F
3600:  BC    3610
3602:  MOVF   x84,W
3604:  SUBLW  39
3606:  BNC   3610
3608:  MOVFF  84,81
360C:  MOVF   x81,W
360E:  BRA    3612
3610:  CLRF   x84
....................       if(h[0]=='2') ( (con >= '0') && (con <= '4') )?(h[1]=con):(con='\0');  
*
0BF2:  MOVF   x80,W
0BF4:  SUBLW  32
0BF6:  BNZ   0C0E
0BF8:  MOVF   x84,W
0BFA:  SUBLW  2F
0BFC:  BC    0C0C
0BFE:  MOVF   x84,W
0C00:  SUBLW  34
0C02:  BNC   0C0C
0C04:  MOVFF  84,81
0C08:  MOVF   x81,W
0C0A:  BRA    0C0E
0C0C:  CLRF   x84
*
169A:  MOVF   x80,W
169C:  SUBLW  32
169E:  BNZ   16B6
16A0:  MOVF   x84,W
16A2:  SUBLW  2F
16A4:  BC    16B4
16A6:  MOVF   x84,W
16A8:  SUBLW  34
16AA:  BNC   16B4
16AC:  MOVFF  84,81
16B0:  MOVF   x81,W
16B2:  BRA    16B6
16B4:  CLRF   x84
*
18EC:  MOVF   x80,W
18EE:  SUBLW  32
18F0:  BNZ   1908
18F2:  MOVF   x84,W
18F4:  SUBLW  2F
18F6:  BC    1906
18F8:  MOVF   x84,W
18FA:  SUBLW  34
18FC:  BNC   1906
18FE:  MOVFF  84,81
1902:  MOVF   x81,W
1904:  BRA    1908
1906:  CLRF   x84
*
1B76:  MOVF   x80,W
1B78:  SUBLW  32
1B7A:  BNZ   1B92
1B7C:  MOVF   x84,W
1B7E:  SUBLW  2F
1B80:  BC    1B90
1B82:  MOVF   x84,W
1B84:  SUBLW  34
1B86:  BNC   1B90
1B88:  MOVFF  84,81
1B8C:  MOVF   x81,W
1B8E:  BRA    1B92
1B90:  CLRF   x84
*
1DC8:  MOVF   x80,W
1DCA:  SUBLW  32
1DCC:  BNZ   1DE4
1DCE:  MOVF   x84,W
1DD0:  SUBLW  2F
1DD2:  BC    1DE2
1DD4:  MOVF   x84,W
1DD6:  SUBLW  34
1DD8:  BNC   1DE2
1DDA:  MOVFF  84,81
1DDE:  MOVF   x81,W
1DE0:  BRA    1DE4
1DE2:  CLRF   x84
*
2052:  MOVF   x80,W
2054:  SUBLW  32
2056:  BNZ   206E
2058:  MOVF   x84,W
205A:  SUBLW  2F
205C:  BC    206C
205E:  MOVF   x84,W
2060:  SUBLW  34
2062:  BNC   206C
2064:  MOVFF  84,81
2068:  MOVF   x81,W
206A:  BRA    206E
206C:  CLRF   x84
*
22A4:  MOVF   x80,W
22A6:  SUBLW  32
22A8:  BNZ   22C0
22AA:  MOVF   x84,W
22AC:  SUBLW  2F
22AE:  BC    22BE
22B0:  MOVF   x84,W
22B2:  SUBLW  34
22B4:  BNC   22BE
22B6:  MOVFF  84,81
22BA:  MOVF   x81,W
22BC:  BRA    22C0
22BE:  CLRF   x84
*
252E:  MOVF   x80,W
2530:  SUBLW  32
2532:  BNZ   254A
2534:  MOVF   x84,W
2536:  SUBLW  2F
2538:  BC    2548
253A:  MOVF   x84,W
253C:  SUBLW  34
253E:  BNC   2548
2540:  MOVFF  84,81
2544:  MOVF   x81,W
2546:  BRA    254A
2548:  CLRF   x84
*
2780:  MOVF   x80,W
2782:  SUBLW  32
2784:  BNZ   279C
2786:  MOVF   x84,W
2788:  SUBLW  2F
278A:  BC    279A
278C:  MOVF   x84,W
278E:  SUBLW  34
2790:  BNC   279A
2792:  MOVFF  84,81
2796:  MOVF   x81,W
2798:  BRA    279C
279A:  CLRF   x84
*
2A0A:  MOVF   x80,W
2A0C:  SUBLW  32
2A0E:  BNZ   2A26
2A10:  MOVF   x84,W
2A12:  SUBLW  2F
2A14:  BC    2A24
2A16:  MOVF   x84,W
2A18:  SUBLW  34
2A1A:  BNC   2A24
2A1C:  MOVFF  84,81
2A20:  MOVF   x81,W
2A22:  BRA    2A26
2A24:  CLRF   x84
*
2C5C:  MOVF   x80,W
2C5E:  SUBLW  32
2C60:  BNZ   2C78
2C62:  MOVF   x84,W
2C64:  SUBLW  2F
2C66:  BC    2C76
2C68:  MOVF   x84,W
2C6A:  SUBLW  34
2C6C:  BNC   2C76
2C6E:  MOVFF  84,81
2C72:  MOVF   x81,W
2C74:  BRA    2C78
2C76:  CLRF   x84
*
2EE6:  MOVF   x80,W
2EE8:  SUBLW  32
2EEA:  BNZ   2F02
2EEC:  MOVF   x84,W
2EEE:  SUBLW  2F
2EF0:  BC    2F00
2EF2:  MOVF   x84,W
2EF4:  SUBLW  34
2EF6:  BNC   2F00
2EF8:  MOVFF  84,81
2EFC:  MOVF   x81,W
2EFE:  BRA    2F02
2F00:  CLRF   x84
*
3138:  MOVF   x80,W
313A:  SUBLW  32
313C:  BNZ   3154
313E:  MOVF   x84,W
3140:  SUBLW  2F
3142:  BC    3152
3144:  MOVF   x84,W
3146:  SUBLW  34
3148:  BNC   3152
314A:  MOVFF  84,81
314E:  MOVF   x81,W
3150:  BRA    3154
3152:  CLRF   x84
*
33C0:  MOVF   x80,W
33C2:  SUBLW  32
33C4:  BNZ   33DC
33C6:  MOVF   x84,W
33C8:  SUBLW  2F
33CA:  BC    33DA
33CC:  MOVF   x84,W
33CE:  SUBLW  34
33D0:  BNC   33DA
33D2:  MOVFF  84,81
33D6:  MOVF   x81,W
33D8:  BRA    33DC
33DA:  CLRF   x84
*
3612:  MOVF   x80,W
3614:  SUBLW  32
3616:  BNZ   362E
3618:  MOVF   x84,W
361A:  SUBLW  2F
361C:  BC    362C
361E:  MOVF   x84,W
3620:  SUBLW  34
3622:  BNC   362C
3624:  MOVFF  84,81
3628:  MOVF   x81,W
362A:  BRA    362E
362C:  CLRF   x84
....................    }while(con == '\0'); 
*
0C0E:  MOVF   x84,F
0C10:  BZ    0BCA
*
16B6:  MOVF   x84,F
16B8:  BZ    1670
*
1908:  MOVF   x84,F
190A:  BZ    18C2
*
1B92:  MOVF   x84,F
1B94:  BZ    1B4C
*
1DE4:  MOVF   x84,F
1DE6:  BZ    1D9E
*
206E:  MOVF   x84,F
2070:  BZ    2028
*
22C0:  MOVF   x84,F
22C2:  BZ    227A
*
254A:  MOVF   x84,F
254C:  BZ    2504
*
279C:  MOVF   x84,F
279E:  BZ    2756
*
2A26:  MOVF   x84,F
2A28:  BZ    29E0
*
2C78:  MOVF   x84,F
2C7A:  BZ    2C32
*
2F02:  MOVF   x84,F
2F04:  BZ    2EBC
*
3154:  MOVF   x84,F
3156:  BZ    310E
*
33DC:  MOVF   x84,F
33DE:  BZ    3396
*
362E:  MOVF   x84,F
3630:  BZ    35E8
....................    lcd_gotoxy (5,2); 
*
0C12:  MOVLW  05
0C14:  MOVWF  x8E
0C16:  MOVLW  02
0C18:  MOVWF  x8F
0C1A:  RCALL  04E0
*
16BA:  MOVLW  05
16BC:  MOVWF  x8E
16BE:  MOVLW  02
16C0:  MOVWF  x8F
16C2:  CALL   04E0
*
190C:  MOVLW  05
190E:  MOVWF  x8E
1910:  MOVLW  02
1912:  MOVWF  x8F
1914:  CALL   04E0
*
1B96:  MOVLW  05
1B98:  MOVWF  x8E
1B9A:  MOVLW  02
1B9C:  MOVWF  x8F
1B9E:  CALL   04E0
*
1DE8:  MOVLW  05
1DEA:  MOVWF  x8E
1DEC:  MOVLW  02
1DEE:  MOVWF  x8F
1DF0:  CALL   04E0
*
2072:  MOVLW  05
2074:  MOVWF  x8E
2076:  MOVLW  02
2078:  MOVWF  x8F
207A:  CALL   04E0
*
22C4:  MOVLW  05
22C6:  MOVWF  x8E
22C8:  MOVLW  02
22CA:  MOVWF  x8F
22CC:  CALL   04E0
*
254E:  MOVLW  05
2550:  MOVWF  x8E
2552:  MOVLW  02
2554:  MOVWF  x8F
2556:  CALL   04E0
*
27A0:  MOVLW  05
27A2:  MOVWF  x8E
27A4:  MOVLW  02
27A6:  MOVWF  x8F
27A8:  CALL   04E0
*
2A2A:  MOVLW  05
2A2C:  MOVWF  x8E
2A2E:  MOVLW  02
2A30:  MOVWF  x8F
2A32:  CALL   04E0
*
2C7C:  MOVLW  05
2C7E:  MOVWF  x8E
2C80:  MOVLW  02
2C82:  MOVWF  x8F
2C84:  CALL   04E0
*
2F06:  MOVLW  05
2F08:  MOVWF  x8E
2F0A:  MOVLW  02
2F0C:  MOVWF  x8F
2F0E:  CALL   04E0
*
3158:  MOVLW  05
315A:  MOVWF  x8E
315C:  MOVLW  02
315E:  MOVWF  x8F
3160:  CALL   04E0
*
33E0:  MOVLW  05
33E2:  MOVWF  x8E
33E4:  MOVLW  02
33E6:  MOVWF  x8F
33E8:  CALL   04E0
*
3632:  MOVLW  05
3634:  MOVWF  x8E
3636:  MOVLW  02
3638:  MOVWF  x8F
363A:  CALL   04E0
....................    printf (lcd_putc,"%c%c:MM",h[0],h[1]); 
*
0C1C:  MOVFF  80,8D
0C20:  RCALL  052A
0C22:  MOVFF  81,8D
0C26:  RCALL  052A
0C28:  MOVLW  3A
0C2A:  MOVWF  x8D
0C2C:  RCALL  052A
0C2E:  MOVLW  4D
0C30:  MOVWF  x8D
0C32:  RCALL  052A
0C34:  MOVLW  4D
0C36:  MOVWF  x8D
0C38:  RCALL  052A
*
16C6:  MOVFF  80,8D
16CA:  CALL   052A
16CE:  MOVFF  81,8D
16D2:  CALL   052A
16D6:  MOVLW  3A
16D8:  MOVWF  x8D
16DA:  CALL   052A
16DE:  MOVLW  4D
16E0:  MOVWF  x8D
16E2:  CALL   052A
16E6:  MOVLW  4D
16E8:  MOVWF  x8D
16EA:  CALL   052A
*
1918:  MOVFF  80,8D
191C:  CALL   052A
1920:  MOVFF  81,8D
1924:  CALL   052A
1928:  MOVLW  3A
192A:  MOVWF  x8D
192C:  CALL   052A
1930:  MOVLW  4D
1932:  MOVWF  x8D
1934:  CALL   052A
1938:  MOVLW  4D
193A:  MOVWF  x8D
193C:  CALL   052A
*
1BA2:  MOVFF  80,8D
1BA6:  CALL   052A
1BAA:  MOVFF  81,8D
1BAE:  CALL   052A
1BB2:  MOVLW  3A
1BB4:  MOVWF  x8D
1BB6:  CALL   052A
1BBA:  MOVLW  4D
1BBC:  MOVWF  x8D
1BBE:  CALL   052A
1BC2:  MOVLW  4D
1BC4:  MOVWF  x8D
1BC6:  CALL   052A
*
1DF4:  MOVFF  80,8D
1DF8:  CALL   052A
1DFC:  MOVFF  81,8D
1E00:  CALL   052A
1E04:  MOVLW  3A
1E06:  MOVWF  x8D
1E08:  CALL   052A
1E0C:  MOVLW  4D
1E0E:  MOVWF  x8D
1E10:  CALL   052A
1E14:  MOVLW  4D
1E16:  MOVWF  x8D
1E18:  CALL   052A
*
207E:  MOVFF  80,8D
2082:  CALL   052A
2086:  MOVFF  81,8D
208A:  CALL   052A
208E:  MOVLW  3A
2090:  MOVWF  x8D
2092:  CALL   052A
2096:  MOVLW  4D
2098:  MOVWF  x8D
209A:  CALL   052A
209E:  MOVLW  4D
20A0:  MOVWF  x8D
20A2:  CALL   052A
*
22D0:  MOVFF  80,8D
22D4:  CALL   052A
22D8:  MOVFF  81,8D
22DC:  CALL   052A
22E0:  MOVLW  3A
22E2:  MOVWF  x8D
22E4:  CALL   052A
22E8:  MOVLW  4D
22EA:  MOVWF  x8D
22EC:  CALL   052A
22F0:  MOVLW  4D
22F2:  MOVWF  x8D
22F4:  CALL   052A
*
255A:  MOVFF  80,8D
255E:  CALL   052A
2562:  MOVFF  81,8D
2566:  CALL   052A
256A:  MOVLW  3A
256C:  MOVWF  x8D
256E:  CALL   052A
2572:  MOVLW  4D
2574:  MOVWF  x8D
2576:  CALL   052A
257A:  MOVLW  4D
257C:  MOVWF  x8D
257E:  CALL   052A
*
27AC:  MOVFF  80,8D
27B0:  CALL   052A
27B4:  MOVFF  81,8D
27B8:  CALL   052A
27BC:  MOVLW  3A
27BE:  MOVWF  x8D
27C0:  CALL   052A
27C4:  MOVLW  4D
27C6:  MOVWF  x8D
27C8:  CALL   052A
27CC:  MOVLW  4D
27CE:  MOVWF  x8D
27D0:  CALL   052A
*
2A36:  MOVFF  80,8D
2A3A:  CALL   052A
2A3E:  MOVFF  81,8D
2A42:  CALL   052A
2A46:  MOVLW  3A
2A48:  MOVWF  x8D
2A4A:  CALL   052A
2A4E:  MOVLW  4D
2A50:  MOVWF  x8D
2A52:  CALL   052A
2A56:  MOVLW  4D
2A58:  MOVWF  x8D
2A5A:  CALL   052A
*
2C88:  MOVFF  80,8D
2C8C:  CALL   052A
2C90:  MOVFF  81,8D
2C94:  CALL   052A
2C98:  MOVLW  3A
2C9A:  MOVWF  x8D
2C9C:  CALL   052A
2CA0:  MOVLW  4D
2CA2:  MOVWF  x8D
2CA4:  CALL   052A
2CA8:  MOVLW  4D
2CAA:  MOVWF  x8D
2CAC:  CALL   052A
*
2F12:  MOVFF  80,8D
2F16:  CALL   052A
2F1A:  MOVFF  81,8D
2F1E:  CALL   052A
2F22:  MOVLW  3A
2F24:  MOVWF  x8D
2F26:  CALL   052A
2F2A:  MOVLW  4D
2F2C:  MOVWF  x8D
2F2E:  CALL   052A
2F32:  MOVLW  4D
2F34:  MOVWF  x8D
2F36:  CALL   052A
*
3164:  MOVFF  80,8D
3168:  CALL   052A
316C:  MOVFF  81,8D
3170:  CALL   052A
3174:  MOVLW  3A
3176:  MOVWF  x8D
3178:  CALL   052A
317C:  MOVLW  4D
317E:  MOVWF  x8D
3180:  CALL   052A
3184:  MOVLW  4D
3186:  MOVWF  x8D
3188:  CALL   052A
*
33EC:  MOVFF  80,8D
33F0:  CALL   052A
33F4:  MOVFF  81,8D
33F8:  CALL   052A
33FC:  MOVLW  3A
33FE:  MOVWF  x8D
3400:  CALL   052A
3404:  MOVLW  4D
3406:  MOVWF  x8D
3408:  CALL   052A
340C:  MOVLW  4D
340E:  MOVWF  x8D
3410:  CALL   052A
*
363E:  MOVFF  80,8D
3642:  CALL   052A
3646:  MOVFF  81,8D
364A:  CALL   052A
364E:  MOVLW  3A
3650:  MOVWF  x8D
3652:  CALL   052A
3656:  MOVLW  4D
3658:  MOVWF  x8D
365A:  CALL   052A
365E:  MOVLW  4D
3660:  MOVWF  x8D
3662:  CALL   052A
....................    do 
....................    { 
....................       con = kbd_getc(); 
*
0C3A:  RCALL  089C
0C3C:  MOVFF  01,84
*
16EE:  CALL   089C
16F2:  MOVFF  01,84
*
1940:  CALL   089C
1944:  MOVFF  01,84
*
1BCA:  CALL   089C
1BCE:  MOVFF  01,84
*
1E1C:  CALL   089C
1E20:  MOVFF  01,84
*
20A6:  CALL   089C
20AA:  MOVFF  01,84
*
22F8:  CALL   089C
22FC:  MOVFF  01,84
*
2582:  CALL   089C
2586:  MOVFF  01,84
*
27D4:  CALL   089C
27D8:  MOVFF  01,84
*
2A5E:  CALL   089C
2A62:  MOVFF  01,84
*
2CB0:  CALL   089C
2CB4:  MOVFF  01,84
*
2F3A:  CALL   089C
2F3E:  MOVFF  01,84
*
318C:  CALL   089C
3190:  MOVFF  01,84
*
3414:  CALL   089C
3418:  MOVFF  01,84
*
3666:  CALL   089C
366A:  MOVFF  01,84
....................       ((con >= '0') && (con <= '5'))? (m[0]=con) :(con='\0');  
*
0C40:  MOVF   x84,W
0C42:  SUBLW  2F
0C44:  BC    0C54
0C46:  MOVF   x84,W
0C48:  SUBLW  35
0C4A:  BNC   0C54
0C4C:  MOVFF  84,82
0C50:  MOVF   x82,W
0C52:  BRA    0C56
0C54:  CLRF   x84
*
16F6:  MOVF   x84,W
16F8:  SUBLW  2F
16FA:  BC    170A
16FC:  MOVF   x84,W
16FE:  SUBLW  35
1700:  BNC   170A
1702:  MOVFF  84,82
1706:  MOVF   x82,W
1708:  BRA    170C
170A:  CLRF   x84
*
1948:  MOVF   x84,W
194A:  SUBLW  2F
194C:  BC    195C
194E:  MOVF   x84,W
1950:  SUBLW  35
1952:  BNC   195C
1954:  MOVFF  84,82
1958:  MOVF   x82,W
195A:  BRA    195E
195C:  CLRF   x84
*
1BD2:  MOVF   x84,W
1BD4:  SUBLW  2F
1BD6:  BC    1BE6
1BD8:  MOVF   x84,W
1BDA:  SUBLW  35
1BDC:  BNC   1BE6
1BDE:  MOVFF  84,82
1BE2:  MOVF   x82,W
1BE4:  BRA    1BE8
1BE6:  CLRF   x84
*
1E24:  MOVF   x84,W
1E26:  SUBLW  2F
1E28:  BC    1E38
1E2A:  MOVF   x84,W
1E2C:  SUBLW  35
1E2E:  BNC   1E38
1E30:  MOVFF  84,82
1E34:  MOVF   x82,W
1E36:  BRA    1E3A
1E38:  CLRF   x84
*
20AE:  MOVF   x84,W
20B0:  SUBLW  2F
20B2:  BC    20C2
20B4:  MOVF   x84,W
20B6:  SUBLW  35
20B8:  BNC   20C2
20BA:  MOVFF  84,82
20BE:  MOVF   x82,W
20C0:  BRA    20C4
20C2:  CLRF   x84
*
2300:  MOVF   x84,W
2302:  SUBLW  2F
2304:  BC    2314
2306:  MOVF   x84,W
2308:  SUBLW  35
230A:  BNC   2314
230C:  MOVFF  84,82
2310:  MOVF   x82,W
2312:  BRA    2316
2314:  CLRF   x84
*
258A:  MOVF   x84,W
258C:  SUBLW  2F
258E:  BC    259E
2590:  MOVF   x84,W
2592:  SUBLW  35
2594:  BNC   259E
2596:  MOVFF  84,82
259A:  MOVF   x82,W
259C:  BRA    25A0
259E:  CLRF   x84
*
27DC:  MOVF   x84,W
27DE:  SUBLW  2F
27E0:  BC    27F0
27E2:  MOVF   x84,W
27E4:  SUBLW  35
27E6:  BNC   27F0
27E8:  MOVFF  84,82
27EC:  MOVF   x82,W
27EE:  BRA    27F2
27F0:  CLRF   x84
*
2A66:  MOVF   x84,W
2A68:  SUBLW  2F
2A6A:  BC    2A7A
2A6C:  MOVF   x84,W
2A6E:  SUBLW  35
2A70:  BNC   2A7A
2A72:  MOVFF  84,82
2A76:  MOVF   x82,W
2A78:  BRA    2A7C
2A7A:  CLRF   x84
*
2CB8:  MOVF   x84,W
2CBA:  SUBLW  2F
2CBC:  BC    2CCC
2CBE:  MOVF   x84,W
2CC0:  SUBLW  35
2CC2:  BNC   2CCC
2CC4:  MOVFF  84,82
2CC8:  MOVF   x82,W
2CCA:  BRA    2CCE
2CCC:  CLRF   x84
*
2F42:  MOVF   x84,W
2F44:  SUBLW  2F
2F46:  BC    2F56
2F48:  MOVF   x84,W
2F4A:  SUBLW  35
2F4C:  BNC   2F56
2F4E:  MOVFF  84,82
2F52:  MOVF   x82,W
2F54:  BRA    2F58
2F56:  CLRF   x84
*
3194:  MOVF   x84,W
3196:  SUBLW  2F
3198:  BC    31A8
319A:  MOVF   x84,W
319C:  SUBLW  35
319E:  BNC   31A8
31A0:  MOVFF  84,82
31A4:  MOVF   x82,W
31A6:  BRA    31AA
31A8:  CLRF   x84
*
341C:  MOVF   x84,W
341E:  SUBLW  2F
3420:  BC    3430
3422:  MOVF   x84,W
3424:  SUBLW  35
3426:  BNC   3430
3428:  MOVFF  84,82
342C:  MOVF   x82,W
342E:  BRA    3432
3430:  CLRF   x84
*
366E:  MOVF   x84,W
3670:  SUBLW  2F
3672:  BC    3682
3674:  MOVF   x84,W
3676:  SUBLW  35
3678:  BNC   3682
367A:  MOVFF  84,82
367E:  MOVF   x82,W
3680:  BRA    3684
3682:  CLRF   x84
....................    }while(con == '\0'); 
*
0C56:  MOVF   x84,F
0C58:  BZ    0C3A
*
170C:  MOVF   x84,F
170E:  BZ    16EE
*
195E:  MOVF   x84,F
1960:  BZ    1940
*
1BE8:  MOVF   x84,F
1BEA:  BZ    1BCA
*
1E3A:  MOVF   x84,F
1E3C:  BZ    1E1C
*
20C4:  MOVF   x84,F
20C6:  BZ    20A6
*
2316:  MOVF   x84,F
2318:  BZ    22F8
*
25A0:  MOVF   x84,F
25A2:  BZ    2582
*
27F2:  MOVF   x84,F
27F4:  BZ    27D4
*
2A7C:  MOVF   x84,F
2A7E:  BZ    2A5E
*
2CCE:  MOVF   x84,F
2CD0:  BZ    2CB0
*
2F58:  MOVF   x84,F
2F5A:  BZ    2F3A
*
31AA:  MOVF   x84,F
31AC:  BZ    318C
*
3432:  MOVF   x84,F
3434:  BZ    3414
*
3684:  MOVF   x84,F
3686:  BZ    3666
....................    lcd_gotoxy (5,2); 
*
0C5A:  MOVLW  05
0C5C:  MOVWF  x8E
0C5E:  MOVLW  02
0C60:  MOVWF  x8F
0C62:  RCALL  04E0
*
1710:  MOVLW  05
1712:  MOVWF  x8E
1714:  MOVLW  02
1716:  MOVWF  x8F
1718:  CALL   04E0
*
1962:  MOVLW  05
1964:  MOVWF  x8E
1966:  MOVLW  02
1968:  MOVWF  x8F
196A:  CALL   04E0
*
1BEC:  MOVLW  05
1BEE:  MOVWF  x8E
1BF0:  MOVLW  02
1BF2:  MOVWF  x8F
1BF4:  CALL   04E0
*
1E3E:  MOVLW  05
1E40:  MOVWF  x8E
1E42:  MOVLW  02
1E44:  MOVWF  x8F
1E46:  CALL   04E0
*
20C8:  MOVLW  05
20CA:  MOVWF  x8E
20CC:  MOVLW  02
20CE:  MOVWF  x8F
20D0:  CALL   04E0
*
231A:  MOVLW  05
231C:  MOVWF  x8E
231E:  MOVLW  02
2320:  MOVWF  x8F
2322:  CALL   04E0
*
25A4:  MOVLW  05
25A6:  MOVWF  x8E
25A8:  MOVLW  02
25AA:  MOVWF  x8F
25AC:  CALL   04E0
*
27F6:  MOVLW  05
27F8:  MOVWF  x8E
27FA:  MOVLW  02
27FC:  MOVWF  x8F
27FE:  CALL   04E0
*
2A80:  MOVLW  05
2A82:  MOVWF  x8E
2A84:  MOVLW  02
2A86:  MOVWF  x8F
2A88:  CALL   04E0
*
2CD2:  MOVLW  05
2CD4:  MOVWF  x8E
2CD6:  MOVLW  02
2CD8:  MOVWF  x8F
2CDA:  CALL   04E0
*
2F5C:  MOVLW  05
2F5E:  MOVWF  x8E
2F60:  MOVLW  02
2F62:  MOVWF  x8F
2F64:  CALL   04E0
*
31AE:  MOVLW  05
31B0:  MOVWF  x8E
31B2:  MOVLW  02
31B4:  MOVWF  x8F
31B6:  CALL   04E0
*
3436:  MOVLW  05
3438:  MOVWF  x8E
343A:  MOVLW  02
343C:  MOVWF  x8F
343E:  CALL   04E0
*
3688:  MOVLW  05
368A:  MOVWF  x8E
368C:  MOVLW  02
368E:  MOVWF  x8F
3690:  CALL   04E0
....................    printf (lcd_putc,"%c%c:%cM",h[0],h[1],m[0]); 
*
0C64:  MOVFF  80,8D
0C68:  RCALL  052A
0C6A:  MOVFF  81,8D
0C6E:  RCALL  052A
0C70:  MOVLW  3A
0C72:  MOVWF  x8D
0C74:  RCALL  052A
0C76:  MOVFF  82,8D
0C7A:  RCALL  052A
0C7C:  MOVLW  4D
0C7E:  MOVWF  x8D
0C80:  RCALL  052A
*
171C:  MOVFF  80,8D
1720:  CALL   052A
1724:  MOVFF  81,8D
1728:  CALL   052A
172C:  MOVLW  3A
172E:  MOVWF  x8D
1730:  CALL   052A
1734:  MOVFF  82,8D
1738:  CALL   052A
173C:  MOVLW  4D
173E:  MOVWF  x8D
1740:  CALL   052A
*
196E:  MOVFF  80,8D
1972:  CALL   052A
1976:  MOVFF  81,8D
197A:  CALL   052A
197E:  MOVLW  3A
1980:  MOVWF  x8D
1982:  CALL   052A
1986:  MOVFF  82,8D
198A:  CALL   052A
198E:  MOVLW  4D
1990:  MOVWF  x8D
1992:  CALL   052A
*
1BF8:  MOVFF  80,8D
1BFC:  CALL   052A
1C00:  MOVFF  81,8D
1C04:  CALL   052A
1C08:  MOVLW  3A
1C0A:  MOVWF  x8D
1C0C:  CALL   052A
1C10:  MOVFF  82,8D
1C14:  CALL   052A
1C18:  MOVLW  4D
1C1A:  MOVWF  x8D
1C1C:  CALL   052A
*
1E4A:  MOVFF  80,8D
1E4E:  CALL   052A
1E52:  MOVFF  81,8D
1E56:  CALL   052A
1E5A:  MOVLW  3A
1E5C:  MOVWF  x8D
1E5E:  CALL   052A
1E62:  MOVFF  82,8D
1E66:  CALL   052A
1E6A:  MOVLW  4D
1E6C:  MOVWF  x8D
1E6E:  CALL   052A
*
20D4:  MOVFF  80,8D
20D8:  CALL   052A
20DC:  MOVFF  81,8D
20E0:  CALL   052A
20E4:  MOVLW  3A
20E6:  MOVWF  x8D
20E8:  CALL   052A
20EC:  MOVFF  82,8D
20F0:  CALL   052A
20F4:  MOVLW  4D
20F6:  MOVWF  x8D
20F8:  CALL   052A
*
2326:  MOVFF  80,8D
232A:  CALL   052A
232E:  MOVFF  81,8D
2332:  CALL   052A
2336:  MOVLW  3A
2338:  MOVWF  x8D
233A:  CALL   052A
233E:  MOVFF  82,8D
2342:  CALL   052A
2346:  MOVLW  4D
2348:  MOVWF  x8D
234A:  CALL   052A
*
25B0:  MOVFF  80,8D
25B4:  CALL   052A
25B8:  MOVFF  81,8D
25BC:  CALL   052A
25C0:  MOVLW  3A
25C2:  MOVWF  x8D
25C4:  CALL   052A
25C8:  MOVFF  82,8D
25CC:  CALL   052A
25D0:  MOVLW  4D
25D2:  MOVWF  x8D
25D4:  CALL   052A
*
2802:  MOVFF  80,8D
2806:  CALL   052A
280A:  MOVFF  81,8D
280E:  CALL   052A
2812:  MOVLW  3A
2814:  MOVWF  x8D
2816:  CALL   052A
281A:  MOVFF  82,8D
281E:  CALL   052A
2822:  MOVLW  4D
2824:  MOVWF  x8D
2826:  CALL   052A
*
2A8C:  MOVFF  80,8D
2A90:  CALL   052A
2A94:  MOVFF  81,8D
2A98:  CALL   052A
2A9C:  MOVLW  3A
2A9E:  MOVWF  x8D
2AA0:  CALL   052A
2AA4:  MOVFF  82,8D
2AA8:  CALL   052A
2AAC:  MOVLW  4D
2AAE:  MOVWF  x8D
2AB0:  CALL   052A
*
2CDE:  MOVFF  80,8D
2CE2:  CALL   052A
2CE6:  MOVFF  81,8D
2CEA:  CALL   052A
2CEE:  MOVLW  3A
2CF0:  MOVWF  x8D
2CF2:  CALL   052A
2CF6:  MOVFF  82,8D
2CFA:  CALL   052A
2CFE:  MOVLW  4D
2D00:  MOVWF  x8D
2D02:  CALL   052A
*
2F68:  MOVFF  80,8D
2F6C:  CALL   052A
2F70:  MOVFF  81,8D
2F74:  CALL   052A
2F78:  MOVLW  3A
2F7A:  MOVWF  x8D
2F7C:  CALL   052A
2F80:  MOVFF  82,8D
2F84:  CALL   052A
2F88:  MOVLW  4D
2F8A:  MOVWF  x8D
2F8C:  CALL   052A
*
31BA:  MOVFF  80,8D
31BE:  CALL   052A
31C2:  MOVFF  81,8D
31C6:  CALL   052A
31CA:  MOVLW  3A
31CC:  MOVWF  x8D
31CE:  CALL   052A
31D2:  MOVFF  82,8D
31D6:  CALL   052A
31DA:  MOVLW  4D
31DC:  MOVWF  x8D
31DE:  CALL   052A
*
3442:  MOVFF  80,8D
3446:  CALL   052A
344A:  MOVFF  81,8D
344E:  CALL   052A
3452:  MOVLW  3A
3454:  MOVWF  x8D
3456:  CALL   052A
345A:  MOVFF  82,8D
345E:  CALL   052A
3462:  MOVLW  4D
3464:  MOVWF  x8D
3466:  CALL   052A
*
3694:  MOVFF  80,8D
3698:  CALL   052A
369C:  MOVFF  81,8D
36A0:  CALL   052A
36A4:  MOVLW  3A
36A6:  MOVWF  x8D
36A8:  CALL   052A
36AC:  MOVFF  82,8D
36B0:  CALL   052A
36B4:  MOVLW  4D
36B6:  MOVWF  x8D
36B8:  CALL   052A
....................    do 
....................    { 
....................       con = kbd_getc(); 
*
0C82:  RCALL  089C
0C84:  MOVFF  01,84
*
1744:  CALL   089C
1748:  MOVFF  01,84
*
1996:  CALL   089C
199A:  MOVFF  01,84
*
1C20:  CALL   089C
1C24:  MOVFF  01,84
*
1E72:  CALL   089C
1E76:  MOVFF  01,84
*
20FC:  CALL   089C
2100:  MOVFF  01,84
*
234E:  CALL   089C
2352:  MOVFF  01,84
*
25D8:  CALL   089C
25DC:  MOVFF  01,84
*
282A:  CALL   089C
282E:  MOVFF  01,84
*
2AB4:  CALL   089C
2AB8:  MOVFF  01,84
*
2D06:  CALL   089C
2D0A:  MOVFF  01,84
*
2F90:  CALL   089C
2F94:  MOVFF  01,84
*
31E2:  CALL   089C
31E6:  MOVFF  01,84
*
346A:  CALL   089C
346E:  MOVFF  01,84
*
36BC:  CALL   089C
36C0:  MOVFF  01,84
....................       ((con >= '0') && (con <= '5'))? (m[1]=con) :(con='\0');  
*
0C88:  MOVF   x84,W
0C8A:  SUBLW  2F
0C8C:  BC    0C9C
0C8E:  MOVF   x84,W
0C90:  SUBLW  35
0C92:  BNC   0C9C
0C94:  MOVFF  84,83
0C98:  MOVF   x83,W
0C9A:  BRA    0C9E
0C9C:  CLRF   x84
*
174C:  MOVF   x84,W
174E:  SUBLW  2F
1750:  BC    1760
1752:  MOVF   x84,W
1754:  SUBLW  35
1756:  BNC   1760
1758:  MOVFF  84,83
175C:  MOVF   x83,W
175E:  BRA    1762
1760:  CLRF   x84
*
199E:  MOVF   x84,W
19A0:  SUBLW  2F
19A2:  BC    19B2
19A4:  MOVF   x84,W
19A6:  SUBLW  35
19A8:  BNC   19B2
19AA:  MOVFF  84,83
19AE:  MOVF   x83,W
19B0:  BRA    19B4
19B2:  CLRF   x84
*
1C28:  MOVF   x84,W
1C2A:  SUBLW  2F
1C2C:  BC    1C3C
1C2E:  MOVF   x84,W
1C30:  SUBLW  35
1C32:  BNC   1C3C
1C34:  MOVFF  84,83
1C38:  MOVF   x83,W
1C3A:  BRA    1C3E
1C3C:  CLRF   x84
*
1E7A:  MOVF   x84,W
1E7C:  SUBLW  2F
1E7E:  BC    1E8E
1E80:  MOVF   x84,W
1E82:  SUBLW  35
1E84:  BNC   1E8E
1E86:  MOVFF  84,83
1E8A:  MOVF   x83,W
1E8C:  BRA    1E90
1E8E:  CLRF   x84
*
2104:  MOVF   x84,W
2106:  SUBLW  2F
2108:  BC    2118
210A:  MOVF   x84,W
210C:  SUBLW  35
210E:  BNC   2118
2110:  MOVFF  84,83
2114:  MOVF   x83,W
2116:  BRA    211A
2118:  CLRF   x84
*
2356:  MOVF   x84,W
2358:  SUBLW  2F
235A:  BC    236A
235C:  MOVF   x84,W
235E:  SUBLW  35
2360:  BNC   236A
2362:  MOVFF  84,83
2366:  MOVF   x83,W
2368:  BRA    236C
236A:  CLRF   x84
*
25E0:  MOVF   x84,W
25E2:  SUBLW  2F
25E4:  BC    25F4
25E6:  MOVF   x84,W
25E8:  SUBLW  35
25EA:  BNC   25F4
25EC:  MOVFF  84,83
25F0:  MOVF   x83,W
25F2:  BRA    25F6
25F4:  CLRF   x84
*
2832:  MOVF   x84,W
2834:  SUBLW  2F
2836:  BC    2846
2838:  MOVF   x84,W
283A:  SUBLW  35
283C:  BNC   2846
283E:  MOVFF  84,83
2842:  MOVF   x83,W
2844:  BRA    2848
2846:  CLRF   x84
*
2ABC:  MOVF   x84,W
2ABE:  SUBLW  2F
2AC0:  BC    2AD0
2AC2:  MOVF   x84,W
2AC4:  SUBLW  35
2AC6:  BNC   2AD0
2AC8:  MOVFF  84,83
2ACC:  MOVF   x83,W
2ACE:  BRA    2AD2
2AD0:  CLRF   x84
*
2D0E:  MOVF   x84,W
2D10:  SUBLW  2F
2D12:  BC    2D22
2D14:  MOVF   x84,W
2D16:  SUBLW  35
2D18:  BNC   2D22
2D1A:  MOVFF  84,83
2D1E:  MOVF   x83,W
2D20:  BRA    2D24
2D22:  CLRF   x84
*
2F98:  MOVF   x84,W
2F9A:  SUBLW  2F
2F9C:  BC    2FAC
2F9E:  MOVF   x84,W
2FA0:  SUBLW  35
2FA2:  BNC   2FAC
2FA4:  MOVFF  84,83
2FA8:  MOVF   x83,W
2FAA:  BRA    2FAE
2FAC:  CLRF   x84
*
31EA:  MOVF   x84,W
31EC:  SUBLW  2F
31EE:  BC    31FE
31F0:  MOVF   x84,W
31F2:  SUBLW  35
31F4:  BNC   31FE
31F6:  MOVFF  84,83
31FA:  MOVF   x83,W
31FC:  BRA    3200
31FE:  CLRF   x84
*
3472:  MOVF   x84,W
3474:  SUBLW  2F
3476:  BC    3486
3478:  MOVF   x84,W
347A:  SUBLW  35
347C:  BNC   3486
347E:  MOVFF  84,83
3482:  MOVF   x83,W
3484:  BRA    3488
3486:  CLRF   x84
*
36C4:  MOVF   x84,W
36C6:  SUBLW  2F
36C8:  BC    36D8
36CA:  MOVF   x84,W
36CC:  SUBLW  35
36CE:  BNC   36D8
36D0:  MOVFF  84,83
36D4:  MOVF   x83,W
36D6:  BRA    36DA
36D8:  CLRF   x84
....................    }while(con == '\0'); 
*
0C9E:  MOVF   x84,F
0CA0:  BZ    0C82
*
1762:  MOVF   x84,F
1764:  BZ    1744
*
19B4:  MOVF   x84,F
19B6:  BZ    1996
*
1C3E:  MOVF   x84,F
1C40:  BZ    1C20
*
1E90:  MOVF   x84,F
1E92:  BZ    1E72
*
211A:  MOVF   x84,F
211C:  BZ    20FC
*
236C:  MOVF   x84,F
236E:  BZ    234E
*
25F6:  MOVF   x84,F
25F8:  BZ    25D8
*
2848:  MOVF   x84,F
284A:  BZ    282A
*
2AD2:  MOVF   x84,F
2AD4:  BZ    2AB4
*
2D24:  MOVF   x84,F
2D26:  BZ    2D06
*
2FAE:  MOVF   x84,F
2FB0:  BZ    2F90
*
3200:  MOVF   x84,F
3202:  BZ    31E2
*
3488:  MOVF   x84,F
348A:  BZ    346A
*
36DA:  MOVF   x84,F
36DC:  BZ    36BC
....................    lcd_gotoxy (5,2); 
*
0CA2:  MOVLW  05
0CA4:  MOVWF  x8E
0CA6:  MOVLW  02
0CA8:  MOVWF  x8F
0CAA:  RCALL  04E0
*
1766:  MOVLW  05
1768:  MOVWF  x8E
176A:  MOVLW  02
176C:  MOVWF  x8F
176E:  CALL   04E0
*
19B8:  MOVLW  05
19BA:  MOVWF  x8E
19BC:  MOVLW  02
19BE:  MOVWF  x8F
19C0:  CALL   04E0
*
1C42:  MOVLW  05
1C44:  MOVWF  x8E
1C46:  MOVLW  02
1C48:  MOVWF  x8F
1C4A:  CALL   04E0
*
1E94:  MOVLW  05
1E96:  MOVWF  x8E
1E98:  MOVLW  02
1E9A:  MOVWF  x8F
1E9C:  CALL   04E0
*
211E:  MOVLW  05
2120:  MOVWF  x8E
2122:  MOVLW  02
2124:  MOVWF  x8F
2126:  CALL   04E0
*
2370:  MOVLW  05
2372:  MOVWF  x8E
2374:  MOVLW  02
2376:  MOVWF  x8F
2378:  CALL   04E0
*
25FA:  MOVLW  05
25FC:  MOVWF  x8E
25FE:  MOVLW  02
2600:  MOVWF  x8F
2602:  CALL   04E0
*
284C:  MOVLW  05
284E:  MOVWF  x8E
2850:  MOVLW  02
2852:  MOVWF  x8F
2854:  CALL   04E0
*
2AD6:  MOVLW  05
2AD8:  MOVWF  x8E
2ADA:  MOVLW  02
2ADC:  MOVWF  x8F
2ADE:  CALL   04E0
*
2D28:  MOVLW  05
2D2A:  MOVWF  x8E
2D2C:  MOVLW  02
2D2E:  MOVWF  x8F
2D30:  CALL   04E0
*
2FB2:  MOVLW  05
2FB4:  MOVWF  x8E
2FB6:  MOVLW  02
2FB8:  MOVWF  x8F
2FBA:  CALL   04E0
*
3204:  MOVLW  05
3206:  MOVWF  x8E
3208:  MOVLW  02
320A:  MOVWF  x8F
320C:  CALL   04E0
*
348C:  MOVLW  05
348E:  MOVWF  x8E
3490:  MOVLW  02
3492:  MOVWF  x8F
3494:  CALL   04E0
*
36DE:  MOVLW  05
36E0:  MOVWF  x8E
36E2:  MOVLW  02
36E4:  MOVWF  x8F
36E6:  CALL   04E0
....................    printf (lcd_putc,"%c%c:%c%c",h[0],h[1],m[0],m[1]); 
*
0CAC:  MOVFF  80,8D
0CB0:  RCALL  052A
0CB2:  MOVFF  81,8D
0CB6:  RCALL  052A
0CB8:  MOVLW  3A
0CBA:  MOVWF  x8D
0CBC:  RCALL  052A
0CBE:  MOVFF  82,8D
0CC2:  RCALL  052A
0CC4:  MOVFF  83,8D
0CC8:  RCALL  052A
*
1772:  MOVFF  80,8D
1776:  CALL   052A
177A:  MOVFF  81,8D
177E:  CALL   052A
1782:  MOVLW  3A
1784:  MOVWF  x8D
1786:  CALL   052A
178A:  MOVFF  82,8D
178E:  CALL   052A
1792:  MOVFF  83,8D
1796:  CALL   052A
*
19C4:  MOVFF  80,8D
19C8:  CALL   052A
19CC:  MOVFF  81,8D
19D0:  CALL   052A
19D4:  MOVLW  3A
19D6:  MOVWF  x8D
19D8:  CALL   052A
19DC:  MOVFF  82,8D
19E0:  CALL   052A
19E4:  MOVFF  83,8D
19E8:  CALL   052A
*
1C4E:  MOVFF  80,8D
1C52:  CALL   052A
1C56:  MOVFF  81,8D
1C5A:  CALL   052A
1C5E:  MOVLW  3A
1C60:  MOVWF  x8D
1C62:  CALL   052A
1C66:  MOVFF  82,8D
1C6A:  CALL   052A
1C6E:  MOVFF  83,8D
1C72:  CALL   052A
*
1EA0:  MOVFF  80,8D
1EA4:  CALL   052A
1EA8:  MOVFF  81,8D
1EAC:  CALL   052A
1EB0:  MOVLW  3A
1EB2:  MOVWF  x8D
1EB4:  CALL   052A
1EB8:  MOVFF  82,8D
1EBC:  CALL   052A
1EC0:  MOVFF  83,8D
1EC4:  CALL   052A
*
212A:  MOVFF  80,8D
212E:  CALL   052A
2132:  MOVFF  81,8D
2136:  CALL   052A
213A:  MOVLW  3A
213C:  MOVWF  x8D
213E:  CALL   052A
2142:  MOVFF  82,8D
2146:  CALL   052A
214A:  MOVFF  83,8D
214E:  CALL   052A
*
237C:  MOVFF  80,8D
2380:  CALL   052A
2384:  MOVFF  81,8D
2388:  CALL   052A
238C:  MOVLW  3A
238E:  MOVWF  x8D
2390:  CALL   052A
2394:  MOVFF  82,8D
2398:  CALL   052A
239C:  MOVFF  83,8D
23A0:  CALL   052A
*
2606:  MOVFF  80,8D
260A:  CALL   052A
260E:  MOVFF  81,8D
2612:  CALL   052A
2616:  MOVLW  3A
2618:  MOVWF  x8D
261A:  CALL   052A
261E:  MOVFF  82,8D
2622:  CALL   052A
2626:  MOVFF  83,8D
262A:  CALL   052A
*
2858:  MOVFF  80,8D
285C:  CALL   052A
2860:  MOVFF  81,8D
2864:  CALL   052A
2868:  MOVLW  3A
286A:  MOVWF  x8D
286C:  CALL   052A
2870:  MOVFF  82,8D
2874:  CALL   052A
2878:  MOVFF  83,8D
287C:  CALL   052A
*
2AE2:  MOVFF  80,8D
2AE6:  CALL   052A
2AEA:  MOVFF  81,8D
2AEE:  CALL   052A
2AF2:  MOVLW  3A
2AF4:  MOVWF  x8D
2AF6:  CALL   052A
2AFA:  MOVFF  82,8D
2AFE:  CALL   052A
2B02:  MOVFF  83,8D
2B06:  CALL   052A
*
2D34:  MOVFF  80,8D
2D38:  CALL   052A
2D3C:  MOVFF  81,8D
2D40:  CALL   052A
2D44:  MOVLW  3A
2D46:  MOVWF  x8D
2D48:  CALL   052A
2D4C:  MOVFF  82,8D
2D50:  CALL   052A
2D54:  MOVFF  83,8D
2D58:  CALL   052A
*
2FBE:  MOVFF  80,8D
2FC2:  CALL   052A
2FC6:  MOVFF  81,8D
2FCA:  CALL   052A
2FCE:  MOVLW  3A
2FD0:  MOVWF  x8D
2FD2:  CALL   052A
2FD6:  MOVFF  82,8D
2FDA:  CALL   052A
2FDE:  MOVFF  83,8D
2FE2:  CALL   052A
*
3210:  MOVFF  80,8D
3214:  CALL   052A
3218:  MOVFF  81,8D
321C:  CALL   052A
3220:  MOVLW  3A
3222:  MOVWF  x8D
3224:  CALL   052A
3228:  MOVFF  82,8D
322C:  CALL   052A
3230:  MOVFF  83,8D
3234:  CALL   052A
*
3498:  MOVFF  80,8D
349C:  CALL   052A
34A0:  MOVFF  81,8D
34A4:  CALL   052A
34A8:  MOVLW  3A
34AA:  MOVWF  x8D
34AC:  CALL   052A
34B0:  MOVFF  82,8D
34B4:  CALL   052A
34B8:  MOVFF  83,8D
34BC:  CALL   052A
*
36EA:  MOVFF  80,8D
36EE:  CALL   052A
36F2:  MOVFF  81,8D
36F6:  CALL   052A
36FA:  MOVLW  3A
36FC:  MOVWF  x8D
36FE:  CALL   052A
3702:  MOVFF  82,8D
3706:  CALL   052A
370A:  MOVFF  83,8D
370E:  CALL   052A
....................    delay_ms(500); 
*
0CCA:  MOVLW  02
0CCC:  MOVWF  x85
0CCE:  MOVLW  FA
0CD0:  MOVWF  x8E
0CD2:  CALL   02C4
0CD6:  DECFSZ x85,F
0CD8:  BRA    0CCE
*
179A:  MOVLW  02
179C:  MOVWF  x85
179E:  MOVLW  FA
17A0:  MOVWF  x8E
17A2:  CALL   02C4
17A6:  DECFSZ x85,F
17A8:  BRA    179E
*
19EC:  MOVLW  02
19EE:  MOVWF  x85
19F0:  MOVLW  FA
19F2:  MOVWF  x8E
19F4:  CALL   02C4
19F8:  DECFSZ x85,F
19FA:  BRA    19F0
*
1C76:  MOVLW  02
1C78:  MOVWF  x85
1C7A:  MOVLW  FA
1C7C:  MOVWF  x8E
1C7E:  CALL   02C4
1C82:  DECFSZ x85,F
1C84:  BRA    1C7A
*
1EC8:  MOVLW  02
1ECA:  MOVWF  x85
1ECC:  MOVLW  FA
1ECE:  MOVWF  x8E
1ED0:  CALL   02C4
1ED4:  DECFSZ x85,F
1ED6:  BRA    1ECC
*
2152:  MOVLW  02
2154:  MOVWF  x85
2156:  MOVLW  FA
2158:  MOVWF  x8E
215A:  CALL   02C4
215E:  DECFSZ x85,F
2160:  BRA    2156
*
23A4:  MOVLW  02
23A6:  MOVWF  x85
23A8:  MOVLW  FA
23AA:  MOVWF  x8E
23AC:  CALL   02C4
23B0:  DECFSZ x85,F
23B2:  BRA    23A8
*
262E:  MOVLW  02
2630:  MOVWF  x85
2632:  MOVLW  FA
2634:  MOVWF  x8E
2636:  CALL   02C4
263A:  DECFSZ x85,F
263C:  BRA    2632
*
2880:  MOVLW  02
2882:  MOVWF  x85
2884:  MOVLW  FA
2886:  MOVWF  x8E
2888:  CALL   02C4
288C:  DECFSZ x85,F
288E:  BRA    2884
*
2B0A:  MOVLW  02
2B0C:  MOVWF  x85
2B0E:  MOVLW  FA
2B10:  MOVWF  x8E
2B12:  CALL   02C4
2B16:  DECFSZ x85,F
2B18:  BRA    2B0E
*
2D5C:  MOVLW  02
2D5E:  MOVWF  x85
2D60:  MOVLW  FA
2D62:  MOVWF  x8E
2D64:  CALL   02C4
2D68:  DECFSZ x85,F
2D6A:  BRA    2D60
*
2FE6:  MOVLW  02
2FE8:  MOVWF  x85
2FEA:  MOVLW  FA
2FEC:  MOVWF  x8E
2FEE:  CALL   02C4
2FF2:  DECFSZ x85,F
2FF4:  BRA    2FEA
*
3238:  MOVLW  02
323A:  MOVWF  x85
323C:  MOVLW  FA
323E:  MOVWF  x8E
3240:  CALL   02C4
3244:  DECFSZ x85,F
3246:  BRA    323C
*
34C0:  MOVLW  02
34C2:  MOVWF  x85
34C4:  MOVLW  FA
34C6:  MOVWF  x8E
34C8:  CALL   02C4
34CC:  DECFSZ x85,F
34CE:  BRA    34C4
*
3712:  MOVLW  02
3714:  MOVWF  x85
3716:  MOVLW  FA
3718:  MOVWF  x8E
371A:  CALL   02C4
371E:  DECFSZ x85,F
3720:  BRA    3716
....................    hr = concatenateAtoi (h[0],h[1]); 
*
0D08:  MOVFF  01,49
*
17D8:  MOVFF  01,08
*
1A2A:  MOVFF  01,0A
*
1CB4:  MOVFF  01,0C
*
1F06:  MOVFF  01,0E
*
2190:  MOVFF  01,10
*
23E2:  MOVFF  01,12
*
266C:  MOVFF  01,14
*
28BE:  MOVFF  01,16
*
2B48:  MOVFF  01,18
*
2D9A:  MOVFF  01,1A
*
3024:  MOVFF  01,1C
*
3276:  MOVFF  01,1E
*
34FE:  MOVFF  01,20
*
3750:  MOVFF  01,22
....................    min = concatenateAtoi (m[0],m[1]); 
*
0D3A:  MOVFF  01,4A
*
180A:  MOVFF  01,09
*
1A5C:  MOVFF  01,0B
*
1CE6:  MOVFF  01,0D
*
1F38:  MOVFF  01,0F
*
21C2:  MOVFF  01,11
*
2414:  MOVFF  01,13
*
269E:  MOVFF  01,15
*
28F0:  MOVFF  01,17
*
2B7A:  MOVFF  01,19
*
2DCC:  MOVFF  01,1B
*
3056:  MOVFF  01,1D
*
32A8:  MOVFF  01,1F
*
3530:  MOVFF  01,21
*
3782:  MOVFF  01,23
.................... } 
....................  
.................... void getDate(char message[],BYTE& day, BYTE& month, BYTE& year, BYTE& dow) 
.................... { 
*
0DBC:  CLRF   x72
....................    char d[2]; 
....................     
....................    char con = '\0'; 
....................    clean(2); 
0DBE:  MOVLW  02
0DC0:  MOVWF  x87
0DC2:  RCALL  0978
....................    printf (lcd_putc,"\a%s",message); 
0DC4:  MOVLW  07
0DC6:  MOVWF  x8D
0DC8:  CALL   052A
0DCC:  MOVFF  6F,FEA
0DD0:  MOVFF  6E,FE9
0DD4:  RCALL  09B2
....................    lcd_gotoxy (3,2); 
0DD6:  MOVLW  03
0DD8:  MOVWF  x8E
0DDA:  MOVLW  02
0DDC:  MOVWF  x8F
0DDE:  CALL   04E0
....................    printf (lcd_putc,"DD/MM/YY D"); 
0DE2:  MOVLW  F2
0DE4:  MOVWF  FF6
0DE6:  MOVLW  00
0DE8:  MOVWF  FF7
0DEA:  RCALL  0958
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
0DEC:  RCALL  089C
0DEE:  MOVFF  01,72
....................       ((con >= '0') && (con <= '3'))? (d[0]=con) :(con='\0');  
0DF2:  MOVF   x72,W
0DF4:  SUBLW  2F
0DF6:  BC    0E06
0DF8:  MOVF   x72,W
0DFA:  SUBLW  33
0DFC:  BNC   0E06
0DFE:  MOVFF  72,70
0E02:  MOVF   x70,W
0E04:  BRA    0E08
0E06:  CLRF   x72
....................    }while(con == '\0'); 
0E08:  MOVF   x72,F
0E0A:  BZ    0DEC
....................    lcd_gotoxy (3,2); 
0E0C:  MOVLW  03
0E0E:  MOVWF  x8E
0E10:  MOVLW  02
0E12:  MOVWF  x8F
0E14:  CALL   04E0
....................    printf (lcd_putc,"%cD/MM/YY D",d[0]); 
0E18:  MOVFF  70,8D
0E1C:  CALL   052A
0E20:  MOVLW  00
0E22:  MOVWF  FF6
0E24:  MOVLW  01
0E26:  MOVWF  FF7
0E28:  MOVLW  09
0E2A:  MOVWF  x87
0E2C:  RCALL  0672
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
0E2E:  RCALL  089C
0E30:  MOVFF  01,72
....................       if(d[0] == '0')( (con >= '1') && (con <= '9') )?(d[1]=con):(con='\0'); 
0E34:  MOVF   x70,W
0E36:  SUBLW  30
0E38:  BNZ   0E50
0E3A:  MOVF   x72,W
0E3C:  SUBLW  30
0E3E:  BC    0E4E
0E40:  MOVF   x72,W
0E42:  SUBLW  39
0E44:  BNC   0E4E
0E46:  MOVFF  72,71
0E4A:  MOVF   x71,W
0E4C:  BRA    0E50
0E4E:  CLRF   x72
....................       if(d[0]>'0' && d[0]<='2') ( (con >= '0') && (con <= '9') )?(d[1]=con):(con='\0'); 
0E50:  MOVF   x70,W
0E52:  SUBLW  30
0E54:  BC    0E72
0E56:  MOVF   x70,W
0E58:  SUBLW  32
0E5A:  BNC   0E72
0E5C:  MOVF   x72,W
0E5E:  SUBLW  2F
0E60:  BC    0E70
0E62:  MOVF   x72,W
0E64:  SUBLW  39
0E66:  BNC   0E70
0E68:  MOVFF  72,71
0E6C:  MOVF   x71,W
0E6E:  BRA    0E72
0E70:  CLRF   x72
....................       if(d[0]=='3') ( (con == '0') || (con == '1') )?(d[1]=con):(con='\0');  
0E72:  MOVF   x70,W
0E74:  SUBLW  33
0E76:  BNZ   0E8E
0E78:  MOVF   x72,W
0E7A:  SUBLW  30
0E7C:  BZ    0E84
0E7E:  MOVF   x72,W
0E80:  SUBLW  31
0E82:  BNZ   0E8C
0E84:  MOVFF  72,71
0E88:  MOVF   x71,W
0E8A:  BRA    0E8E
0E8C:  CLRF   x72
....................    }while(con == '\0'); 
0E8E:  MOVF   x72,F
0E90:  BZ    0E2E
....................    lcd_gotoxy (3,2); 
0E92:  MOVLW  03
0E94:  MOVWF  x8E
0E96:  MOVLW  02
0E98:  MOVWF  x8F
0E9A:  CALL   04E0
....................    printf (lcd_putc,"%c%c/MM/YY D",d[0],d[1]); 
0E9E:  MOVFF  70,8D
0EA2:  CALL   052A
0EA6:  MOVFF  71,8D
0EAA:  CALL   052A
0EAE:  MOVLW  0E
0EB0:  MOVWF  FF6
0EB2:  MOVLW  01
0EB4:  MOVWF  FF7
0EB6:  MOVLW  08
0EB8:  MOVWF  x87
0EBA:  CALL   0672
....................    day = concatenateAtoi(d[0],d[1]); 
*
0EEC:  MOVFF  01,4B
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
0EF0:  RCALL  089C
0EF2:  MOVFF  01,72
....................       ((con == '0') || (con == '1'))? (d[0]=con) :(con='\0');  
0EF6:  MOVF   x72,W
0EF8:  SUBLW  30
0EFA:  BZ    0F02
0EFC:  MOVF   x72,W
0EFE:  SUBLW  31
0F00:  BNZ   0F0A
0F02:  MOVFF  72,70
0F06:  MOVF   x70,W
0F08:  BRA    0F0C
0F0A:  CLRF   x72
....................    }while(con == '\0'); 
0F0C:  MOVF   x72,F
0F0E:  BZ    0EF0
....................    lcd_gotoxy (3,2); 
0F10:  MOVLW  03
0F12:  MOVWF  x8E
0F14:  MOVLW  02
0F16:  MOVWF  x8F
0F18:  CALL   04E0
....................    printf (lcd_putc,"%02d/%cM/YY D",day,d[0]); 
0F1C:  MOVFF  4B,87
0F20:  MOVLW  01
0F22:  MOVWF  x88
0F24:  CALL   057C
0F28:  MOVLW  2F
0F2A:  MOVWF  x8D
0F2C:  CALL   052A
0F30:  MOVFF  70,8D
0F34:  CALL   052A
0F38:  MOVLW  1F
0F3A:  MOVWF  FF6
0F3C:  MOVLW  01
0F3E:  MOVWF  FF7
0F40:  MOVLW  06
0F42:  MOVWF  x87
0F44:  CALL   0672
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
0F48:  RCALL  089C
0F4A:  MOVFF  01,72
....................       if(d[0]=='0') ( (con >= '1') && (con <= '9') )?(d[1]=con):(con='\0'); 
0F4E:  MOVF   x70,W
0F50:  SUBLW  30
0F52:  BNZ   0F6A
0F54:  MOVF   x72,W
0F56:  SUBLW  30
0F58:  BC    0F68
0F5A:  MOVF   x72,W
0F5C:  SUBLW  39
0F5E:  BNC   0F68
0F60:  MOVFF  72,71
0F64:  MOVF   x71,W
0F66:  BRA    0F6A
0F68:  CLRF   x72
....................       if(d[0]=='1') ( (con >= '0') && (con <= '2') )?(d[1]=con):(con='\0'); 
0F6A:  MOVF   x70,W
0F6C:  SUBLW  31
0F6E:  BNZ   0F86
0F70:  MOVF   x72,W
0F72:  SUBLW  2F
0F74:  BC    0F84
0F76:  MOVF   x72,W
0F78:  SUBLW  32
0F7A:  BNC   0F84
0F7C:  MOVFF  72,71
0F80:  MOVF   x71,W
0F82:  BRA    0F86
0F84:  CLRF   x72
....................    }while(con == '\0'); 
0F86:  MOVF   x72,F
0F88:  BZ    0F48
....................    lcd_gotoxy (3,2); 
0F8A:  MOVLW  03
0F8C:  MOVWF  x8E
0F8E:  MOVLW  02
0F90:  MOVWF  x8F
0F92:  CALL   04E0
....................    month = concatenateAtoi(d[0],d[1]); 
*
0FC4:  MOVFF  01,4C
....................    switch(month) 
....................    { 
0FC8:  MOVF   4C,W
0FCA:  XORLW  02
0FCC:  BZ    0FE0
0FCE:  XORLW  06
0FD0:  BZ    0FEC
0FD2:  XORLW  02
0FD4:  BZ    0FF8
0FD6:  XORLW  0F
0FD8:  BZ    1004
0FDA:  XORLW  05
0FDC:  BZ    1010
0FDE:  BRA    101C
....................    case 2:{if(day > 28)day=28; break;} 
0FE0:  MOVF   4B,W
0FE2:  SUBLW  1C
0FE4:  BC    0FEA
0FE6:  MOVLW  1C
0FE8:  MOVWF  4B
0FEA:  BRA    101C
....................    case 4:{if(day > 30)day=30; break;} 
0FEC:  MOVF   4B,W
0FEE:  SUBLW  1E
0FF0:  BC    0FF6
0FF2:  MOVLW  1E
0FF4:  MOVWF  4B
0FF6:  BRA    101C
....................    case 6:{if(day > 28)day=28; break;} 
0FF8:  MOVF   4B,W
0FFA:  SUBLW  1C
0FFC:  BC    1002
0FFE:  MOVLW  1C
1000:  MOVWF  4B
1002:  BRA    101C
....................    case 9:{if(day > 28)day=28; break;} 
1004:  MOVF   4B,W
1006:  SUBLW  1C
1008:  BC    100E
100A:  MOVLW  1C
100C:  MOVWF  4B
100E:  BRA    101C
....................    case 12:{if(day > 28)day=28; break;} 
1010:  MOVF   4B,W
1012:  SUBLW  1C
1014:  BC    101A
1016:  MOVLW  1C
1018:  MOVWF  4B
101A:  BRA    101C
....................    } 
....................    printf (lcd_putc,"%02d/%02d/YY D",day,month); 
101C:  MOVFF  4B,87
1020:  MOVLW  01
1022:  MOVWF  x88
1024:  CALL   057C
1028:  MOVLW  2F
102A:  MOVWF  x8D
102C:  CALL   052A
1030:  MOVFF  4C,87
1034:  MOVLW  01
1036:  MOVWF  x88
1038:  CALL   057C
103C:  MOVLW  2F
103E:  MOVWF  FF6
1040:  MOVLW  01
1042:  MOVWF  FF7
1044:  MOVLW  05
1046:  MOVWF  x87
1048:  CALL   0672
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
104C:  RCALL  089C
104E:  MOVFF  01,72
....................       ((con >= '0') && (con <= '9'))? (d[0]=con) :(con='\0');  
1052:  MOVF   x72,W
1054:  SUBLW  2F
1056:  BC    1066
1058:  MOVF   x72,W
105A:  SUBLW  39
105C:  BNC   1066
105E:  MOVFF  72,70
1062:  MOVF   x70,W
1064:  BRA    1068
1066:  CLRF   x72
....................    }while(con == '\0'); 
1068:  MOVF   x72,F
106A:  BZ    104C
....................    lcd_gotoxy (3,2); 
106C:  MOVLW  03
106E:  MOVWF  x8E
1070:  MOVLW  02
1072:  MOVWF  x8F
1074:  CALL   04E0
....................    printf (lcd_putc,"%02d/%02d/%cY D",day,month,d[0]); 
1078:  MOVFF  4B,87
107C:  MOVLW  01
107E:  MOVWF  x88
1080:  CALL   057C
1084:  MOVLW  2F
1086:  MOVWF  x8D
1088:  CALL   052A
108C:  MOVFF  4C,87
1090:  MOVLW  01
1092:  MOVWF  x88
1094:  CALL   057C
1098:  MOVLW  2F
109A:  MOVWF  x8D
109C:  CALL   052A
10A0:  MOVFF  70,8D
10A4:  CALL   052A
10A8:  MOVLW  59
10AA:  MOVWF  x8D
10AC:  CALL   052A
10B0:  MOVLW  20
10B2:  MOVWF  x8D
10B4:  CALL   052A
10B8:  MOVLW  44
10BA:  MOVWF  x8D
10BC:  CALL   052A
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
10C0:  CALL   089C
10C4:  MOVFF  01,72
....................       ((con >= '0') && (con <= '9'))? (d[1]=con) :(con='\0');  
10C8:  MOVF   x72,W
10CA:  SUBLW  2F
10CC:  BC    10DC
10CE:  MOVF   x72,W
10D0:  SUBLW  39
10D2:  BNC   10DC
10D4:  MOVFF  72,71
10D8:  MOVF   x71,W
10DA:  BRA    10DE
10DC:  CLRF   x72
....................    }while(con == '\0'); 
10DE:  MOVF   x72,F
10E0:  BZ    10C0
....................    lcd_gotoxy (3,2); 
10E2:  MOVLW  03
10E4:  MOVWF  x8E
10E6:  MOVLW  02
10E8:  MOVWF  x8F
10EA:  CALL   04E0
....................    year=concatenateAtoi(d[0],d[1]); 
*
111C:  MOVFF  01,4D
....................    printf (lcd_putc,"%02d/%02d/%02d D",day,month,year); 
1120:  MOVFF  4B,87
1124:  MOVLW  01
1126:  MOVWF  x88
1128:  CALL   057C
112C:  MOVLW  2F
112E:  MOVWF  x8D
1130:  CALL   052A
1134:  MOVFF  4C,87
1138:  MOVLW  01
113A:  MOVWF  x88
113C:  CALL   057C
1140:  MOVLW  2F
1142:  MOVWF  x8D
1144:  CALL   052A
1148:  MOVFF  4D,87
114C:  MOVLW  01
114E:  MOVWF  x88
1150:  CALL   057C
1154:  MOVLW  20
1156:  MOVWF  x8D
1158:  CALL   052A
115C:  MOVLW  44
115E:  MOVWF  x8D
1160:  CALL   052A
....................     
....................    do 
....................    { 
....................       con = kbd_getc(); 
1164:  CALL   089C
1168:  MOVFF  01,72
....................       ((con >= '1') && (con <= '9'))? (d[0]=con) :(con='\0');  
116C:  MOVF   x72,W
116E:  SUBLW  30
1170:  BC    1180
1172:  MOVF   x72,W
1174:  SUBLW  39
1176:  BNC   1180
1178:  MOVFF  72,70
117C:  MOVF   x70,W
117E:  BRA    1182
1180:  CLRF   x72
....................    }while(con == '\0'); 
1182:  MOVF   x72,F
1184:  BZ    1164
....................    lcd_gotoxy (3,2); 
1186:  MOVLW  03
1188:  MOVWF  x8E
118A:  MOVLW  02
118C:  MOVWF  x8F
118E:  CALL   04E0
....................    dow =(int)(d[0]-'0'); 
1192:  MOVLW  30
1194:  SUBWF  x70,W
1196:  MOVWF  4E
....................    printf (lcd_putc,"%02d/%02d/%02d %02d",day,month,year,dow); 
1198:  MOVFF  4B,87
119C:  MOVLW  01
119E:  MOVWF  x88
11A0:  CALL   057C
11A4:  MOVLW  2F
11A6:  MOVWF  x8D
11A8:  CALL   052A
11AC:  MOVFF  4C,87
11B0:  MOVLW  01
11B2:  MOVWF  x88
11B4:  CALL   057C
11B8:  MOVLW  2F
11BA:  MOVWF  x8D
11BC:  CALL   052A
11C0:  MOVFF  4D,87
11C4:  MOVLW  01
11C6:  MOVWF  x88
11C8:  CALL   057C
11CC:  MOVLW  20
11CE:  MOVWF  x8D
11D0:  CALL   052A
11D4:  MOVFF  4E,87
11D8:  MOVLW  01
11DA:  MOVWF  x88
11DC:  CALL   057C
....................    delay_ms(1000); 
11E0:  MOVLW  04
11E2:  MOVWF  x73
11E4:  MOVLW  FA
11E6:  MOVWF  x8E
11E8:  CALL   02C4
11EC:  DECFSZ x73,F
11EE:  BRA    11E4
.................... } 
....................  
.................... void configClock() 
.................... { 
....................    BYTE hour,min,day,month,year,dow; 
....................    clean(2); 
*
0A98:  MOVLW  02
0A9A:  MOVWF  x87
0A9C:  RCALL  0978
....................    int a = 1; 
0A9E:  MOVLW  01
0AA0:  MOVWF  4F
....................    lcd_gotoxy (2,2);  
0AA2:  MOVLW  02
0AA4:  MOVWF  x8E
0AA6:  MOVWF  x8F
0AA8:  RCALL  04E0
....................    printf(lcd_putc "<   enter   >"); 
0AAA:  MOVLW  36
0AAC:  MOVWF  FF6
0AAE:  MOVLW  01
0AB0:  MOVWF  FF7
0AB2:  RCALL  0958
....................    while (a!=0) 
....................    { 
0AB4:  MOVF   4F,F
0AB6:  BTFSC  FD8.2
0AB8:  GOTO   1246
....................       char c; 
....................       switch (a) 
....................       { 
0ABC:  MOVF   4F,W
0ABE:  XORLW  01
0AC0:  BZ    0AD4
0AC2:  XORLW  03
0AC4:  BTFSC  FD8.2
0AC6:  BRA    0D52
0AC8:  XORLW  01
0ACA:  BTFSC  FD8.2
0ACC:  GOTO   120C
0AD0:  GOTO   1244
....................       case 1: 
....................       { 
....................          char message[]={"-NUEVA HORA-"}; 
0AD4:  MOVLW  2D
0AD6:  MOVWF  51
0AD8:  MOVLW  4E
0ADA:  MOVWF  52
0ADC:  MOVLW  55
0ADE:  MOVWF  53
0AE0:  MOVLW  45
0AE2:  MOVWF  54
0AE4:  MOVLW  56
0AE6:  MOVWF  55
0AE8:  MOVLW  41
0AEA:  MOVWF  56
0AEC:  MOVLW  20
0AEE:  MOVWF  57
0AF0:  MOVLW  48
0AF2:  MOVWF  58
0AF4:  MOVLW  4F
0AF6:  MOVWF  59
0AF8:  MOVLW  52
0AFA:  MOVWF  5A
0AFC:  MOVLW  41
0AFE:  MOVWF  5B
0B00:  MOVLW  2D
0B02:  MOVWF  5C
0B04:  CLRF   5D
....................          clean(1); 
0B06:  MOVLW  01
0B08:  MOVWF  x87
0B0A:  RCALL  0978
....................          printf(lcd_putc,"\a-CONFIG HOUR-"); 
0B0C:  MOVLW  44
0B0E:  MOVWF  FF6
0B10:  MOVLW  01
0B12:  MOVWF  FF7
0B14:  RCALL  0958
....................          c = kbd_getc(); 
0B16:  RCALL  089C
0B18:  MOVFF  01,50
....................          if (c == '1') a=3; 
0B1C:  MOVF   50,W
0B1E:  SUBLW  31
0B20:  BNZ   0B26
0B22:  MOVLW  03
0B24:  MOVWF  4F
....................          if (c == '2') {getHour(message,hour,min); rtc_set_time(hour,min);} 
0B26:  MOVF   50,W
0B28:  SUBLW  32
0B2A:  BTFSS  FD8.2
0B2C:  BRA    0D48
0B2E:  CLRF   x6D
0B30:  MOVLW  51
0B32:  MOVWF  x6C
0B34:  MOVFF  6D,7F
0B38:  MOVFF  6C,7E
*
0D3E:  MOVFF  49,6C
0D42:  MOVFF  4A,6D
0D46:  BRA    09FE
....................          if (c == '3') ++a; 
0D48:  MOVF   50,W
0D4A:  SUBLW  33
0D4C:  BTFSC  FD8.2
0D4E:  INCF   4F,F
....................           
....................          break; 
0D50:  BRA    1244
....................       } 
....................       case 2: 
....................       { 
....................          char message[]={"-NUEVA FECHA-"}; 
0D52:  MOVLW  2D
0D54:  MOVWF  5E
0D56:  MOVLW  4E
0D58:  MOVWF  5F
0D5A:  MOVLW  55
0D5C:  MOVWF  x60
0D5E:  MOVLW  45
0D60:  MOVWF  x61
0D62:  MOVLW  56
0D64:  MOVWF  x62
0D66:  MOVLW  41
0D68:  MOVWF  x63
0D6A:  MOVLW  20
0D6C:  MOVWF  x64
0D6E:  MOVLW  46
0D70:  MOVWF  x65
0D72:  MOVLW  45
0D74:  MOVWF  x66
0D76:  MOVLW  43
0D78:  MOVWF  x67
0D7A:  MOVLW  48
0D7C:  MOVWF  x68
0D7E:  MOVLW  41
0D80:  MOVWF  x69
0D82:  MOVLW  2D
0D84:  MOVWF  x6A
0D86:  CLRF   x6B
....................          clean(1); 
0D88:  MOVLW  01
0D8A:  MOVWF  x87
0D8C:  RCALL  0978
....................          printf(lcd_putc,"\a-CONFIG DATE-"); 
0D8E:  MOVLW  54
0D90:  MOVWF  FF6
0D92:  MOVLW  01
0D94:  MOVWF  FF7
0D96:  RCALL  0958
....................          c = kbd_getc(); 
0D98:  RCALL  089C
0D9A:  MOVFF  01,50
....................          if (c == '1') --a; 
0D9E:  MOVF   50,W
0DA0:  SUBLW  31
0DA2:  BTFSC  FD8.2
0DA4:  DECF   4F,F
....................          if (c == '2') {getDate(message,day,month,year,dow); rtc_set_date(day,month,year,dow);} 
0DA6:  MOVF   50,W
0DA8:  SUBLW  32
0DAA:  BTFSS  FD8.2
0DAC:  BRA    1202
0DAE:  CLRF   x6D
0DB0:  MOVLW  5E
0DB2:  MOVWF  x6C
0DB4:  MOVFF  6D,6F
0DB8:  MOVFF  6C,6E
*
11F0:  MOVFF  4B,6C
11F4:  MOVFF  4C,6D
11F8:  MOVFF  4D,6E
11FC:  MOVFF  4E,6F
1200:  BRA    0A3C
....................          if (c == '3') ++a; 
1202:  MOVF   50,W
1204:  SUBLW  33
1206:  BTFSC  FD8.2
1208:  INCF   4F,F
....................          break; 
120A:  BRA    1244
....................       } 
....................       case 3: 
....................       { 
....................          clean(1); 
120C:  MOVLW  01
120E:  MOVWF  x87
1210:  CALL   0978
....................          printf(lcd_putc,"\a-EXIT-"); 
1214:  MOVLW  64
1216:  MOVWF  FF6
1218:  MOVLW  01
121A:  MOVWF  FF7
121C:  CALL   0958
....................          c = kbd_getc(); 
1220:  CALL   089C
1224:  MOVFF  01,50
....................          if (c == '1') --a; 
1228:  MOVF   50,W
122A:  SUBLW  31
122C:  BTFSC  FD8.2
122E:  DECF   4F,F
....................          if (c == '2') a = 0; 
1230:  MOVF   50,W
1232:  SUBLW  32
1234:  BTFSC  FD8.2
1236:  CLRF   4F
....................          if (c == '3') a = 1; 
1238:  MOVF   50,W
123A:  SUBLW  33
123C:  BNZ   1242
123E:  MOVLW  01
1240:  MOVWF  4F
....................          break; 
1242:  BRA    1244
....................       } 
....................       } 
....................    }   
1244:  BRA    0AB4
.................... } 
1246:  GOTO   149E (RETURN)
....................  
.................... void configOnOff(Week& schedule) 
.................... { 
....................    char message1[]={"-HORA ON-"}; 
*
14D8:  MOVLW  2D
14DA:  MOVWF  49
14DC:  MOVLW  48
14DE:  MOVWF  4A
14E0:  MOVLW  4F
14E2:  MOVWF  4B
14E4:  MOVLW  52
14E6:  MOVWF  4C
14E8:  MOVLW  41
14EA:  MOVWF  4D
14EC:  MOVLW  20
14EE:  MOVWF  4E
14F0:  MOVLW  4F
14F2:  MOVWF  4F
14F4:  MOVLW  4E
14F6:  MOVWF  50
14F8:  MOVLW  2D
14FA:  MOVWF  51
14FC:  CLRF   52
....................    char message2[]={"-HORA OFF-"}; 
14FE:  MOVWF  53
1500:  MOVLW  48
1502:  MOVWF  54
1504:  MOVLW  4F
1506:  MOVWF  55
1508:  MOVLW  52
150A:  MOVWF  56
150C:  MOVLW  41
150E:  MOVWF  57
1510:  MOVLW  20
1512:  MOVWF  58
1514:  MOVLW  4F
1516:  MOVWF  59
1518:  MOVLW  46
151A:  MOVWF  5A
151C:  MOVWF  5B
151E:  MOVLW  2D
1520:  MOVWF  5C
1522:  CLRF   5D
....................    clean(2); 
1524:  MOVLW  02
1526:  MOVWF  x87
1528:  CALL   0978
....................    int a = 1; 
152C:  MOVLW  01
152E:  MOVWF  5E
....................    lcd_gotoxy (2,2);  
1530:  MOVLW  02
1532:  MOVWF  x8E
1534:  MOVWF  x8F
1536:  CALL   04E0
....................    printf(lcd_putc "<   enter   >"); 
153A:  MOVLW  6C
153C:  MOVWF  FF6
153E:  MOVLW  01
1540:  MOVWF  FF7
1542:  CALL   0958
....................    while (a!=0) 
....................    { 
1546:  MOVF   5E,F
1548:  BTFSC  FD8.2
154A:  GOTO   37CC
....................       char c; 
....................       switch (a) 
....................       { 
154E:  MOVF   5E,W
1550:  XORLW  01
1552:  BZ    158E
1554:  XORLW  03
1556:  BTFSC  FD8.2
1558:  BRA    1A6C
155A:  XORLW  01
155C:  BTFSC  FD8.2
155E:  GOTO   1F48
1562:  XORLW  07
1564:  BTFSC  FD8.2
1566:  GOTO   2424
156A:  XORLW  01
156C:  BTFSC  FD8.2
156E:  GOTO   2900
1572:  XORLW  03
1574:  BTFSC  FD8.2
1576:  GOTO   2DDC
157A:  XORLW  01
157C:  BTFSC  FD8.2
157E:  GOTO   32B6
1582:  XORLW  0F
1584:  BTFSC  FD8.2
1586:  GOTO   3790
158A:  GOTO   37C8
....................       case 1: 
....................       { 
....................          clean(1); 
158E:  MOVLW  01
1590:  MOVWF  x87
1592:  CALL   0978
....................          printf(lcd_putc,"\a-LUNES-"); 
1596:  MOVLW  7A
1598:  MOVWF  FF6
159A:  MOVLW  01
159C:  MOVWF  FF7
159E:  CALL   0958
....................          c = kbd_getc(); 
15A2:  CALL   089C
15A6:  MOVFF  01,5F
....................          if (c == '1') a=8; 
15AA:  MOVF   5F,W
15AC:  SUBLW  31
15AE:  BNZ   15B4
15B0:  MOVLW  08
15B2:  MOVWF  5E
....................          if (c == '2')  
15B4:  MOVF   5F,W
15B6:  SUBLW  32
15B8:  BTFSS  FD8.2
15BA:  BRA    1A60
....................          { 
....................             getHour(message1, schedule.monday.on.hour, schedule.monday.on.min); 
15BC:  CLRF   x61
15BE:  MOVLW  49
15C0:  MOVWF  x60
15C2:  MOVFF  61,7F
15C6:  MOVFF  60,7E
....................             getHour(message2, schedule.monday.off.hour, schedule.monday.off.min); 
*
180E:  CLRF   x61
1810:  MOVLW  53
1812:  MOVWF  x60
1814:  MOVFF  61,7F
1818:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
1A60:  MOVF   5F,W
1A62:  SUBLW  33
1A64:  BTFSC  FD8.2
1A66:  INCF   5E,F
....................          break; 
1A68:  GOTO   37C8
....................       } 
....................       case 2: 
....................       { 
....................          clean(1); 
1A6C:  MOVLW  01
1A6E:  MOVWF  x87
1A70:  CALL   0978
....................          printf(lcd_putc,"\a-MARTES-"); 
1A74:  MOVLW  84
1A76:  MOVWF  FF6
1A78:  MOVLW  01
1A7A:  MOVWF  FF7
1A7C:  CALL   0958
....................          c = kbd_getc(); 
1A80:  CALL   089C
1A84:  MOVFF  01,5F
....................          if (c == '1') --a; 
1A88:  MOVF   5F,W
1A8A:  SUBLW  31
1A8C:  BTFSC  FD8.2
1A8E:  DECF   5E,F
....................          if (c == '2') 
1A90:  MOVF   5F,W
1A92:  SUBLW  32
1A94:  BTFSS  FD8.2
1A96:  BRA    1F3C
....................          { 
....................             getHour(message1, schedule.tuesday.on.hour, schedule.tuesday.on.min); 
1A98:  CLRF   x61
1A9A:  MOVLW  49
1A9C:  MOVWF  x60
1A9E:  MOVFF  61,7F
1AA2:  MOVFF  60,7E
....................             getHour(message2, schedule.tuesday.off.hour, schedule.tuesday.off.min); 
*
1CEA:  CLRF   x61
1CEC:  MOVLW  53
1CEE:  MOVWF  x60
1CF0:  MOVFF  61,7F
1CF4:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
1F3C:  MOVF   5F,W
1F3E:  SUBLW  33
1F40:  BTFSC  FD8.2
1F42:  INCF   5E,F
....................          break; 
1F44:  GOTO   37C8
....................       }   
....................       case 3: 
....................       { 
....................          clean(1); 
1F48:  MOVLW  01
1F4A:  MOVWF  x87
1F4C:  CALL   0978
....................          printf(lcd_putc,"\a-MIERCOLES-"); 
1F50:  MOVLW  8E
1F52:  MOVWF  FF6
1F54:  MOVLW  01
1F56:  MOVWF  FF7
1F58:  CALL   0958
....................          c = kbd_getc(); 
1F5C:  CALL   089C
1F60:  MOVFF  01,5F
....................          if (c == '1') --a; 
1F64:  MOVF   5F,W
1F66:  SUBLW  31
1F68:  BTFSC  FD8.2
1F6A:  DECF   5E,F
....................          if (c == '2') 
1F6C:  MOVF   5F,W
1F6E:  SUBLW  32
1F70:  BTFSS  FD8.2
1F72:  BRA    2418
....................          { 
....................             getHour(message1, schedule.wednesday.on.hour, schedule.wednesday.on.min); 
1F74:  CLRF   x61
1F76:  MOVLW  49
1F78:  MOVWF  x60
1F7A:  MOVFF  61,7F
1F7E:  MOVFF  60,7E
....................             getHour(message2, schedule.wednesday.off.hour, schedule.wednesday.off.min); 
*
21C6:  CLRF   x61
21C8:  MOVLW  53
21CA:  MOVWF  x60
21CC:  MOVFF  61,7F
21D0:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
2418:  MOVF   5F,W
241A:  SUBLW  33
241C:  BTFSC  FD8.2
241E:  INCF   5E,F
....................          break; 
2420:  GOTO   37C8
....................       } 
....................       case 4: 
....................       { 
....................          clean(1); 
2424:  MOVLW  01
2426:  MOVWF  x87
2428:  CALL   0978
....................          printf(lcd_putc,"\a-JUEVES-"); 
242C:  MOVLW  9C
242E:  MOVWF  FF6
2430:  MOVLW  01
2432:  MOVWF  FF7
2434:  CALL   0958
....................          c = kbd_getc(); 
2438:  CALL   089C
243C:  MOVFF  01,5F
....................          if (c == '1') --a; 
2440:  MOVF   5F,W
2442:  SUBLW  31
2444:  BTFSC  FD8.2
2446:  DECF   5E,F
....................          if (c == '2') 
2448:  MOVF   5F,W
244A:  SUBLW  32
244C:  BTFSS  FD8.2
244E:  BRA    28F4
....................          { 
....................             getHour(message1, schedule.thursday.on.hour, schedule.thursday.on.min); 
2450:  CLRF   x61
2452:  MOVLW  49
2454:  MOVWF  x60
2456:  MOVFF  61,7F
245A:  MOVFF  60,7E
....................             getHour(message2, schedule.thursday.off.hour, schedule.thursday.off.min); 
*
26A2:  CLRF   x61
26A4:  MOVLW  53
26A6:  MOVWF  x60
26A8:  MOVFF  61,7F
26AC:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
28F4:  MOVF   5F,W
28F6:  SUBLW  33
28F8:  BTFSC  FD8.2
28FA:  INCF   5E,F
....................          break; 
28FC:  GOTO   37C8
....................       } 
....................       case 5: 
....................       { 
....................          clean(1); 
2900:  MOVLW  01
2902:  MOVWF  x87
2904:  CALL   0978
....................          printf(lcd_putc,"\a-VIERNES-"); 
2908:  MOVLW  A6
290A:  MOVWF  FF6
290C:  MOVLW  01
290E:  MOVWF  FF7
2910:  CALL   0958
....................          c = kbd_getc(); 
2914:  CALL   089C
2918:  MOVFF  01,5F
....................          if (c == '1') --a; 
291C:  MOVF   5F,W
291E:  SUBLW  31
2920:  BTFSC  FD8.2
2922:  DECF   5E,F
....................          if (c == '2') 
2924:  MOVF   5F,W
2926:  SUBLW  32
2928:  BTFSS  FD8.2
292A:  BRA    2DD0
....................          { 
....................             getHour(message1, schedule.friday.on.hour, schedule.friday.on.min); 
292C:  CLRF   x61
292E:  MOVLW  49
2930:  MOVWF  x60
2932:  MOVFF  61,7F
2936:  MOVFF  60,7E
....................             getHour(message2, schedule.friday.off.hour, schedule.friday.off.min); 
*
2B7E:  CLRF   x61
2B80:  MOVLW  53
2B82:  MOVWF  x60
2B84:  MOVFF  61,7F
2B88:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
2DD0:  MOVF   5F,W
2DD2:  SUBLW  33
2DD4:  BTFSC  FD8.2
2DD6:  INCF   5E,F
....................          break; 
2DD8:  GOTO   37C8
....................       } 
....................       case 6: 
....................       { 
....................          clean(1); 
2DDC:  MOVLW  01
2DDE:  MOVWF  x87
2DE0:  CALL   0978
....................          printf(lcd_putc,"\a-SABADO-"); 
2DE4:  MOVLW  B2
2DE6:  MOVWF  FF6
2DE8:  MOVLW  01
2DEA:  MOVWF  FF7
2DEC:  CALL   0958
....................          c = kbd_getc(); 
2DF0:  CALL   089C
2DF4:  MOVFF  01,5F
....................          if (c == '1') --a; 
2DF8:  MOVF   5F,W
2DFA:  SUBLW  31
2DFC:  BTFSC  FD8.2
2DFE:  DECF   5E,F
....................          if (c == '2') 
2E00:  MOVF   5F,W
2E02:  SUBLW  32
2E04:  BTFSS  FD8.2
2E06:  BRA    32AC
....................          { 
....................             getHour(message1, schedule.saturday.on.hour, schedule.saturday.on.min); 
2E08:  CLRF   x61
2E0A:  MOVLW  49
2E0C:  MOVWF  x60
2E0E:  MOVFF  61,7F
2E12:  MOVFF  60,7E
....................             getHour(message2, schedule.saturday.off.hour, schedule.saturday.off.min); 
*
305A:  CLRF   x61
305C:  MOVLW  53
305E:  MOVWF  x60
3060:  MOVFF  61,7F
3064:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
32AC:  MOVF   5F,W
32AE:  SUBLW  33
32B0:  BTFSC  FD8.2
32B2:  INCF   5E,F
....................          break; 
32B4:  BRA    37C8
....................       } 
....................       case 7: 
....................       { 
....................          clean(1); 
32B6:  MOVLW  01
32B8:  MOVWF  x87
32BA:  CALL   0978
....................          printf(lcd_putc,"\a-DOMINGO-"); 
32BE:  MOVLW  BC
32C0:  MOVWF  FF6
32C2:  MOVLW  01
32C4:  MOVWF  FF7
32C6:  CALL   0958
....................          c = kbd_getc(); 
32CA:  CALL   089C
32CE:  MOVFF  01,5F
....................          if (c == '1') --a; 
32D2:  MOVF   5F,W
32D4:  SUBLW  31
32D6:  BTFSC  FD8.2
32D8:  DECF   5E,F
....................          if (c == '2') 
32DA:  MOVF   5F,W
32DC:  SUBLW  32
32DE:  BTFSS  FD8.2
32E0:  BRA    3786
....................          { 
....................             getHour(message1, schedule.sunday.on.hour, schedule.sunday.on.min); 
32E2:  CLRF   x61
32E4:  MOVLW  49
32E6:  MOVWF  x60
32E8:  MOVFF  61,7F
32EC:  MOVFF  60,7E
....................             getHour(message2, schedule.sunday.off.hour, schedule.sunday.off.min); 
*
3534:  CLRF   x61
3536:  MOVLW  53
3538:  MOVWF  x60
353A:  MOVFF  61,7F
353E:  MOVFF  60,7E
....................          } 
....................          if (c == '3') ++a; 
*
3786:  MOVF   5F,W
3788:  SUBLW  33
378A:  BTFSC  FD8.2
378C:  INCF   5E,F
....................          break; 
378E:  BRA    37C8
....................       } 
....................       case 8: 
....................       { 
....................          clean(1); 
3790:  MOVLW  01
3792:  MOVWF  x87
3794:  CALL   0978
....................          printf(lcd_putc,"\a-EXIT CONFIG-"); 
3798:  MOVLW  C8
379A:  MOVWF  FF6
379C:  MOVLW  01
379E:  MOVWF  FF7
37A0:  CALL   0958
....................          c = kbd_getc(); 
37A4:  CALL   089C
37A8:  MOVFF  01,5F
....................          if (c == '1') --a; 
37AC:  MOVF   5F,W
37AE:  SUBLW  31
37B0:  BTFSC  FD8.2
37B2:  DECF   5E,F
....................          if (c == '2') a = 0; 
37B4:  MOVF   5F,W
37B6:  SUBLW  32
37B8:  BTFSC  FD8.2
37BA:  CLRF   5E
....................          if (c == '3') a = 1; 
37BC:  MOVF   5F,W
37BE:  SUBLW  33
37C0:  BNZ   37C6
37C2:  MOVLW  01
37C4:  MOVWF  5E
....................          break; 
37C6:  BRA    37C8
....................       } 
....................       } 
....................    } 
37C8:  GOTO   1546
....................    eepromLoad(1,&schedule); 
37CC:  MOVLW  01
37CE:  MOVWF  x7C
37D0:  CLRF   x7E
37D2:  MOVLW  08
37D4:  MOVWF  x7D
37D6:  GOTO   124A
.................... } 
....................  
.................... void menu(Week& schedule) 
.................... { 
....................    clean(2); 
*
142E:  MOVLW  02
1430:  MOVWF  x87
1432:  CALL   0978
....................    int a = 1; 
1436:  MOVLW  01
1438:  MOVWF  2B
....................    lcd_gotoxy (2,2);  
143A:  MOVLW  02
143C:  MOVWF  x8E
143E:  MOVWF  x8F
1440:  CALL   04E0
....................    printf(lcd_putc "<   enter   >"); 
1444:  MOVLW  D8
1446:  MOVWF  FF6
1448:  MOVLW  01
144A:  MOVWF  FF7
144C:  CALL   0958
....................    while (a!=0) 
....................    { 
1450:  MOVF   2B,F
1452:  BTFSC  FD8.2
1454:  GOTO   3820
....................       char c; 
....................       switch (a) 
....................       { 
1458:  MOVF   2B,W
145A:  XORLW  01
145C:  BZ    146E
145E:  XORLW  03
1460:  BZ    14AA
1462:  XORLW  01
1464:  BTFSC  FD8.2
1466:  GOTO   37E4
146A:  GOTO   381C
....................       case 1: 
....................          clean(1); 
146E:  MOVLW  01
1470:  MOVWF  x87
1472:  CALL   0978
....................          printf(lcd_putc,"\a-CONFIG RELOJ-"); 
1476:  MOVLW  E6
1478:  MOVWF  FF6
147A:  MOVLW  01
147C:  MOVWF  FF7
147E:  CALL   0958
....................          c = kbd_getc(); 
1482:  CALL   089C
1486:  MOVFF  01,2C
....................          if (c == '1') a=3; 
148A:  MOVF   2C,W
148C:  SUBLW  31
148E:  BNZ   1494
1490:  MOVLW  03
1492:  MOVWF  2B
....................          if (c == '2') configClock(); 
1494:  MOVF   2C,W
1496:  SUBLW  32
1498:  BNZ   149E
149A:  GOTO   0A98
....................          if (c == '3') ++a; 
149E:  MOVF   2C,W
14A0:  SUBLW  33
14A2:  BTFSC  FD8.2
14A4:  INCF   2B,F
....................          break; 
14A6:  GOTO   381C
....................        
....................       case 2: 
....................          clean(1); 
14AA:  MOVLW  01
14AC:  MOVWF  x87
14AE:  CALL   0978
....................          printf(lcd_putc,"\a-CONFIG ON/OFF-"); 
14B2:  MOVLW  F6
14B4:  MOVWF  FF6
14B6:  MOVLW  01
14B8:  MOVWF  FF7
14BA:  CALL   0958
....................          c = kbd_getc(); 
14BE:  CALL   089C
14C2:  MOVFF  01,2C
....................          if (c == '1') --a; 
14C6:  MOVF   2C,W
14C8:  SUBLW  31
14CA:  BTFSC  FD8.2
14CC:  DECF   2B,F
....................          if (c == '2') configOnOff(schedule); 
14CE:  MOVF   2C,W
14D0:  SUBLW  32
14D2:  BTFSS  FD8.2
14D4:  GOTO   37DA
....................          if (c == '3') ++a; 
*
37DA:  MOVF   2C,W
37DC:  SUBLW  33
37DE:  BTFSC  FD8.2
37E0:  INCF   2B,F
....................          break; 
37E2:  BRA    381C
....................           
....................       case 3: 
....................          clean(1); 
37E4:  MOVLW  01
37E6:  MOVWF  x87
37E8:  CALL   0978
....................          printf(lcd_putc,"\a-EXIT-"); 
37EC:  MOVLW  08
37EE:  MOVWF  FF6
37F0:  MOVLW  02
37F2:  MOVWF  FF7
37F4:  CALL   0958
....................          c = kbd_getc(); 
37F8:  CALL   089C
37FC:  MOVFF  01,2C
....................          if (c == '1') --a; 
3800:  MOVF   2C,W
3802:  SUBLW  31
3804:  BTFSC  FD8.2
3806:  DECF   2B,F
....................          if (c == '2') a = 0; 
3808:  MOVF   2C,W
380A:  SUBLW  32
380C:  BTFSC  FD8.2
380E:  CLRF   2B
....................          if (c == '3') a = 1; 
3810:  MOVF   2C,W
3812:  SUBLW  33
3814:  BNZ   381A
3816:  MOVLW  01
3818:  MOVWF  2B
....................          break;          
381A:  BRA    381C
....................       } 
....................    }   
381C:  GOTO   1450
.................... } 
....................  
....................  
.................... void main() 
.................... { 
*
12AA:  CLRF   FF8
12AC:  BCF    FD0.7
12AE:  CLRF   FEA
12B0:  CLRF   FE9
12B2:  MOVLW  60
12B4:  MOVWF  FD3
12B6:  MOVF   FD3,W
12B8:  MOVF   FC1,W
12BA:  ANDLW  C0
12BC:  IORLW  0F
12BE:  MOVWF  FC1
12C0:  MOVLW  07
12C2:  MOVWF  FB4
12C4:  CLRF   04
12C6:  BCF    05.0
12C8:  CLRF   06
12CA:  CLRF   07
....................  
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
12CC:  MOVF   FC1,W
12CE:  ANDLW  C0
12D0:  IORLW  0F
12D2:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_2); 
12D4:  BCF    FC0.0
12D6:  BCF    FC0.1
12D8:  BCF    FC0.2
12DA:  BCF    FC0.7
12DC:  BSF    FC2.0
....................    //setup_pp(PMP_DISABLED); 
....................    setup_spi(SPI_SS_DISABLED); 
12DE:  BCF    FC6.5
12E0:  BCF    F94.7
12E2:  BSF    F93.0
12E4:  BCF    F93.1
12E6:  MOVLW  01
12E8:  MOVWF  FC6
12EA:  MOVLW  00
12EC:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
12EE:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
12F0:  MOVLW  80
12F2:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
12F4:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
12F6:  MOVLW  00
12F8:  MOVWF  FCA
12FA:  MOVLW  00
12FC:  MOVWF  FCB
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
12FE:  CLRF   FB1
....................    setup_ccp1(CCP_OFF); 
1300:  BSF    F94.2
1302:  CLRF   FBD
1304:  CLRF   FB7
1306:  CLRF   FB6
....................    setup_comparator(NC_NC_NC_NC); 
1308:  MOVLW  07
130A:  MOVWF  FB4
130C:  MOVF   F92,W
130E:  MOVWF  F92
1310:  MOVLW  03
1312:  MOVWF  00
1314:  DECFSZ 00,F
1316:  BRA    1314
1318:  MOVF   FB4,W
131A:  BCF    FA1.6
....................    kbd_init(); 
131C:  GOTO   0210
....................    rtc_init(); 
1320:  GOTO   028C
....................    lcd_init(); 
1324:  GOTO   040C
....................    Week schedule; 
....................    BYTE hour,min,sec; 
....................    BYTE day,month,year,dow; 
....................    dataLoad(1,&schedule); 
1328:  MOVLW  01
132A:  MOVWF  2B
132C:  CLRF   2D
132E:  MOVLW  08
1330:  MOVWF  2C
1332:  GOTO   046A
....................     while(true) 
....................     { 
....................       /// Obtain time from ds1302 
....................       rtc_get_time(hour, min, sec);  // Store time in hr, min, sec 
....................       rtc_get_date(day,month,year,dow); 
....................        
....................       /// Show time 
....................       lcd_gotoxy(5,1);             // Change cursor position on lcd 
*
13DE:  MOVLW  05
13E0:  MOVWF  x8E
13E2:  MOVLW  01
13E4:  MOVWF  x8F
13E6:  CALL   04E0
....................       showHour (hour,min,sec); 
13EA:  MOVFF  24,2B
13EE:  MOVFF  25,2C
13F2:  MOVFF  26,2D
13F6:  GOTO   0644
....................       lcd_gotoxy(3,2); 
13FA:  MOVLW  03
13FC:  MOVWF  x8E
13FE:  MOVLW  02
1400:  MOVWF  x8F
1402:  CALL   04E0
....................       showDate (day, month, year, dow);      
1406:  MOVFF  27,2B
140A:  MOVFF  28,2C
140E:  MOVFF  29,2D
1412:  MOVFF  2A,2E
1416:  GOTO   0690
....................       printf(lcd_putc, "\a"); 
141A:  MOVLW  07
141C:  MOVWF  x8D
141E:  CALL   052A
....................        
....................       if (kbd_getc() !='\0')  
1422:  CALL   089C
1426:  MOVF   01,F
1428:  BTFSC  FD8.2
142A:  GOTO   3828
....................       { 
....................          menu(schedule); 
....................          clean(2); 
*
3820:  MOVLW  02
3822:  MOVWF  x87
3824:  CALL   0978
....................       } 
....................     } 
3828:  GOTO   1336
....................  
.................... } 
382C:  SLEEP 

Configuration Fuses:
   Word  1: C83F   INTRC_IO IESO FCMEN PLL12 CPUDIV4 USBDIV
   Word  2: 0E39   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 00A1   STVREN NODEBUG NOLVP NOXINST ICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
